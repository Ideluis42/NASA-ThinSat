
CosmicDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e78  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bba  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f19  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00002ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000133d3  00000000  00000000  00002d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012d  00000000  00000000  0001615f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0001628c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000494b  00000000  00000000  000162f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	55 c0       	rjmp	.+170    	; 0xac <__ctors_end>
   2:	00 00       	nop
   4:	5b c0       	rjmp	.+182    	; 0xbc <__bad_interrupt>
   6:	00 00       	nop
   8:	59 c0       	rjmp	.+178    	; 0xbc <__bad_interrupt>
   a:	00 00       	nop
   c:	57 c0       	rjmp	.+174    	; 0xbc <__bad_interrupt>
   e:	00 00       	nop
  10:	55 c0       	rjmp	.+170    	; 0xbc <__bad_interrupt>
  12:	00 00       	nop
  14:	53 c0       	rjmp	.+166    	; 0xbc <__bad_interrupt>
  16:	00 00       	nop
  18:	51 c0       	rjmp	.+162    	; 0xbc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4f c0       	rjmp	.+158    	; 0xbc <__bad_interrupt>
  1e:	00 00       	nop
  20:	4d c0       	rjmp	.+154    	; 0xbc <__bad_interrupt>
  22:	00 00       	nop
  24:	4b c0       	rjmp	.+150    	; 0xbc <__bad_interrupt>
  26:	00 00       	nop
  28:	49 c0       	rjmp	.+146    	; 0xbc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	47 c0       	rjmp	.+142    	; 0xbc <__bad_interrupt>
  2e:	00 00       	nop
  30:	45 c0       	rjmp	.+138    	; 0xbc <__bad_interrupt>
  32:	00 00       	nop
  34:	43 c0       	rjmp	.+134    	; 0xbc <__bad_interrupt>
  36:	00 00       	nop
  38:	41 c0       	rjmp	.+130    	; 0xbc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3f c0       	rjmp	.+126    	; 0xbc <__bad_interrupt>
  3e:	00 00       	nop
  40:	3d c0       	rjmp	.+122    	; 0xbc <__bad_interrupt>
  42:	00 00       	nop
  44:	3b c0       	rjmp	.+118    	; 0xbc <__bad_interrupt>
  46:	00 00       	nop
  48:	39 c0       	rjmp	.+114    	; 0xbc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	37 c0       	rjmp	.+110    	; 0xbc <__bad_interrupt>
  4e:	00 00       	nop
  50:	35 c0       	rjmp	.+106    	; 0xbc <__bad_interrupt>
  52:	00 00       	nop
  54:	33 c0       	rjmp	.+102    	; 0xbc <__bad_interrupt>
  56:	00 00       	nop
  58:	31 c0       	rjmp	.+98     	; 0xbc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2f c0       	rjmp	.+94     	; 0xbc <__bad_interrupt>
  5e:	00 00       	nop
  60:	2d c0       	rjmp	.+90     	; 0xbc <__bad_interrupt>
  62:	00 00       	nop
  64:	2b c0       	rjmp	.+86     	; 0xbc <__bad_interrupt>
  66:	00 00       	nop
  68:	29 c0       	rjmp	.+82     	; 0xbc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	27 c0       	rjmp	.+78     	; 0xbc <__bad_interrupt>
  6e:	00 00       	nop
  70:	25 c0       	rjmp	.+74     	; 0xbc <__bad_interrupt>
  72:	00 00       	nop
  74:	23 c0       	rjmp	.+70     	; 0xbc <__bad_interrupt>
  76:	00 00       	nop
  78:	21 c0       	rjmp	.+66     	; 0xbc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1f c0       	rjmp	.+62     	; 0xbc <__bad_interrupt>
  7e:	00 00       	nop
  80:	1d c0       	rjmp	.+58     	; 0xbc <__bad_interrupt>
  82:	00 00       	nop
  84:	1b c0       	rjmp	.+54     	; 0xbc <__bad_interrupt>
  86:	00 00       	nop
  88:	19 c0       	rjmp	.+50     	; 0xbc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	17 c0       	rjmp	.+46     	; 0xbc <__bad_interrupt>
  8e:	00 00       	nop
  90:	15 c0       	rjmp	.+42     	; 0xbc <__bad_interrupt>
  92:	00 00       	nop
  94:	13 c0       	rjmp	.+38     	; 0xbc <__bad_interrupt>
  96:	00 00       	nop
  98:	11 c0       	rjmp	.+34     	; 0xbc <__bad_interrupt>
  9a:	00 00       	nop
  9c:	0f c0       	rjmp	.+30     	; 0xbc <__bad_interrupt>
  9e:	00 00       	nop
  a0:	0d c0       	rjmp	.+26     	; 0xbc <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0b c0       	rjmp	.+22     	; 0xbc <__bad_interrupt>
  a6:	00 00       	nop
  a8:	09 c0       	rjmp	.+18     	; 0xbc <__bad_interrupt>
	...

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	80 d0       	rcall	.+256    	; 0x1ba <main>
  ba:	9e c0       	rjmp	.+316    	; 0x1f8 <_exit>

000000bc <__bad_interrupt>:
  bc:	a1 cf       	rjmp	.-190    	; 0x0 <__vectors>

000000be <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
  be:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  c2:	8d ef       	ldi	r24, 0xFD	; 253
  c4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  c8:	08 95       	ret

000000ca <i2c_start>:
  ca:	94 ea       	ldi	r25, 0xA4	; 164
  cc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  d0:	ec eb       	ldi	r30, 0xBC	; 188
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	90 81       	ld	r25, Z
  d6:	99 23       	and	r25, r25
  d8:	ec f7       	brge	.-6      	; 0xd4 <i2c_start+0xa>
  da:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  de:	98 7f       	andi	r25, 0xF8	; 248
  e0:	98 30       	cpi	r25, 0x08	; 8
  e2:	11 f0       	breq	.+4      	; 0xe8 <i2c_start+0x1e>
  e4:	90 31       	cpi	r25, 0x10	; 16
  e6:	a1 f4       	brne	.+40     	; 0x110 <i2c_start+0x46>
  e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
  ec:	84 e8       	ldi	r24, 0x84	; 132
  ee:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
  f2:	ec eb       	ldi	r30, 0xBC	; 188
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	88 23       	and	r24, r24
  fa:	ec f7       	brge	.-6      	; 0xf6 <i2c_start+0x2c>
  fc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 100:	98 7f       	andi	r25, 0xF8	; 248
 102:	98 31       	cpi	r25, 0x18	; 24
 104:	39 f0       	breq	.+14     	; 0x114 <i2c_start+0x4a>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 34       	cpi	r25, 0x40	; 64
 10a:	29 f4       	brne	.+10     	; 0x116 <i2c_start+0x4c>
 10c:	80 e0       	ldi	r24, 0x00	; 0
 10e:	08 95       	ret
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	08 95       	ret
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	08 95       	ret

00000118 <i2c_start_wait>:
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	ec eb       	ldi	r30, 0xBC	; 188
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	24 ea       	ldi	r18, 0xA4	; 164
 122:	a9 eb       	ldi	r26, 0xB9	; 185
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	cb eb       	ldi	r28, 0xBB	; 187
 128:	d0 e0       	ldi	r29, 0x00	; 0
 12a:	34 e8       	ldi	r19, 0x84	; 132
 12c:	44 e9       	ldi	r20, 0x94	; 148
 12e:	20 83       	st	Z, r18
 130:	90 81       	ld	r25, Z
 132:	99 23       	and	r25, r25
 134:	ec f7       	brge	.-6      	; 0x130 <i2c_start_wait+0x18>
 136:	9c 91       	ld	r25, X
 138:	98 7f       	andi	r25, 0xF8	; 248
 13a:	98 30       	cpi	r25, 0x08	; 8
 13c:	11 f0       	breq	.+4      	; 0x142 <i2c_start_wait+0x2a>
 13e:	90 31       	cpi	r25, 0x10	; 16
 140:	b1 f7       	brne	.-20     	; 0x12e <i2c_start_wait+0x16>
 142:	88 83       	st	Y, r24
 144:	30 83       	st	Z, r19
 146:	90 81       	ld	r25, Z
 148:	99 23       	and	r25, r25
 14a:	ec f7       	brge	.-6      	; 0x146 <i2c_start_wait+0x2e>
 14c:	9c 91       	ld	r25, X
 14e:	98 7f       	andi	r25, 0xF8	; 248
 150:	90 32       	cpi	r25, 0x20	; 32
 152:	11 f0       	breq	.+4      	; 0x158 <i2c_start_wait+0x40>
 154:	98 35       	cpi	r25, 0x58	; 88
 156:	29 f4       	brne	.+10     	; 0x162 <i2c_start_wait+0x4a>
 158:	40 83       	st	Z, r20
 15a:	90 81       	ld	r25, Z
 15c:	94 fd       	sbrc	r25, 4
 15e:	fd cf       	rjmp	.-6      	; 0x15a <i2c_start_wait+0x42>
 160:	e6 cf       	rjmp	.-52     	; 0x12e <i2c_start_wait+0x16>
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <i2c_rep_start>:
 168:	b0 cf       	rjmp	.-160    	; 0xca <i2c_start>
 16a:	08 95       	ret

0000016c <i2c_stop>:
 16c:	84 e9       	ldi	r24, 0x94	; 148
 16e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 172:	ec eb       	ldi	r30, 0xBC	; 188
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	84 fd       	sbrc	r24, 4
 17a:	fd cf       	rjmp	.-6      	; 0x176 <i2c_stop+0xa>
 17c:	08 95       	ret

0000017e <i2c_write>:
 17e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 182:	84 e8       	ldi	r24, 0x84	; 132
 184:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 188:	ec eb       	ldi	r30, 0xBC	; 188
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <i2c_write+0xe>
 192:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 196:	98 7f       	andi	r25, 0xF8	; 248
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	98 32       	cpi	r25, 0x28	; 40
 19c:	09 f4       	brne	.+2      	; 0x1a0 <i2c_write+0x22>
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret

000001a2 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 1a2:	84 e8       	ldi	r24, 0x84	; 132
 1a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 1a8:	ec eb       	ldi	r30, 0xBC	; 188
 1aa:	f0 e0       	ldi	r31, 0x00	; 0
 1ac:	80 81       	ld	r24, Z
 1ae:	88 23       	and	r24, r24
 1b0:	ec f7       	brge	.-6      	; 0x1ac <i2c_readNak+0xa>
	
    return TWDR;
 1b2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 1b6:	08 95       	ret

000001b8 <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 1b8:	08 95       	ret

000001ba <main>:
#define M24C32_ADDR  0xB0
#define M24C32_WC    PD5
int main (void)
{

	DDRD  |=  (1 << PD7) ; // Set Debug LED as output
 1ba:	57 9a       	sbi	0x0a, 7	; 10
	DDRD  |=  (1 << M24C32_WC);
 1bc:	55 9a       	sbi	0x0a, 5	; 10
	PORTD &= ~(1 << M24C32_WC);
 1be:	5d 98       	cbi	0x0b, 5	; 11
	board_init();
 1c0:	fb df       	rcall	.-10     	; 0x1b8 <board_init>
	/* Insert application code here, after the board has been initialized. */
	unsigned char ret = 0;

	while (1)
	{
		i2c_init();
 1c2:	7d df       	rcall	.-262    	; 0xbe <i2c_init>
		// write 0x75 to EEPROM address 5 (Byte Write)
		i2c_start_wait(M24C32_MEM+I2C_WRITE);     // set device address and write mode
 1c4:	80 ea       	ldi	r24, 0xA0	; 160
 1c6:	a8 df       	rcall	.-176    	; 0x118 <i2c_start_wait>
		i2c_write(0x00);                          // most significant address byte
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	d9 df       	rcall	.-78     	; 0x17e <i2c_write>
		i2c_write(0x05);						  // least significant address byte
 1cc:	85 e0       	ldi	r24, 0x05	; 5
 1ce:	d7 df       	rcall	.-82     	; 0x17e <i2c_write>
		i2c_write(0x23);                          // write value 0x75 to EEPROM
 1d0:	83 e2       	ldi	r24, 0x23	; 35
 1d2:	d5 df       	rcall	.-86     	; 0x17e <i2c_write>
		i2c_stop();                               // set stop condition = release bus
 1d4:	cb df       	rcall	.-106    	; 0x16c <i2c_stop>
		// read previously written value back from EEPROM address 0
		i2c_start_wait(M24C32_MEM+I2C_WRITE);     // set device address and write mode
 1d6:	80 ea       	ldi	r24, 0xA0	; 160
		i2c_write(0x00);                          // write address most significant 0
 1d8:	9f df       	rcall	.-194    	; 0x118 <i2c_start_wait>
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	d0 df       	rcall	.-96     	; 0x17e <i2c_write>
		i2c_write(0x05);                          // write address least significant 0
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	ce df       	rcall	.-100    	; 0x17e <i2c_write>
 1e2:	81 ea       	ldi	r24, 0xA1	; 161
		i2c_rep_start(M24C32_MEM+I2C_READ);       // set device address and read mode
 1e4:	c1 df       	rcall	.-126    	; 0x168 <i2c_rep_start>
 1e6:	dd df       	rcall	.-70     	; 0x1a2 <i2c_readNak>
 1e8:	c1 df       	rcall	.-126    	; 0x16c <i2c_stop>
		ret = i2c_readNak();                      // read one byte from EEPROM
 1ea:	87 ea       	ldi	r24, 0xA7	; 167
 1ec:	91 e6       	ldi	r25, 0x61	; 97
		//ret = 23;
		i2c_stop();
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <main+0x3a>
 1f4:	00 00       	nop
 1f6:	e5 cf       	rjmp	.-54     	; 0x1c2 <main+0x8>

000001f8 <_exit>:
 1f8:	f8 94       	cli

000001fa <__stop_program>:
 1fa:	ff cf       	rjmp	.-2      	; 0x1fa <__stop_program>
