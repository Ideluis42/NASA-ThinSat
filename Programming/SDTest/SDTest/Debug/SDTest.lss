
SDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000017aa  0000183e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c8  00800120  00800120  0000185e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000185e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000449e  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001018  00000000  00000000  00005f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002119  00000000  00000000  00006f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bec  00000000  00000000  000090ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e8d  00000000  00000000  00009c98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005203  00000000  00000000  0000ab25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  0000fd28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      74:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      80:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      84:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      88:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e1       	ldi	r29, 0x10	; 16
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ea ea       	ldi	r30, 0xAA	; 170
      a0:	f7 e1       	ldi	r31, 0x17	; 23
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a0 32       	cpi	r26, 0x20	; 32
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	23 e0       	ldi	r18, 0x03	; 3
      b0:	a0 e2       	ldi	r26, 0x20	; 32
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a8 3e       	cpi	r26, 0xE8	; 232
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 49 07 	call	0xe92	; 0xe92 <main>
      c2:	0c 94 d3 0b 	jmp	0x17a6	; 0x17a6 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
      ca:	fc 01       	movw	r30, r24
      cc:	21 81       	ldd	r18, Z+1	; 0x01
      ce:	30 e0       	ldi	r19, 0x00	; 0
      d0:	32 2f       	mov	r19, r18
      d2:	22 27       	eor	r18, r18
      d4:	80 81       	ld	r24, Z
           (((uint16_t) p[0]) << 0);
}
      d6:	a9 01       	movw	r20, r18
      d8:	48 2b       	or	r20, r24
      da:	ca 01       	movw	r24, r20
      dc:	08 95       	ret

000000de <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
      de:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
      e0:	23 81       	ldd	r18, Z+3	; 0x03
      e2:	62 81       	ldd	r22, Z+2	; 0x02
      e4:	86 2f       	mov	r24, r22
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	a0 e0       	ldi	r26, 0x00	; 0
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	dc 01       	movw	r26, r24
      ee:	99 27       	eor	r25, r25
      f0:	88 27       	eor	r24, r24
      f2:	b2 2b       	or	r27, r18
      f4:	20 81       	ld	r18, Z
      f6:	82 2b       	or	r24, r18
      f8:	21 81       	ldd	r18, Z+1	; 0x01
      fa:	bc 01       	movw	r22, r24
      fc:	cd 01       	movw	r24, r26
      fe:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     100:	08 95       	ret

00000102 <fat_get_next_cluster>:
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
     102:	0f 93       	push	r16
     104:	1f 93       	push	r17
     106:	cf 93       	push	r28
     108:	df 93       	push	r29
     10a:	00 d0       	rcall	.+0      	; 0x10c <fat_get_next_cluster+0xa>
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
     110:	00 97       	sbiw	r24, 0x00	; 0
     112:	81 f1       	breq	.+96     	; 0x174 <fat_get_next_cluster+0x72>
     114:	62 30       	cpi	r22, 0x02	; 2
     116:	71 05       	cpc	r23, r1
     118:	80 f1       	brcs	.+96     	; 0x17a <fat_get_next_cluster+0x78>
     11a:	fc 01       	movw	r30, r24
     11c:	ab 01       	movw	r20, r22
     11e:	60 e0       	ldi	r22, 0x00	; 0
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	44 0f       	add	r20, r20
     124:	55 1f       	adc	r21, r21
     126:	66 1f       	adc	r22, r22
     128:	77 1f       	adc	r23, r23
     12a:	86 81       	ldd	r24, Z+6	; 0x06
     12c:	97 81       	ldd	r25, Z+7	; 0x07
     12e:	a0 85       	ldd	r26, Z+8	; 0x08
     130:	b1 85       	ldd	r27, Z+9	; 0x09
     132:	8a 01       	movw	r16, r20
     134:	9b 01       	movw	r18, r22
     136:	08 0f       	add	r16, r24
     138:	19 1f       	adc	r17, r25
     13a:	2a 1f       	adc	r18, r26
     13c:	3b 1f       	adc	r19, r27
     13e:	c9 01       	movw	r24, r18
     140:	b8 01       	movw	r22, r16
     142:	01 90       	ld	r0, Z+
     144:	f0 81       	ld	r31, Z
     146:	e0 2d       	mov	r30, r0
     148:	01 90       	ld	r0, Z+
     14a:	f0 81       	ld	r31, Z
     14c:	e0 2d       	mov	r30, r0
     14e:	22 e0       	ldi	r18, 0x02	; 2
     150:	30 e0       	ldi	r19, 0x00	; 0
     152:	ae 01       	movw	r20, r28
     154:	4f 5f       	subi	r20, 0xFF	; 255
     156:	5f 4f       	sbci	r21, 0xFF	; 255
     158:	09 95       	icall
     15a:	88 23       	and	r24, r24
     15c:	41 f0       	breq	.+16     	; 0x16e <fat_get_next_cluster+0x6c>
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	9c 01       	movw	r18, r24
     164:	21 50       	subi	r18, 0x01	; 1
     166:	31 09       	sbc	r19, r1
     168:	2f 3e       	cpi	r18, 0xEF	; 239
     16a:	3f 4f       	sbci	r19, 0xFF	; 255
     16c:	40 f0       	brcs	.+16     	; 0x17e <fat_get_next_cluster+0x7c>
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	05 c0       	rjmp	.+10     	; 0x17e <fat_get_next_cluster+0x7c>
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	02 c0       	rjmp	.+4      	; 0x17e <fat_get_next_cluster+0x7c>
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0f 90       	pop	r0
     180:	0f 90       	pop	r0
     182:	df 91       	pop	r29
     184:	cf 91       	pop	r28
     186:	1f 91       	pop	r17
     188:	0f 91       	pop	r16
     18a:	08 95       	ret

0000018c <fat_cluster_offset>:
     18c:	0f 93       	push	r16
     18e:	1f 93       	push	r17
     190:	fc 01       	movw	r30, r24
     192:	89 2b       	or	r24, r25
     194:	99 f0       	breq	.+38     	; 0x1bc <fat_cluster_offset+0x30>
     196:	62 30       	cpi	r22, 0x02	; 2
     198:	71 05       	cpc	r23, r1
     19a:	a0 f0       	brcs	.+40     	; 0x1c4 <fat_cluster_offset+0x38>
     19c:	9b 01       	movw	r18, r22
     19e:	22 50       	subi	r18, 0x02	; 2
     1a0:	31 09       	sbc	r19, r1
     1a2:	a0 89       	ldd	r26, Z+16	; 0x10
     1a4:	b1 89       	ldd	r27, Z+17	; 0x11
     1a6:	0e 94 8e 0b 	call	0x171c	; 0x171c <__umulhisi3>
     1aa:	02 89       	ldd	r16, Z+18	; 0x12
     1ac:	13 89       	ldd	r17, Z+19	; 0x13
     1ae:	24 89       	ldd	r18, Z+20	; 0x14
     1b0:	35 89       	ldd	r19, Z+21	; 0x15
     1b2:	60 0f       	add	r22, r16
     1b4:	71 1f       	adc	r23, r17
     1b6:	82 1f       	adc	r24, r18
     1b8:	93 1f       	adc	r25, r19
     1ba:	07 c0       	rjmp	.+14     	; 0x1ca <fat_cluster_offset+0x3e>
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	70 e0       	ldi	r23, 0x00	; 0
     1c0:	cb 01       	movw	r24, r22
     1c2:	03 c0       	rjmp	.+6      	; 0x1ca <fat_cluster_offset+0x3e>
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	70 e0       	ldi	r23, 0x00	; 0
     1c8:	cb 01       	movw	r24, r22
     1ca:	1f 91       	pop	r17
     1cc:	0f 91       	pop	r16
     1ce:	08 95       	ret

000001d0 <fat_calc_83_checksum>:
     1d0:	9c 01       	movw	r18, r24
     1d2:	fc 01       	movw	r30, r24
     1d4:	81 91       	ld	r24, Z+
     1d6:	25 5f       	subi	r18, 0xF5	; 245
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	80 fb       	bst	r24, 0
     1dc:	87 95       	ror	r24
     1de:	87 f9       	bld	r24, 7
     1e0:	91 91       	ld	r25, Z+
     1e2:	89 0f       	add	r24, r25
     1e4:	e2 17       	cp	r30, r18
     1e6:	f3 07       	cpc	r31, r19
     1e8:	c1 f7       	brne	.-16     	; 0x1da <fat_calc_83_checksum+0xa>
     1ea:	08 95       	ret

000001ec <fat_dir_entry_read_callback>:
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	af 92       	push	r10
     1f6:	bf 92       	push	r11
     1f8:	cf 92       	push	r12
     1fa:	df 92       	push	r13
     1fc:	ef 92       	push	r14
     1fe:	ff 92       	push	r15
     200:	0f 93       	push	r16
     202:	1f 93       	push	r17
     204:	cf 93       	push	r28
     206:	df 93       	push	r29
     208:	cd b7       	in	r28, 0x3d	; 61
     20a:	de b7       	in	r29, 0x3e	; 62
     20c:	2d 97       	sbiw	r28, 0x0d	; 13
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	f8 94       	cli
     212:	de bf       	out	0x3e, r29	; 62
     214:	0f be       	out	0x3f, r0	; 63
     216:	cd bf       	out	0x3d, r28	; 61
     218:	f9 01       	movw	r30, r18
     21a:	c0 80       	ld	r12, Z
     21c:	d1 80       	ldd	r13, Z+1	; 0x01
     21e:	22 81       	ldd	r18, Z+2	; 0x02
     220:	33 81       	ldd	r19, Z+3	; 0x03
     222:	20 5e       	subi	r18, 0xE0	; 224
     224:	3f 4f       	sbci	r19, 0xFF	; 255
     226:	33 83       	std	Z+3, r19	; 0x03
     228:	22 83       	std	Z+2, r18	; 0x02
     22a:	dc 01       	movw	r26, r24
     22c:	2c 91       	ld	r18, X
     22e:	25 3e       	cpi	r18, 0xE5	; 229
     230:	11 f0       	breq	.+4      	; 0x236 <fat_dir_entry_read_callback+0x4a>
     232:	21 11       	cpse	r18, r1
     234:	03 c0       	rjmp	.+6      	; 0x23c <fat_dir_entry_read_callback+0x50>
     236:	14 82       	std	Z+4, r1	; 0x04
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	fa c0       	rjmp	.+500    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     23c:	56 01       	movw	r10, r12
     23e:	dc 01       	movw	r26, r24
     240:	1b 96       	adiw	r26, 0x0b	; 11
     242:	2c 91       	ld	r18, X
     244:	1b 97       	sbiw	r26, 0x0b	; 11
     246:	2f 30       	cpi	r18, 0x0F	; 15
     248:	09 f0       	breq	.+2      	; 0x24c <fat_dir_entry_read_callback+0x60>
     24a:	40 c0       	rjmp	.+128    	; 0x2cc <fat_dir_entry_read_callback+0xe0>
     24c:	24 81       	ldd	r18, Z+4	; 0x04
     24e:	22 23       	and	r18, r18
     250:	21 f0       	breq	.+8      	; 0x25a <fat_dir_entry_read_callback+0x6e>
     252:	1d 96       	adiw	r26, 0x0d	; 13
     254:	3c 91       	ld	r19, X
     256:	23 17       	cp	r18, r19
     258:	71 f0       	breq	.+28     	; 0x276 <fat_dir_entry_read_callback+0x8a>
     25a:	2b e2       	ldi	r18, 0x2B	; 43
     25c:	d6 01       	movw	r26, r12
     25e:	1d 92       	st	X+, r1
     260:	2a 95       	dec	r18
     262:	e9 f7       	brne	.-6      	; 0x25e <fat_dir_entry_read_callback+0x72>
     264:	dc 01       	movw	r26, r24
     266:	1d 96       	adiw	r26, 0x0d	; 13
     268:	2c 91       	ld	r18, X
     26a:	24 83       	std	Z+4, r18	; 0x04
     26c:	f6 01       	movw	r30, r12
     26e:	47 a3       	std	Z+39, r20	; 0x27
     270:	50 a7       	std	Z+40, r21	; 0x28
     272:	61 a7       	std	Z+41, r22	; 0x29
     274:	72 a7       	std	Z+42, r23	; 0x2a
     276:	dc 01       	movw	r26, r24
     278:	2c 91       	ld	r18, X
     27a:	2f 73       	andi	r18, 0x3F	; 63
     27c:	30 e0       	ldi	r19, 0x00	; 0
     27e:	21 50       	subi	r18, 0x01	; 1
     280:	31 09       	sbc	r19, r1
     282:	4d e0       	ldi	r20, 0x0D	; 13
     284:	42 9f       	mul	r20, r18
     286:	b0 01       	movw	r22, r0
     288:	43 9f       	mul	r20, r19
     28a:	70 0d       	add	r23, r0
     28c:	11 24       	eor	r1, r1
     28e:	2d e0       	ldi	r18, 0x0D	; 13
     290:	e0 e0       	ldi	r30, 0x00	; 0
     292:	f1 e0       	ldi	r31, 0x01	; 1
     294:	de 01       	movw	r26, r28
     296:	11 96       	adiw	r26, 0x01	; 1
     298:	01 90       	ld	r0, Z+
     29a:	0d 92       	st	X+, r0
     29c:	2a 95       	dec	r18
     29e:	e1 f7       	brne	.-8      	; 0x298 <fat_dir_entry_read_callback+0xac>
     2a0:	6f 31       	cpi	r22, 0x1F	; 31
     2a2:	71 05       	cpc	r23, r1
     2a4:	08 f4       	brcc	.+2      	; 0x2a8 <fat_dir_entry_read_callback+0xbc>
     2a6:	a7 c0       	rjmp	.+334    	; 0x3f6 <fat_dir_entry_read_callback+0x20a>
     2a8:	0f c0       	rjmp	.+30     	; 0x2c8 <fat_dir_entry_read_callback+0xdc>
     2aa:	21 91       	ld	r18, Z+
     2ac:	8c 01       	movw	r16, r24
     2ae:	02 0f       	add	r16, r18
     2b0:	11 1d       	adc	r17, r1
     2b2:	d8 01       	movw	r26, r16
     2b4:	2c 91       	ld	r18, X
     2b6:	d6 01       	movw	r26, r12
     2b8:	2d 93       	st	X+, r18
     2ba:	6d 01       	movw	r12, r26
     2bc:	e6 17       	cp	r30, r22
     2be:	f7 07       	cpc	r31, r23
     2c0:	19 f0       	breq	.+6      	; 0x2c8 <fat_dir_entry_read_callback+0xdc>
     2c2:	e4 17       	cp	r30, r20
     2c4:	f5 07       	cpc	r31, r21
     2c6:	89 f7       	brne	.-30     	; 0x2aa <fat_dir_entry_read_callback+0xbe>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	b2 c0       	rjmp	.+356    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     2cc:	7f 01       	movw	r14, r30
     2ce:	2a 01       	movw	r4, r20
     2d0:	3b 01       	movw	r6, r22
     2d2:	8c 01       	movw	r16, r24
     2d4:	f6 01       	movw	r30, r12
     2d6:	80 81       	ld	r24, Z
     2d8:	88 23       	and	r24, r24
     2da:	49 f0       	breq	.+18     	; 0x2ee <fat_dir_entry_read_callback+0x102>
     2dc:	cd 01       	movw	r24, r26
     2de:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <fat_calc_83_checksum>
     2e2:	d7 01       	movw	r26, r14
     2e4:	14 96       	adiw	r26, 0x04	; 4
     2e6:	9c 91       	ld	r25, X
     2e8:	98 17       	cp	r25, r24
     2ea:	09 f4       	brne	.+2      	; 0x2ee <fat_dir_entry_read_callback+0x102>
     2ec:	68 c0       	rjmp	.+208    	; 0x3be <fat_dir_entry_read_callback+0x1d2>
     2ee:	8b e2       	ldi	r24, 0x2B	; 43
     2f0:	f6 01       	movw	r30, r12
     2f2:	11 92       	st	Z+, r1
     2f4:	8a 95       	dec	r24
     2f6:	e9 f7       	brne	.-6      	; 0x2f2 <fat_dir_entry_read_callback+0x106>
     2f8:	d6 01       	movw	r26, r12
     2fa:	97 96       	adiw	r26, 0x27	; 39
     2fc:	4d 92       	st	X+, r4
     2fe:	5d 92       	st	X+, r5
     300:	6d 92       	st	X+, r6
     302:	7c 92       	st	X, r7
     304:	9a 97       	sbiw	r26, 0x2a	; 42
     306:	f8 01       	movw	r30, r16
     308:	90 81       	ld	r25, Z
     30a:	90 32       	cpi	r25, 0x20	; 32
     30c:	e9 f0       	breq	.+58     	; 0x348 <fat_dir_entry_read_callback+0x15c>
     30e:	a6 01       	movw	r20, r12
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	04 c0       	rjmp	.+8      	; 0x31c <fat_dir_entry_read_callback+0x130>
     314:	31 96       	adiw	r30, 0x01	; 1
     316:	90 81       	ld	r25, Z
     318:	90 32       	cpi	r25, 0x20	; 32
     31a:	b9 f0       	breq	.+46     	; 0x34a <fat_dir_entry_read_callback+0x15e>
     31c:	da 01       	movw	r26, r20
     31e:	9d 93       	st	X+, r25
     320:	ad 01       	movw	r20, r26
     322:	d8 01       	movw	r26, r16
     324:	1c 96       	adiw	r26, 0x0c	; 12
     326:	2c 91       	ld	r18, X
     328:	23 ff       	sbrs	r18, 3
     32a:	0a c0       	rjmp	.+20     	; 0x340 <fat_dir_entry_read_callback+0x154>
     32c:	20 81       	ld	r18, Z
     32e:	21 54       	subi	r18, 0x41	; 65
     330:	2a 31       	cpi	r18, 0x1A	; 26
     332:	30 f4       	brcc	.+12     	; 0x340 <fat_dir_entry_read_callback+0x154>
     334:	9a 01       	movw	r18, r20
     336:	21 50       	subi	r18, 0x01	; 1
     338:	31 09       	sbc	r19, r1
     33a:	90 5e       	subi	r25, 0xE0	; 224
     33c:	d9 01       	movw	r26, r18
     33e:	9c 93       	st	X, r25
     340:	8f 5f       	subi	r24, 0xFF	; 255
     342:	88 30       	cpi	r24, 0x08	; 8
     344:	39 f7       	brne	.-50     	; 0x314 <fat_dir_entry_read_callback+0x128>
     346:	01 c0       	rjmp	.+2      	; 0x34a <fat_dir_entry_read_callback+0x15e>
     348:	80 e0       	ldi	r24, 0x00	; 0
     34a:	f6 01       	movw	r30, r12
     34c:	90 81       	ld	r25, Z
     34e:	95 30       	cpi	r25, 0x05	; 5
     350:	11 f4       	brne	.+4      	; 0x356 <fat_dir_entry_read_callback+0x16a>
     352:	95 ee       	ldi	r25, 0xE5	; 229
     354:	90 83       	st	Z, r25
     356:	d8 01       	movw	r26, r16
     358:	18 96       	adiw	r26, 0x08	; 8
     35a:	9c 91       	ld	r25, X
     35c:	18 97       	sbiw	r26, 0x08	; 8
     35e:	90 32       	cpi	r25, 0x20	; 32
     360:	51 f1       	breq	.+84     	; 0x3b6 <fat_dir_entry_read_callback+0x1ca>
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	98 0f       	add	r25, r24
     366:	2e e2       	ldi	r18, 0x2E	; 46
     368:	f6 01       	movw	r30, r12
     36a:	e8 0f       	add	r30, r24
     36c:	f1 1d       	adc	r31, r1
     36e:	20 83       	st	Z, r18
     370:	18 96       	adiw	r26, 0x08	; 8
     372:	2c 91       	ld	r18, X
     374:	20 32       	cpi	r18, 0x20	; 32
     376:	e1 f0       	breq	.+56     	; 0x3b0 <fat_dir_entry_read_callback+0x1c4>
     378:	f8 01       	movw	r30, r16
     37a:	8c 5f       	subi	r24, 0xFC	; 252
     37c:	04 c0       	rjmp	.+8      	; 0x386 <fat_dir_entry_read_callback+0x19a>
     37e:	31 96       	adiw	r30, 0x01	; 1
     380:	20 85       	ldd	r18, Z+8	; 0x08
     382:	20 32       	cpi	r18, 0x20	; 32
     384:	b9 f0       	breq	.+46     	; 0x3b4 <fat_dir_entry_read_callback+0x1c8>
     386:	a5 01       	movw	r20, r10
     388:	49 0f       	add	r20, r25
     38a:	51 1d       	adc	r21, r1
     38c:	da 01       	movw	r26, r20
     38e:	2c 93       	st	X, r18
     390:	d8 01       	movw	r26, r16
     392:	1c 96       	adiw	r26, 0x0c	; 12
     394:	3c 91       	ld	r19, X
     396:	34 ff       	sbrs	r19, 4
     398:	07 c0       	rjmp	.+14     	; 0x3a8 <fat_dir_entry_read_callback+0x1bc>
     39a:	30 85       	ldd	r19, Z+8	; 0x08
     39c:	31 54       	subi	r19, 0x41	; 65
     39e:	3a 31       	cpi	r19, 0x1A	; 26
     3a0:	18 f4       	brcc	.+6      	; 0x3a8 <fat_dir_entry_read_callback+0x1bc>
     3a2:	20 5e       	subi	r18, 0xE0	; 224
     3a4:	da 01       	movw	r26, r20
     3a6:	2c 93       	st	X, r18
     3a8:	9f 5f       	subi	r25, 0xFF	; 255
     3aa:	98 13       	cpse	r25, r24
     3ac:	e8 cf       	rjmp	.-48     	; 0x37e <fat_dir_entry_read_callback+0x192>
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <fat_dir_entry_read_callback+0x1ca>
     3b0:	89 2f       	mov	r24, r25
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <fat_dir_entry_read_callback+0x1ca>
     3b4:	89 2f       	mov	r24, r25
     3b6:	f6 01       	movw	r30, r12
     3b8:	e8 0f       	add	r30, r24
     3ba:	f1 1d       	adc	r31, r1
     3bc:	10 82       	st	Z, r1
     3be:	f8 01       	movw	r30, r16
     3c0:	83 85       	ldd	r24, Z+11	; 0x0b
     3c2:	d6 01       	movw	r26, r12
     3c4:	90 96       	adiw	r26, 0x20	; 32
     3c6:	8c 93       	st	X, r24
     3c8:	c8 01       	movw	r24, r16
     3ca:	4a 96       	adiw	r24, 0x1a	; 26
     3cc:	0e 94 65 00 	call	0xca	; 0xca <read16>
     3d0:	f6 01       	movw	r30, r12
     3d2:	92 a3       	std	Z+34, r25	; 0x22
     3d4:	81 a3       	std	Z+33, r24	; 0x21
     3d6:	c8 01       	movw	r24, r16
     3d8:	4c 96       	adiw	r24, 0x1c	; 28
     3da:	0e 94 6f 00 	call	0xde	; 0xde <read32>
     3de:	d6 01       	movw	r26, r12
     3e0:	93 96       	adiw	r26, 0x23	; 35
     3e2:	6d 93       	st	X+, r22
     3e4:	7d 93       	st	X+, r23
     3e6:	8d 93       	st	X+, r24
     3e8:	9c 93       	st	X, r25
     3ea:	96 97       	sbiw	r26, 0x26	; 38
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	f7 01       	movw	r30, r14
     3f0:	85 83       	std	Z+5, r24	; 0x05
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	1d c0       	rjmp	.+58     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     3f6:	29 81       	ldd	r18, Y+1	; 0x01
     3f8:	fc 01       	movw	r30, r24
     3fa:	e2 0f       	add	r30, r18
     3fc:	f1 1d       	adc	r31, r1
     3fe:	20 81       	ld	r18, Z
     400:	f6 01       	movw	r30, r12
     402:	e6 0f       	add	r30, r22
     404:	f7 1f       	adc	r31, r23
     406:	20 83       	st	Z, r18
     408:	fe 01       	movw	r30, r28
     40a:	32 96       	adiw	r30, 0x02	; 2
     40c:	db 01       	movw	r26, r22
     40e:	11 96       	adiw	r26, 0x01	; 1
     410:	ca 0e       	add	r12, r26
     412:	db 1e       	adc	r13, r27
     414:	4f e1       	ldi	r20, 0x1F	; 31
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	46 1b       	sub	r20, r22
     41a:	57 0b       	sbc	r21, r23
     41c:	01 e0       	ldi	r16, 0x01	; 1
     41e:	10 e0       	ldi	r17, 0x00	; 0
     420:	0c 0f       	add	r16, r28
     422:	1d 1f       	adc	r17, r29
     424:	40 0f       	add	r20, r16
     426:	51 1f       	adc	r21, r17
     428:	be 01       	movw	r22, r28
     42a:	62 5f       	subi	r22, 0xF2	; 242
     42c:	7f 4f       	sbci	r23, 0xFF	; 255
     42e:	49 cf       	rjmp	.-366    	; 0x2c2 <fat_dir_entry_read_callback+0xd6>
     430:	2d 96       	adiw	r28, 0x0d	; 13
     432:	0f b6       	in	r0, 0x3f	; 63
     434:	f8 94       	cli
     436:	de bf       	out	0x3e, r29	; 62
     438:	0f be       	out	0x3f, r0	; 63
     43a:	cd bf       	out	0x3d, r28	; 61
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	7f 90       	pop	r7
     452:	6f 90       	pop	r6
     454:	5f 90       	pop	r5
     456:	4f 90       	pop	r4
     458:	08 95       	ret

0000045a <fat_open>:
     45a:	2f 92       	push	r2
     45c:	3f 92       	push	r3
     45e:	4f 92       	push	r4
     460:	5f 92       	push	r5
     462:	6f 92       	push	r6
     464:	7f 92       	push	r7
     466:	8f 92       	push	r8
     468:	9f 92       	push	r9
     46a:	af 92       	push	r10
     46c:	bf 92       	push	r11
     46e:	cf 92       	push	r12
     470:	df 92       	push	r13
     472:	ef 92       	push	r14
     474:	ff 92       	push	r15
     476:	0f 93       	push	r16
     478:	1f 93       	push	r17
     47a:	cf 93       	push	r28
     47c:	df 93       	push	r29
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
     482:	a8 97       	sbiw	r28, 0x28	; 40
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	00 97       	sbiw	r24, 0x00	; 0
     490:	09 f4       	brne	.+2      	; 0x494 <fat_open+0x3a>
     492:	36 c1       	rjmp	.+620    	; 0x700 <fat_open+0x2a6>
     494:	dc 01       	movw	r26, r24
     496:	14 96       	adiw	r26, 0x04	; 4
     498:	2d 91       	ld	r18, X+
     49a:	3c 91       	ld	r19, X
     49c:	15 97       	sbiw	r26, 0x05	; 5
     49e:	23 2b       	or	r18, r19
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <fat_open+0x4a>
     4a2:	31 c1       	rjmp	.+610    	; 0x706 <fat_open+0x2ac>
     4a4:	16 96       	adiw	r26, 0x06	; 6
     4a6:	2d 91       	ld	r18, X+
     4a8:	3c 91       	ld	r19, X
     4aa:	17 97       	sbiw	r26, 0x07	; 7
     4ac:	23 2b       	or	r18, r19
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <fat_open+0x58>
     4b0:	2d c1       	rjmp	.+602    	; 0x70c <fat_open+0x2b2>
     4b2:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <fat_fs_handles>
     4b6:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <fat_fs_handles+0x1>
     4ba:	23 2b       	or	r18, r19
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <fat_open+0x66>
     4be:	29 c1       	rjmp	.+594    	; 0x712 <fat_open+0x2b8>
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	55 c1       	rjmp	.+682    	; 0x770 <fat_open+0x316>
     4c6:	ce 01       	movw	r24, r28
     4c8:	01 96       	adiw	r24, 0x01	; 1
     4ca:	0e 94 65 00 	call	0xca	; 0xca <read16>
     4ce:	1c 01       	movw	r2, r24
     4d0:	ce 01       	movw	r24, r28
     4d2:	04 96       	adiw	r24, 0x04	; 4
     4d4:	0e 94 65 00 	call	0xca	; 0xca <read16>
     4d8:	9b 8f       	std	Y+27, r25	; 0x1b
     4da:	8a 8f       	std	Y+26, r24	; 0x1a
     4dc:	bb 81       	ldd	r27, Y+3	; 0x03
     4de:	be a3       	std	Y+38, r27	; 0x26
     4e0:	ee 81       	ldd	r30, Y+6	; 0x06
     4e2:	ee 8f       	std	Y+30, r30	; 0x1e
     4e4:	ce 01       	movw	r24, r28
     4e6:	07 96       	adiw	r24, 0x07	; 7
     4e8:	0e 94 65 00 	call	0xca	; 0xca <read16>
     4ec:	98 a7       	std	Y+40, r25	; 0x28
     4ee:	8f a3       	std	Y+39, r24	; 0x27
     4f0:	ce 01       	movw	r24, r28
     4f2:	09 96       	adiw	r24, 0x09	; 9
     4f4:	0e 94 65 00 	call	0xca	; 0xca <read16>
     4f8:	7c 01       	movw	r14, r24
     4fa:	ce 01       	movw	r24, r28
     4fc:	0c 96       	adiw	r24, 0x0c	; 12
     4fe:	0e 94 65 00 	call	0xca	; 0xca <read16>
     502:	6c 01       	movw	r12, r24
     504:	ce 01       	movw	r24, r28
     506:	46 96       	adiw	r24, 0x16	; 22
     508:	0e 94 6f 00 	call	0xde	; 0xde <read32>
     50c:	2b 01       	movw	r4, r22
     50e:	3c 01       	movw	r6, r24
     510:	67 2b       	or	r22, r23
     512:	68 2b       	or	r22, r24
     514:	69 2b       	or	r22, r25
     516:	39 f4       	brne	.+14     	; 0x526 <fat_open+0xcc>
     518:	e1 14       	cp	r14, r1
     51a:	f1 04       	cpc	r15, r1
     51c:	09 f4       	brne	.+2      	; 0x520 <fat_open+0xc6>
     51e:	22 c1       	rjmp	.+580    	; 0x764 <fat_open+0x30a>
     520:	27 01       	movw	r4, r14
     522:	61 2c       	mov	r6, r1
     524:	71 2c       	mov	r7, r1
     526:	c1 14       	cp	r12, r1
     528:	d1 04       	cpc	r13, r1
     52a:	09 f4       	brne	.+2      	; 0x52e <fat_open+0xd4>
     52c:	1b c1       	rjmp	.+566    	; 0x764 <fat_open+0x30a>
     52e:	4a 8d       	ldd	r20, Y+26	; 0x1a
     530:	5b 8d       	ldd	r21, Y+27	; 0x1b
     532:	9a 01       	movw	r18, r20
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	2a 8f       	std	Y+26, r18	; 0x1a
     53a:	3b 8f       	std	Y+27, r19	; 0x1b
     53c:	4c 8f       	std	Y+28, r20	; 0x1c
     53e:	5d 8f       	std	Y+29, r21	; 0x1d
     540:	96 01       	movw	r18, r12
     542:	5e 8d       	ldd	r21, Y+30	; 0x1e
     544:	a5 2f       	mov	r26, r21
     546:	b0 e0       	ldi	r27, 0x00	; 0
     548:	0e 94 8e 0b 	call	0x171c	; 0x171c <__umulhisi3>
     54c:	6e 8f       	std	Y+30, r22	; 0x1e
     54e:	7f 8f       	std	Y+31, r23	; 0x1f
     550:	88 a3       	std	Y+32, r24	; 0x20
     552:	99 a3       	std	Y+33, r25	; 0x21
     554:	73 01       	movw	r14, r6
     556:	62 01       	movw	r12, r4
     558:	8a 8d       	ldd	r24, Y+26	; 0x1a
     55a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     55c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     55e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     560:	c8 1a       	sub	r12, r24
     562:	d9 0a       	sbc	r13, r25
     564:	ea 0a       	sbc	r14, r26
     566:	fb 0a       	sbc	r15, r27
     568:	2e 8d       	ldd	r18, Y+30	; 0x1e
     56a:	3f 8d       	ldd	r19, Y+31	; 0x1f
     56c:	48 a1       	ldd	r20, Y+32	; 0x20
     56e:	59 a1       	ldd	r21, Y+33	; 0x21
     570:	c2 1a       	sub	r12, r18
     572:	d3 0a       	sbc	r13, r19
     574:	e4 0a       	sbc	r14, r20
     576:	f5 0a       	sbc	r15, r21
     578:	c1 01       	movw	r24, r2
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	2f a1       	ldd	r18, Y+39	; 0x27
     57e:	38 a5       	ldd	r19, Y+40	; 0x28
     580:	22 0f       	add	r18, r18
     582:	33 1f       	adc	r19, r19
     584:	22 95       	swap	r18
     586:	32 95       	swap	r19
     588:	30 7f       	andi	r19, 0xF0	; 240
     58a:	32 27       	eor	r19, r18
     58c:	20 7f       	andi	r18, 0xF0	; 240
     58e:	32 27       	eor	r19, r18
     590:	82 0f       	add	r24, r18
     592:	93 1f       	adc	r25, r19
     594:	b1 01       	movw	r22, r2
     596:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <__udivmodhi4>
     59a:	a7 01       	movw	r20, r14
     59c:	96 01       	movw	r18, r12
     59e:	26 1b       	sub	r18, r22
     5a0:	37 0b       	sbc	r19, r23
     5a2:	41 09       	sbc	r20, r1
     5a4:	51 09       	sbc	r21, r1
     5a6:	ca 01       	movw	r24, r20
     5a8:	b9 01       	movw	r22, r18
     5aa:	3e a1       	ldd	r19, Y+38	; 0x26
     5ac:	c3 2e       	mov	r12, r19
     5ae:	d1 2c       	mov	r13, r1
     5b0:	e1 2c       	mov	r14, r1
     5b2:	f1 2c       	mov	r15, r1
     5b4:	a7 01       	movw	r20, r14
     5b6:	96 01       	movw	r18, r12
     5b8:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__udivmodsi4>
     5bc:	69 01       	movw	r12, r18
     5be:	7a 01       	movw	r14, r20
     5c0:	45 ef       	ldi	r20, 0xF5	; 245
     5c2:	c4 16       	cp	r12, r20
     5c4:	4f e0       	ldi	r20, 0x0F	; 15
     5c6:	d4 06       	cpc	r13, r20
     5c8:	e1 04       	cpc	r14, r1
     5ca:	f1 04       	cpc	r15, r1
     5cc:	08 f4       	brcc	.+2      	; 0x5d0 <fat_open+0x176>
     5ce:	ca c0       	rjmp	.+404    	; 0x764 <fat_open+0x30a>
     5d0:	55 ef       	ldi	r21, 0xF5	; 245
     5d2:	c5 16       	cp	r12, r21
     5d4:	5f ef       	ldi	r21, 0xFF	; 255
     5d6:	d5 06       	cpc	r13, r21
     5d8:	e1 04       	cpc	r14, r1
     5da:	f1 04       	cpc	r15, r1
     5dc:	28 f4       	brcc	.+10     	; 0x5e8 <fat_open+0x18e>
     5de:	86 e0       	ldi	r24, 0x06	; 6
     5e0:	d8 01       	movw	r26, r16
     5e2:	18 96       	adiw	r26, 0x08	; 8
     5e4:	8c 93       	st	X, r24
     5e6:	03 c0       	rjmp	.+6      	; 0x5ee <fat_open+0x194>
     5e8:	8b e0       	ldi	r24, 0x0B	; 11
     5ea:	f8 01       	movw	r30, r16
     5ec:	80 87       	std	Z+8, r24	; 0x08
     5ee:	88 e1       	ldi	r24, 0x18	; 24
     5f0:	e7 eb       	ldi	r30, 0xB7	; 183
     5f2:	f1 e0       	ldi	r31, 0x01	; 1
     5f4:	df 01       	movw	r26, r30
     5f6:	1d 92       	st	X+, r1
     5f8:	8a 95       	dec	r24
     5fa:	e9 f7       	brne	.-6      	; 0x5f6 <fat_open+0x19c>
     5fc:	91 01       	movw	r18, r2
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	2a a3       	std	Y+34, r18	; 0x22
     604:	3b a3       	std	Y+35, r19	; 0x23
     606:	4c a3       	std	Y+36, r20	; 0x24
     608:	5d a3       	std	Y+37, r21	; 0x25
     60a:	e5 eb       	ldi	r30, 0xB5	; 181
     60c:	f1 e0       	ldi	r31, 0x01	; 1
     60e:	a3 01       	movw	r20, r6
     610:	92 01       	movw	r18, r4
     612:	6a a1       	ldd	r22, Y+34	; 0x22
     614:	7b a1       	ldd	r23, Y+35	; 0x23
     616:	8c a1       	ldd	r24, Y+36	; 0x24
     618:	9d a1       	ldd	r25, Y+37	; 0x25
     61a:	0e 94 48 0b 	call	0x1690	; 0x1690 <__mulsi3>
     61e:	62 83       	std	Z+2, r22	; 0x02
     620:	73 83       	std	Z+3, r23	; 0x03
     622:	84 83       	std	Z+4, r24	; 0x04
     624:	95 83       	std	Z+5, r25	; 0x05
     626:	2a 8d       	ldd	r18, Y+26	; 0x1a
     628:	3b 8d       	ldd	r19, Y+27	; 0x1b
     62a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     62c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     62e:	6a a1       	ldd	r22, Y+34	; 0x22
     630:	7b a1       	ldd	r23, Y+35	; 0x23
     632:	8c a1       	ldd	r24, Y+36	; 0x24
     634:	9d a1       	ldd	r25, Y+37	; 0x25
     636:	0e 94 48 0b 	call	0x1690	; 0x1690 <__mulsi3>
     63a:	86 0e       	add	r8, r22
     63c:	97 1e       	adc	r9, r23
     63e:	a8 1e       	adc	r10, r24
     640:	b9 1e       	adc	r11, r25
     642:	86 82       	std	Z+6, r8	; 0x06
     644:	97 82       	std	Z+7, r9	; 0x07
     646:	a0 86       	std	Z+8, r10	; 0x08
     648:	b1 86       	std	Z+9, r11	; 0x09
     64a:	a7 01       	movw	r20, r14
     64c:	96 01       	movw	r18, r12
     64e:	2e 5f       	subi	r18, 0xFE	; 254
     650:	3f 4f       	sbci	r19, 0xFF	; 255
     652:	4f 4f       	sbci	r20, 0xFF	; 255
     654:	5f 4f       	sbci	r21, 0xFF	; 255
     656:	d8 01       	movw	r26, r16
     658:	18 96       	adiw	r26, 0x08	; 8
     65a:	8c 91       	ld	r24, X
     65c:	86 30       	cpi	r24, 0x06	; 6
     65e:	29 f0       	breq	.+10     	; 0x66a <fat_open+0x210>
     660:	64 e0       	ldi	r22, 0x04	; 4
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	04 c0       	rjmp	.+8      	; 0x672 <fat_open+0x218>
     66a:	62 e0       	ldi	r22, 0x02	; 2
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	e5 eb       	ldi	r30, 0xB5	; 181
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	0e 94 48 0b 	call	0x1690	; 0x1690 <__mulsi3>
     67a:	62 87       	std	Z+10, r22	; 0x0a
     67c:	73 87       	std	Z+11, r23	; 0x0b
     67e:	84 87       	std	Z+12, r24	; 0x0c
     680:	95 87       	std	Z+13, r25	; 0x0d
     682:	37 86       	std	Z+15, r3	; 0x0f
     684:	26 86       	std	Z+14, r2	; 0x0e
     686:	be a1       	ldd	r27, Y+38	; 0x26
     688:	b2 9d       	mul	r27, r2
     68a:	c0 01       	movw	r24, r0
     68c:	b3 9d       	mul	r27, r3
     68e:	90 0d       	add	r25, r0
     690:	11 24       	eor	r1, r1
     692:	91 8b       	std	Z+17, r25	; 0x11
     694:	80 8b       	std	Z+16, r24	; 0x10
     696:	2e 8d       	ldd	r18, Y+30	; 0x1e
     698:	3f 8d       	ldd	r19, Y+31	; 0x1f
     69a:	48 a1       	ldd	r20, Y+32	; 0x20
     69c:	59 a1       	ldd	r21, Y+33	; 0x21
     69e:	6a a1       	ldd	r22, Y+34	; 0x22
     6a0:	7b a1       	ldd	r23, Y+35	; 0x23
     6a2:	8c a1       	ldd	r24, Y+36	; 0x24
     6a4:	9d a1       	ldd	r25, Y+37	; 0x25
     6a6:	0e 94 48 0b 	call	0x1690	; 0x1690 <__mulsi3>
     6aa:	86 0e       	add	r8, r22
     6ac:	97 1e       	adc	r9, r23
     6ae:	a8 1e       	adc	r10, r24
     6b0:	b9 1e       	adc	r11, r25
     6b2:	86 8a       	std	Z+22, r8	; 0x16
     6b4:	97 8a       	std	Z+23, r9	; 0x17
     6b6:	a0 8e       	std	Z+24, r10	; 0x18
     6b8:	b1 8e       	std	Z+25, r11	; 0x19
     6ba:	2f a1       	ldd	r18, Y+39	; 0x27
     6bc:	38 a5       	ldd	r19, Y+40	; 0x28
     6be:	c9 01       	movw	r24, r18
     6c0:	a0 e0       	ldi	r26, 0x00	; 0
     6c2:	b0 e0       	ldi	r27, 0x00	; 0
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	aa 1f       	adc	r26, r26
     6ca:	bb 1f       	adc	r27, r27
     6cc:	88 0f       	add	r24, r24
     6ce:	99 1f       	adc	r25, r25
     6d0:	aa 1f       	adc	r26, r26
     6d2:	bb 1f       	adc	r27, r27
     6d4:	88 0f       	add	r24, r24
     6d6:	99 1f       	adc	r25, r25
     6d8:	aa 1f       	adc	r26, r26
     6da:	bb 1f       	adc	r27, r27
     6dc:	88 0f       	add	r24, r24
     6de:	99 1f       	adc	r25, r25
     6e0:	aa 1f       	adc	r26, r26
     6e2:	bb 1f       	adc	r27, r27
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	aa 1f       	adc	r26, r26
     6ea:	bb 1f       	adc	r27, r27
     6ec:	88 0e       	add	r8, r24
     6ee:	99 1e       	adc	r9, r25
     6f0:	aa 1e       	adc	r10, r26
     6f2:	bb 1e       	adc	r11, r27
     6f4:	82 8a       	std	Z+18, r8	; 0x12
     6f6:	93 8a       	std	Z+19, r9	; 0x13
     6f8:	a4 8a       	std	Z+20, r10	; 0x14
     6fa:	b5 8a       	std	Z+21, r11	; 0x15
     6fc:	cf 01       	movw	r24, r30
     6fe:	38 c0       	rjmp	.+112    	; 0x770 <fat_open+0x316>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	35 c0       	rjmp	.+106    	; 0x770 <fat_open+0x316>
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	32 c0       	rjmp	.+100    	; 0x770 <fat_open+0x316>
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	2f c0       	rjmp	.+94     	; 0x770 <fat_open+0x316>
     712:	8c 01       	movw	r16, r24
     714:	e5 eb       	ldi	r30, 0xB5	; 181
     716:	f1 e0       	ldi	r31, 0x01	; 1
     718:	8c e1       	ldi	r24, 0x1C	; 28
     71a:	df 01       	movw	r26, r30
     71c:	1d 92       	st	X+, r1
     71e:	8a 95       	dec	r24
     720:	e9 f7       	brne	.-6      	; 0x71c <fat_open+0x2c2>
     722:	11 83       	std	Z+1, r17	; 0x01
     724:	00 83       	st	Z, r16
     726:	f8 01       	movw	r30, r16
     728:	81 84       	ldd	r8, Z+9	; 0x09
     72a:	92 84       	ldd	r9, Z+10	; 0x0a
     72c:	a3 84       	ldd	r10, Z+11	; 0x0b
     72e:	b4 84       	ldd	r11, Z+12	; 0x0c
     730:	07 2e       	mov	r0, r23
     732:	79 e0       	ldi	r23, 0x09	; 9
     734:	88 0c       	add	r8, r8
     736:	99 1c       	adc	r9, r9
     738:	aa 1c       	adc	r10, r10
     73a:	bb 1c       	adc	r11, r11
     73c:	7a 95       	dec	r23
     73e:	d1 f7       	brne	.-12     	; 0x734 <fat_open+0x2da>
     740:	70 2d       	mov	r23, r0
     742:	c5 01       	movw	r24, r10
     744:	b4 01       	movw	r22, r8
     746:	65 5f       	subi	r22, 0xF5	; 245
     748:	7f 4f       	sbci	r23, 0xFF	; 255
     74a:	8f 4f       	sbci	r24, 0xFF	; 255
     74c:	9f 4f       	sbci	r25, 0xFF	; 255
     74e:	01 90       	ld	r0, Z+
     750:	f0 81       	ld	r31, Z
     752:	e0 2d       	mov	r30, r0
     754:	29 e1       	ldi	r18, 0x19	; 25
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	ae 01       	movw	r20, r28
     75a:	4f 5f       	subi	r20, 0xFF	; 255
     75c:	5f 4f       	sbci	r21, 0xFF	; 255
     75e:	09 95       	icall
     760:	81 11       	cpse	r24, r1
     762:	b1 ce       	rjmp	.-670    	; 0x4c6 <fat_open+0x6c>
     764:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <fat_fs_handles+0x1>
     768:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <fat_fs_handles>
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	a8 96       	adiw	r28, 0x28	; 40
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	af 90       	pop	r10
     790:	9f 90       	pop	r9
     792:	8f 90       	pop	r8
     794:	7f 90       	pop	r7
     796:	6f 90       	pop	r6
     798:	5f 90       	pop	r5
     79a:	4f 90       	pop	r4
     79c:	3f 90       	pop	r3
     79e:	2f 90       	pop	r2
     7a0:	08 95       	ret

000007a2 <fat_close>:
     7a2:	00 97       	sbiw	r24, 0x00	; 0
     7a4:	19 f0       	breq	.+6      	; 0x7ac <fat_close+0xa>
     7a6:	fc 01       	movw	r30, r24
     7a8:	11 82       	std	Z+1, r1	; 0x01
     7aa:	10 82       	st	Z, r1
     7ac:	08 95       	ret

000007ae <fat_open_file>:
     7ae:	00 97       	sbiw	r24, 0x00	; 0
     7b0:	89 f0       	breq	.+34     	; 0x7d4 <fat_open_file+0x26>
     7b2:	61 15       	cp	r22, r1
     7b4:	71 05       	cpc	r23, r1
     7b6:	89 f0       	breq	.+34     	; 0x7da <fat_open_file+0x2c>
     7b8:	db 01       	movw	r26, r22
     7ba:	90 96       	adiw	r26, 0x20	; 32
     7bc:	2c 91       	ld	r18, X
     7be:	24 fd       	sbrc	r18, 4
     7c0:	0f c0       	rjmp	.+30     	; 0x7e0 <fat_open_file+0x32>
     7c2:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <fat_file_handles>
     7c6:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <fat_file_handles+0x1>
     7ca:	23 2b       	or	r18, r19
     7cc:	61 f0       	breq	.+24     	; 0x7e6 <fat_open_file+0x38>
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	08 95       	ret
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	08 95       	ret
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	08 95       	ret
     7e0:	80 e0       	ldi	r24, 0x00	; 0
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	08 95       	ret
     7e6:	2b e2       	ldi	r18, 0x2B	; 43
     7e8:	fb 01       	movw	r30, r22
     7ea:	a4 e8       	ldi	r26, 0x84	; 132
     7ec:	b1 e0       	ldi	r27, 0x01	; 1
     7ee:	01 90       	ld	r0, Z+
     7f0:	0d 92       	st	X+, r0
     7f2:	2a 95       	dec	r18
     7f4:	e1 f7       	brne	.-8      	; 0x7ee <fat_open_file+0x40>
     7f6:	e2 e8       	ldi	r30, 0x82	; 130
     7f8:	f1 e0       	ldi	r31, 0x01	; 1
     7fa:	91 83       	std	Z+1, r25	; 0x01
     7fc:	80 83       	st	Z, r24
     7fe:	15 a6       	std	Z+45, r1	; 0x2d
     800:	16 a6       	std	Z+46, r1	; 0x2e
     802:	17 a6       	std	Z+47, r1	; 0x2f
     804:	10 aa       	std	Z+48, r1	; 0x30
     806:	db 01       	movw	r26, r22
     808:	91 96       	adiw	r26, 0x21	; 33
     80a:	8d 91       	ld	r24, X+
     80c:	9c 91       	ld	r25, X
     80e:	92 97       	sbiw	r26, 0x22	; 34
     810:	92 ab       	std	Z+50, r25	; 0x32
     812:	81 ab       	std	Z+49, r24	; 0x31
     814:	cf 01       	movw	r24, r30
     816:	08 95       	ret

00000818 <fat_close_file>:
     818:	00 97       	sbiw	r24, 0x00	; 0
     81a:	19 f0       	breq	.+6      	; 0x822 <fat_close_file+0xa>
     81c:	fc 01       	movw	r30, r24
     81e:	11 82       	std	Z+1, r1	; 0x01
     820:	10 82       	st	Z, r1
     822:	08 95       	ret

00000824 <fat_read_file>:
     824:	2f 92       	push	r2
     826:	3f 92       	push	r3
     828:	4f 92       	push	r4
     82a:	5f 92       	push	r5
     82c:	6f 92       	push	r6
     82e:	7f 92       	push	r7
     830:	8f 92       	push	r8
     832:	9f 92       	push	r9
     834:	af 92       	push	r10
     836:	bf 92       	push	r11
     838:	cf 92       	push	r12
     83a:	df 92       	push	r13
     83c:	ef 92       	push	r14
     83e:	ff 92       	push	r15
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	cd b7       	in	r28, 0x3d	; 61
     84a:	de b7       	in	r29, 0x3e	; 62
     84c:	28 97       	sbiw	r28, 0x08	; 8
     84e:	0f b6       	in	r0, 0x3f	; 63
     850:	f8 94       	cli
     852:	de bf       	out	0x3e, r29	; 62
     854:	0f be       	out	0x3f, r0	; 63
     856:	cd bf       	out	0x3d, r28	; 61
     858:	8c 01       	movw	r16, r24
     85a:	4b 01       	movw	r8, r22
     85c:	1a 01       	movw	r2, r20
     85e:	00 97       	sbiw	r24, 0x00	; 0
     860:	09 f4       	brne	.+2      	; 0x864 <fat_read_file+0x40>
     862:	dc c0       	rjmp	.+440    	; 0xa1c <fat_read_file+0x1f8>
     864:	67 2b       	or	r22, r23
     866:	09 f4       	brne	.+2      	; 0x86a <fat_read_file+0x46>
     868:	dc c0       	rjmp	.+440    	; 0xa22 <fat_read_file+0x1fe>
     86a:	45 2b       	or	r20, r21
     86c:	09 f4       	brne	.+2      	; 0x870 <fat_read_file+0x4c>
     86e:	dc c0       	rjmp	.+440    	; 0xa28 <fat_read_file+0x204>
     870:	dc 01       	movw	r26, r24
     872:	9d 96       	adiw	r26, 0x2d	; 45
     874:	cd 90       	ld	r12, X+
     876:	dd 90       	ld	r13, X+
     878:	ed 90       	ld	r14, X+
     87a:	fc 90       	ld	r15, X
     87c:	d0 97       	sbiw	r26, 0x30	; 48
     87e:	95 96       	adiw	r26, 0x25	; 37
     880:	8d 91       	ld	r24, X+
     882:	9d 91       	ld	r25, X+
     884:	0d 90       	ld	r0, X+
     886:	bc 91       	ld	r27, X
     888:	a0 2d       	mov	r26, r0
     88a:	b7 01       	movw	r22, r14
     88c:	a6 01       	movw	r20, r12
     88e:	42 0d       	add	r20, r2
     890:	53 1d       	adc	r21, r3
     892:	61 1d       	adc	r22, r1
     894:	71 1d       	adc	r23, r1
     896:	84 17       	cp	r24, r20
     898:	95 07       	cpc	r25, r21
     89a:	a6 07       	cpc	r26, r22
     89c:	b7 07       	cpc	r27, r23
     89e:	28 f4       	brcc	.+10     	; 0x8aa <fat_read_file+0x86>
     8a0:	1c 01       	movw	r2, r24
     8a2:	2c 18       	sub	r2, r12
     8a4:	3d 08       	sbc	r3, r13
     8a6:	09 f4       	brne	.+2      	; 0x8aa <fat_read_file+0x86>
     8a8:	c2 c0       	rjmp	.+388    	; 0xa2e <fat_read_file+0x20a>
     8aa:	d8 01       	movw	r26, r16
     8ac:	ed 91       	ld	r30, X+
     8ae:	fc 91       	ld	r31, X
     8b0:	11 97       	sbiw	r26, 0x01	; 1
     8b2:	40 88       	ldd	r4, Z+16	; 0x10
     8b4:	51 88       	ldd	r5, Z+17	; 0x11
     8b6:	d1 96       	adiw	r26, 0x31	; 49
     8b8:	ad 90       	ld	r10, X+
     8ba:	bc 90       	ld	r11, X
     8bc:	d2 97       	sbiw	r26, 0x32	; 50
     8be:	a1 14       	cp	r10, r1
     8c0:	b1 04       	cpc	r11, r1
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <fat_read_file+0xa2>
     8c4:	4b c0       	rjmp	.+150    	; 0x95c <fat_read_file+0x138>
     8c6:	93 96       	adiw	r26, 0x23	; 35
     8c8:	ad 90       	ld	r10, X+
     8ca:	bc 90       	ld	r11, X
     8cc:	94 97       	sbiw	r26, 0x24	; 36
     8ce:	a1 14       	cp	r10, r1
     8d0:	b1 04       	cpc	r11, r1
     8d2:	61 f4       	brne	.+24     	; 0x8ec <fat_read_file+0xc8>
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	90 e0       	ldi	r25, 0x00	; 0
     8d8:	cd 28       	or	r12, r13
     8da:	ce 28       	or	r12, r14
     8dc:	cf 28       	or	r12, r15
     8de:	11 f4       	brne	.+4      	; 0x8e4 <fat_read_file+0xc0>
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	91 95       	neg	r25
     8e6:	81 95       	neg	r24
     8e8:	91 09       	sbc	r25, r1
     8ea:	a6 c0       	rjmp	.+332    	; 0xa38 <fat_read_file+0x214>
     8ec:	c1 14       	cp	r12, r1
     8ee:	d1 04       	cpc	r13, r1
     8f0:	e1 04       	cpc	r14, r1
     8f2:	f1 04       	cpc	r15, r1
     8f4:	d9 f4       	brne	.+54     	; 0x92c <fat_read_file+0x108>
     8f6:	32 c0       	rjmp	.+100    	; 0x95c <fat_read_file+0x138>
     8f8:	29 81       	ldd	r18, Y+1	; 0x01
     8fa:	3a 81       	ldd	r19, Y+2	; 0x02
     8fc:	4b 81       	ldd	r20, Y+3	; 0x03
     8fe:	5c 81       	ldd	r21, Y+4	; 0x04
     900:	8d 81       	ldd	r24, Y+5	; 0x05
     902:	9e 81       	ldd	r25, Y+6	; 0x06
     904:	af 81       	ldd	r26, Y+7	; 0x07
     906:	b8 85       	ldd	r27, Y+8	; 0x08
     908:	28 1b       	sub	r18, r24
     90a:	39 0b       	sbc	r19, r25
     90c:	4a 0b       	sbc	r20, r26
     90e:	5b 0b       	sbc	r21, r27
     910:	29 83       	std	Y+1, r18	; 0x01
     912:	3a 83       	std	Y+2, r19	; 0x02
     914:	4b 83       	std	Y+3, r20	; 0x03
     916:	5c 83       	std	Y+4, r21	; 0x04
     918:	b5 01       	movw	r22, r10
     91a:	d8 01       	movw	r26, r16
     91c:	8d 91       	ld	r24, X+
     91e:	9c 91       	ld	r25, X
     920:	0e 94 81 00 	call	0x102	; 0x102 <fat_get_next_cluster>
     924:	5c 01       	movw	r10, r24
     926:	89 2b       	or	r24, r25
     928:	61 f4       	brne	.+24     	; 0x942 <fat_read_file+0x11e>
     92a:	84 c0       	rjmp	.+264    	; 0xa34 <fat_read_file+0x210>
     92c:	c9 82       	std	Y+1, r12	; 0x01
     92e:	da 82       	std	Y+2, r13	; 0x02
     930:	eb 82       	std	Y+3, r14	; 0x03
     932:	fc 82       	std	Y+4, r15	; 0x04
     934:	92 01       	movw	r18, r4
     936:	40 e0       	ldi	r20, 0x00	; 0
     938:	50 e0       	ldi	r21, 0x00	; 0
     93a:	2d 83       	std	Y+5, r18	; 0x05
     93c:	3e 83       	std	Y+6, r19	; 0x06
     93e:	4f 83       	std	Y+7, r20	; 0x07
     940:	58 87       	std	Y+8, r21	; 0x08
     942:	89 81       	ldd	r24, Y+1	; 0x01
     944:	9a 81       	ldd	r25, Y+2	; 0x02
     946:	ab 81       	ldd	r26, Y+3	; 0x03
     948:	bc 81       	ldd	r27, Y+4	; 0x04
     94a:	2d 81       	ldd	r18, Y+5	; 0x05
     94c:	3e 81       	ldd	r19, Y+6	; 0x06
     94e:	4f 81       	ldd	r20, Y+7	; 0x07
     950:	58 85       	ldd	r21, Y+8	; 0x08
     952:	82 17       	cp	r24, r18
     954:	93 07       	cpc	r25, r19
     956:	a4 07       	cpc	r26, r20
     958:	b5 07       	cpc	r27, r21
     95a:	70 f6       	brcc	.-100    	; 0x8f8 <fat_read_file+0xd4>
     95c:	c2 01       	movw	r24, r4
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	c8 22       	and	r12, r24
     962:	d9 22       	and	r13, r25
     964:	71 01       	movw	r14, r2
     966:	d8 01       	movw	r26, r16
     968:	6d 90       	ld	r6, X+
     96a:	7c 90       	ld	r7, X
     96c:	b5 01       	movw	r22, r10
     96e:	c3 01       	movw	r24, r6
     970:	0e 94 c6 00 	call	0x18c	; 0x18c <fat_cluster_offset>
     974:	92 01       	movw	r18, r4
     976:	2c 19       	sub	r18, r12
     978:	3d 09       	sbc	r19, r13
     97a:	fa 82       	std	Y+2, r15	; 0x02
     97c:	e9 82       	std	Y+1, r14	; 0x01
     97e:	2e 15       	cp	r18, r14
     980:	3f 05       	cpc	r19, r15
     982:	10 f4       	brcc	.+4      	; 0x988 <fat_read_file+0x164>
     984:	3a 83       	std	Y+2, r19	; 0x02
     986:	29 83       	std	Y+1, r18	; 0x01
     988:	6c 0d       	add	r22, r12
     98a:	7d 1d       	adc	r23, r13
     98c:	81 1d       	adc	r24, r1
     98e:	91 1d       	adc	r25, r1
     990:	d3 01       	movw	r26, r6
     992:	ed 91       	ld	r30, X+
     994:	fc 91       	ld	r31, X
     996:	01 90       	ld	r0, Z+
     998:	f0 81       	ld	r31, Z
     99a:	e0 2d       	mov	r30, r0
     99c:	29 81       	ldd	r18, Y+1	; 0x01
     99e:	3a 81       	ldd	r19, Y+2	; 0x02
     9a0:	a4 01       	movw	r20, r8
     9a2:	09 95       	icall
     9a4:	81 11       	cpse	r24, r1
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <fat_read_file+0x18c>
     9a8:	c1 01       	movw	r24, r2
     9aa:	8e 19       	sub	r24, r14
     9ac:	9f 09       	sbc	r25, r15
     9ae:	44 c0       	rjmp	.+136    	; 0xa38 <fat_read_file+0x214>
     9b0:	e9 81       	ldd	r30, Y+1	; 0x01
     9b2:	fa 81       	ldd	r31, Y+2	; 0x02
     9b4:	8e 0e       	add	r8, r30
     9b6:	9f 1e       	adc	r9, r31
     9b8:	ee 1a       	sub	r14, r30
     9ba:	ff 0a       	sbc	r15, r31
     9bc:	f8 01       	movw	r30, r16
     9be:	85 a5       	ldd	r24, Z+45	; 0x2d
     9c0:	96 a5       	ldd	r25, Z+46	; 0x2e
     9c2:	a7 a5       	ldd	r26, Z+47	; 0x2f
     9c4:	b0 a9       	ldd	r27, Z+48	; 0x30
     9c6:	29 81       	ldd	r18, Y+1	; 0x01
     9c8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ca:	82 0f       	add	r24, r18
     9cc:	93 1f       	adc	r25, r19
     9ce:	a1 1d       	adc	r26, r1
     9d0:	b1 1d       	adc	r27, r1
     9d2:	85 a7       	std	Z+45, r24	; 0x2d
     9d4:	96 a7       	std	Z+46, r25	; 0x2e
     9d6:	a7 a7       	std	Z+47, r26	; 0x2f
     9d8:	b0 ab       	std	Z+48, r27	; 0x30
     9da:	2c 0d       	add	r18, r12
     9dc:	3d 1d       	adc	r19, r13
     9de:	24 15       	cp	r18, r4
     9e0:	35 05       	cpc	r19, r5
     9e2:	98 f0       	brcs	.+38     	; 0xa0a <fat_read_file+0x1e6>
     9e4:	b5 01       	movw	r22, r10
     9e6:	80 81       	ld	r24, Z
     9e8:	91 81       	ldd	r25, Z+1	; 0x01
     9ea:	0e 94 81 00 	call	0x102	; 0x102 <fat_get_next_cluster>
     9ee:	5c 01       	movw	r10, r24
     9f0:	89 2b       	or	r24, r25
     9f2:	49 f4       	brne	.+18     	; 0xa06 <fat_read_file+0x1e2>
     9f4:	d8 01       	movw	r26, r16
     9f6:	d2 96       	adiw	r26, 0x32	; 50
     9f8:	1c 92       	st	X, r1
     9fa:	1e 92       	st	-X, r1
     9fc:	d1 97       	sbiw	r26, 0x31	; 49
     9fe:	c1 01       	movw	r24, r2
     a00:	8e 19       	sub	r24, r14
     a02:	9f 09       	sbc	r25, r15
     a04:	19 c0       	rjmp	.+50     	; 0xa38 <fat_read_file+0x214>
     a06:	c1 2c       	mov	r12, r1
     a08:	d1 2c       	mov	r13, r1
     a0a:	f8 01       	movw	r30, r16
     a0c:	b2 aa       	std	Z+50, r11	; 0x32
     a0e:	a1 aa       	std	Z+49, r10	; 0x31
     a10:	e1 14       	cp	r14, r1
     a12:	f1 04       	cpc	r15, r1
     a14:	09 f0       	breq	.+2      	; 0xa18 <fat_read_file+0x1f4>
     a16:	a7 cf       	rjmp	.-178    	; 0x966 <fat_read_file+0x142>
     a18:	c1 01       	movw	r24, r2
     a1a:	0e c0       	rjmp	.+28     	; 0xa38 <fat_read_file+0x214>
     a1c:	8f ef       	ldi	r24, 0xFF	; 255
     a1e:	9f ef       	ldi	r25, 0xFF	; 255
     a20:	0b c0       	rjmp	.+22     	; 0xa38 <fat_read_file+0x214>
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	9f ef       	ldi	r25, 0xFF	; 255
     a26:	08 c0       	rjmp	.+16     	; 0xa38 <fat_read_file+0x214>
     a28:	8f ef       	ldi	r24, 0xFF	; 255
     a2a:	9f ef       	ldi	r25, 0xFF	; 255
     a2c:	05 c0       	rjmp	.+10     	; 0xa38 <fat_read_file+0x214>
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	02 c0       	rjmp	.+4      	; 0xa38 <fat_read_file+0x214>
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	28 96       	adiw	r28, 0x08	; 8
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	f8 94       	cli
     a3e:	de bf       	out	0x3e, r29	; 62
     a40:	0f be       	out	0x3f, r0	; 63
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	df 91       	pop	r29
     a46:	cf 91       	pop	r28
     a48:	1f 91       	pop	r17
     a4a:	0f 91       	pop	r16
     a4c:	ff 90       	pop	r15
     a4e:	ef 90       	pop	r14
     a50:	df 90       	pop	r13
     a52:	cf 90       	pop	r12
     a54:	bf 90       	pop	r11
     a56:	af 90       	pop	r10
     a58:	9f 90       	pop	r9
     a5a:	8f 90       	pop	r8
     a5c:	7f 90       	pop	r7
     a5e:	6f 90       	pop	r6
     a60:	5f 90       	pop	r5
     a62:	4f 90       	pop	r4
     a64:	3f 90       	pop	r3
     a66:	2f 90       	pop	r2
     a68:	08 95       	ret

00000a6a <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	b1 f0       	breq	.+44     	; 0xa9e <fat_open_dir+0x34>
     a72:	61 15       	cp	r22, r1
     a74:	71 05       	cpc	r23, r1
     a76:	b1 f0       	breq	.+44     	; 0xaa4 <fat_open_dir+0x3a>
     a78:	fb 01       	movw	r30, r22
     a7a:	20 a1       	ldd	r18, Z+32	; 0x20
     a7c:	24 ff       	sbrs	r18, 4
     a7e:	15 c0       	rjmp	.+42     	; 0xaaa <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
     a80:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__data_end>
     a84:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__data_end+0x1>
     a88:	23 2b       	or	r18, r19
     a8a:	91 f0       	breq	.+36     	; 0xab0 <fat_open_dir+0x46>
     a8c:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__data_end+0x31>
     a90:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__data_end+0x32>
     a94:	23 2b       	or	r18, r19
     a96:	79 f0       	breq	.+30     	; 0xab6 <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	21 c0       	rjmp	.+66     	; 0xae0 <fat_open_dir+0x76>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	1e c0       	rjmp	.+60     	; 0xae0 <fat_open_dir+0x76>
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	1b c0       	rjmp	.+54     	; 0xae0 <fat_open_dir+0x76>
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	18 c0       	rjmp	.+48     	; 0xae0 <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
     ab0:	c0 e2       	ldi	r28, 0x20	; 32
     ab2:	d1 e0       	ldi	r29, 0x01	; 1
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <fat_open_dir+0x50>
     ab6:	c1 e5       	ldi	r28, 0x51	; 81
     ab8:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
     aba:	de 01       	movw	r26, r28
     abc:	12 96       	adiw	r26, 0x02	; 2
     abe:	2b e2       	ldi	r18, 0x2B	; 43
     ac0:	fb 01       	movw	r30, r22
     ac2:	01 90       	ld	r0, Z+
     ac4:	0d 92       	st	X+, r0
     ac6:	2a 95       	dec	r18
     ac8:	e1 f7       	brne	.-8      	; 0xac2 <fat_open_dir+0x58>
    dd->fs = fs;
     aca:	99 83       	std	Y+1, r25	; 0x01
     acc:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
     ace:	fb 01       	movw	r30, r22
     ad0:	81 a1       	ldd	r24, Z+33	; 0x21
     ad2:	92 a1       	ldd	r25, Z+34	; 0x22
     ad4:	9e a7       	std	Y+46, r25	; 0x2e
     ad6:	8d a7       	std	Y+45, r24	; 0x2d
    dd->entry_offset = 0;
     ad8:	18 aa       	std	Y+48, r1	; 0x30
     ada:	1f a6       	std	Y+47, r1	; 0x2f

    return dd;
     adc:	8c 2f       	mov	r24, r28
     ade:	9d 2f       	mov	r25, r29
}
     ae0:	df 91       	pop	r29
     ae2:	cf 91       	pop	r28
     ae4:	08 95       	ret

00000ae6 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
     ae6:	00 97       	sbiw	r24, 0x00	; 0
     ae8:	19 f0       	breq	.+6      	; 0xaf0 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
     aea:	fc 01       	movw	r30, r24
     aec:	11 82       	std	Z+1, r1	; 0x01
     aee:	10 82       	st	Z, r1
     af0:	08 95       	ret

00000af2 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
     af2:	fc 01       	movw	r30, r24
    if(!dd)
     af4:	89 2b       	or	r24, r25
     af6:	41 f0       	breq	.+16     	; 0xb08 <fat_reset_dir+0x16>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
     af8:	83 a1       	ldd	r24, Z+35	; 0x23
     afa:	94 a1       	ldd	r25, Z+36	; 0x24
     afc:	96 a7       	std	Z+46, r25	; 0x2e
     afe:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
     b00:	10 aa       	std	Z+48, r1	; 0x30
     b02:	17 a6       	std	Z+47, r1	; 0x2f
    return 1;
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
     b08:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
     b0a:	08 95       	ret

00000b0c <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
     b0c:	2f 92       	push	r2
     b0e:	3f 92       	push	r3
     b10:	4f 92       	push	r4
     b12:	5f 92       	push	r5
     b14:	6f 92       	push	r6
     b16:	7f 92       	push	r7
     b18:	8f 92       	push	r8
     b1a:	9f 92       	push	r9
     b1c:	af 92       	push	r10
     b1e:	bf 92       	push	r11
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	cd b7       	in	r28, 0x3d	; 61
     b32:	de b7       	in	r29, 0x3e	; 62
     b34:	a6 97       	sbiw	r28, 0x26	; 38
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
     b40:	00 97       	sbiw	r24, 0x00	; 0
     b42:	09 f4       	brne	.+2      	; 0xb46 <fat_read_dir+0x3a>
     b44:	95 c0       	rjmp	.+298    	; 0xc70 <fat_read_dir+0x164>
     b46:	61 15       	cp	r22, r1
     b48:	71 05       	cpc	r23, r1
     b4a:	09 f4       	brne	.+2      	; 0xb4e <fat_read_dir+0x42>
     b4c:	93 c0       	rjmp	.+294    	; 0xc74 <fat_read_dir+0x168>
     b4e:	1c 01       	movw	r2, r24
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
     b50:	fc 01       	movw	r30, r24
     b52:	40 80       	ld	r4, Z
     b54:	51 80       	ldd	r5, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
     b56:	f2 01       	movw	r30, r4
     b58:	80 88       	ldd	r8, Z+16	; 0x10
     b5a:	91 88       	ldd	r9, Z+17	; 0x11
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
     b5c:	fc 01       	movw	r30, r24
     b5e:	a7 a4       	ldd	r10, Z+47	; 0x2f
     b60:	b0 a8       	ldd	r11, Z+48	; 0x30
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
     b62:	a8 14       	cp	r10, r8
     b64:	b9 04       	cpc	r11, r9
     b66:	20 f0       	brcs	.+8      	; 0xb70 <fat_read_dir+0x64>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
     b68:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fat_reset_dir>
        return 0;
     b6c:	10 e0       	ldi	r17, 0x00	; 0
     b6e:	83 c0       	rjmp	.+262    	; 0xc76 <fat_read_dir+0x16a>

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
     b70:	fc 01       	movw	r30, r24
     b72:	65 a4       	ldd	r6, Z+45	; 0x2d
     b74:	76 a4       	ldd	r7, Z+46	; 0x2e
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
     b76:	9e 01       	movw	r18, r28
     b78:	2f 5f       	subi	r18, 0xFF	; 255
     b7a:	3f 4f       	sbci	r19, 0xFF	; 255
     b7c:	86 e0       	ldi	r24, 0x06	; 6
     b7e:	f9 01       	movw	r30, r18
     b80:	11 92       	st	Z+, r1
     b82:	8a 95       	dec	r24
     b84:	e9 f7       	brne	.-6      	; 0xb80 <fat_read_dir+0x74>
    memset(dir_entry, 0, sizeof(*dir_entry));
     b86:	8b e2       	ldi	r24, 0x2B	; 43
     b88:	fb 01       	movw	r30, r22
     b8a:	11 92       	st	Z+, r1
     b8c:	8a 95       	dec	r24
     b8e:	e9 f7       	brne	.-6      	; 0xb8a <fat_read_dir+0x7e>
    arg.dir_entry = dir_entry;
     b90:	7a 83       	std	Y+2, r23	; 0x02
     b92:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
     b94:	61 14       	cp	r6, r1
     b96:	71 04       	cpc	r7, r1
     b98:	09 f0       	breq	.+2      	; 0xb9c <fat_read_dir+0x90>
     b9a:	5b c0       	rjmp	.+182    	; 0xc52 <fat_read_dir+0x146>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
     b9c:	d2 01       	movw	r26, r4
     b9e:	52 96       	adiw	r26, 0x12	; 18
     ba0:	8d 90       	ld	r8, X+
     ba2:	9c 90       	ld	r9, X
     ba4:	53 97       	sbiw	r26, 0x13	; 19
     ba6:	56 96       	adiw	r26, 0x16	; 22
     ba8:	8d 91       	ld	r24, X+
     baa:	9c 91       	ld	r25, X
     bac:	57 97       	sbiw	r26, 0x17	; 23
     bae:	88 1a       	sub	r8, r24
     bb0:	99 0a       	sbc	r9, r25
     bb2:	4f c0       	rjmp	.+158    	; 0xc52 <fat_read_dir+0x146>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
     bb4:	84 01       	movw	r16, r8
     bb6:	0a 19       	sub	r16, r10
     bb8:	1b 09       	sbc	r17, r11
        offset_t pos = cluster_offset;
     bba:	65 01       	movw	r12, r10
     bbc:	e1 2c       	mov	r14, r1
     bbe:	f1 2c       	mov	r15, r1
        if(cluster_num == 0)
     bc0:	61 14       	cp	r6, r1
     bc2:	71 04       	cpc	r7, r1
     bc4:	61 f4       	brne	.+24     	; 0xbde <fat_read_dir+0xd2>
            pos += header->root_dir_offset;
     bc6:	f2 01       	movw	r30, r4
     bc8:	86 89       	ldd	r24, Z+22	; 0x16
     bca:	97 89       	ldd	r25, Z+23	; 0x17
     bcc:	a0 8d       	ldd	r26, Z+24	; 0x18
     bce:	b1 8d       	ldd	r27, Z+25	; 0x19
     bd0:	bc 01       	movw	r22, r24
     bd2:	cd 01       	movw	r24, r26
     bd4:	6c 0d       	add	r22, r12
     bd6:	7d 1d       	adc	r23, r13
     bd8:	8e 1d       	adc	r24, r14
     bda:	9f 1d       	adc	r25, r15
     bdc:	08 c0       	rjmp	.+16     	; 0xbee <fat_read_dir+0xe2>
        else
            pos += fat_cluster_offset(fs, cluster_num);
     bde:	b3 01       	movw	r22, r6
     be0:	c2 01       	movw	r24, r4
     be2:	0e 94 c6 00 	call	0x18c	; 0x18c <fat_cluster_offset>
     be6:	6c 0d       	add	r22, r12
     be8:	7d 1d       	adc	r23, r13
     bea:	8e 1d       	adc	r24, r14
     bec:	9f 1d       	adc	r25, r15

        arg.bytes_read = 0;
     bee:	1c 82       	std	Y+4, r1	; 0x04
     bf0:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
     bf2:	d2 01       	movw	r26, r4
     bf4:	ed 91       	ld	r30, X+
     bf6:	fc 91       	ld	r31, X
     bf8:	02 80       	ldd	r0, Z+2	; 0x02
     bfa:	f3 81       	ldd	r31, Z+3	; 0x03
     bfc:	e0 2d       	mov	r30, r0
     bfe:	9e 01       	movw	r18, r28
     c00:	2f 5f       	subi	r18, 0xFF	; 255
     c02:	3f 4f       	sbci	r19, 0xFF	; 255
     c04:	69 01       	movw	r12, r18
     c06:	0f 2e       	mov	r0, r31
     c08:	f6 ef       	ldi	r31, 0xF6	; 246
     c0a:	ef 2e       	mov	r14, r31
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	ff 2e       	mov	r15, r31
     c10:	f0 2d       	mov	r31, r0
     c12:	20 e2       	ldi	r18, 0x20	; 32
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	ae 01       	movw	r20, r28
     c18:	49 5f       	subi	r20, 0xF9	; 249
     c1a:	5f 4f       	sbci	r21, 0xFF	; 255
     c1c:	09 95       	icall
     c1e:	18 2f       	mov	r17, r24
     c20:	88 23       	and	r24, r24
     c22:	49 f1       	breq	.+82     	; 0xc76 <fat_read_dir+0x16a>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	9c 81       	ldd	r25, Y+4	; 0x04
     c28:	a8 0e       	add	r10, r24
     c2a:	b9 1e       	adc	r11, r25

        if(cluster_offset >= cluster_size)
     c2c:	a8 14       	cp	r10, r8
     c2e:	b9 04       	cpc	r11, r9
     c30:	80 f0       	brcs	.+32     	; 0xc52 <fat_read_dir+0x146>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
     c32:	b3 01       	movw	r22, r6
     c34:	c2 01       	movw	r24, r4
     c36:	0e 94 81 00 	call	0x102	; 0x102 <fat_get_next_cluster>
     c3a:	3c 01       	movw	r6, r24
     c3c:	89 2b       	or	r24, r25
     c3e:	39 f4       	brne	.+14     	; 0xc4e <fat_read_dir+0x142>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
     c40:	1e 81       	ldd	r17, Y+6	; 0x06
     c42:	11 11       	cpse	r17, r1
     c44:	0a c0       	rjmp	.+20     	; 0xc5a <fat_read_dir+0x14e>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
     c46:	c1 01       	movw	r24, r2
     c48:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fat_reset_dir>
                return 0;
     c4c:	14 c0       	rjmp	.+40     	; 0xc76 <fat_read_dir+0x16a>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
     c4e:	a1 2c       	mov	r10, r1
     c50:	b1 2c       	mov	r11, r1
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
     c52:	8e 81       	ldd	r24, Y+6	; 0x06
     c54:	88 23       	and	r24, r24
     c56:	09 f4       	brne	.+2      	; 0xc5a <fat_read_dir+0x14e>
     c58:	ad cf       	rjmp	.-166    	; 0xbb4 <fat_read_dir+0xa8>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
     c5a:	d1 01       	movw	r26, r2
     c5c:	9e 96       	adiw	r26, 0x2e	; 46
     c5e:	7c 92       	st	X, r7
     c60:	6e 92       	st	-X, r6
     c62:	9d 97       	sbiw	r26, 0x2d	; 45
    dd->entry_offset = cluster_offset;
     c64:	d0 96       	adiw	r26, 0x30	; 48
     c66:	bc 92       	st	X, r11
     c68:	ae 92       	st	-X, r10
     c6a:	9f 97       	sbiw	r26, 0x2f	; 47

    return arg.finished;
     c6c:	1e 81       	ldd	r17, Y+6	; 0x06
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <fat_read_dir+0x16a>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
     c70:	10 e0       	ldi	r17, 0x00	; 0
     c72:	01 c0       	rjmp	.+2      	; 0xc76 <fat_read_dir+0x16a>
     c74:	10 e0       	ldi	r17, 0x00	; 0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
     c76:	81 2f       	mov	r24, r17
     c78:	a6 96       	adiw	r28, 0x26	; 38
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	8f 90       	pop	r8
     c9c:	7f 90       	pop	r7
     c9e:	6f 90       	pop	r6
     ca0:	5f 90       	pop	r5
     ca2:	4f 90       	pop	r4
     ca4:	3f 90       	pop	r3
     ca6:	2f 90       	pop	r2
     ca8:	08 95       	ret

00000caa <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
     caa:	4f 92       	push	r4
     cac:	5f 92       	push	r5
     cae:	6f 92       	push	r6
     cb0:	7f 92       	push	r7
     cb2:	8f 92       	push	r8
     cb4:	9f 92       	push	r9
     cb6:	af 92       	push	r10
     cb8:	bf 92       	push	r11
     cba:	cf 92       	push	r12
     cbc:	df 92       	push	r13
     cbe:	ef 92       	push	r14
     cc0:	ff 92       	push	r15
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	4c 01       	movw	r8, r24
     ccc:	6b 01       	movw	r12, r22
     cce:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
     cd0:	89 2b       	or	r24, r25
     cd2:	09 f4       	brne	.+2      	; 0xcd6 <fat_get_dir_entry_of_path+0x2c>
     cd4:	76 c0       	rjmp	.+236    	; 0xdc2 <fat_get_dir_entry_of_path+0x118>
     cd6:	61 15       	cp	r22, r1
     cd8:	71 05       	cpc	r23, r1
     cda:	09 f4       	brne	.+2      	; 0xcde <fat_get_dir_entry_of_path+0x34>
     cdc:	74 c0       	rjmp	.+232    	; 0xdc6 <fat_get_dir_entry_of_path+0x11c>
     cde:	fb 01       	movw	r30, r22
     ce0:	80 81       	ld	r24, Z
     ce2:	88 23       	and	r24, r24
     ce4:	09 f4       	brne	.+2      	; 0xce8 <fat_get_dir_entry_of_path+0x3e>
     ce6:	71 c0       	rjmp	.+226    	; 0xdca <fat_get_dir_entry_of_path+0x120>
     ce8:	20 97       	sbiw	r28, 0x00	; 0
     cea:	09 f4       	brne	.+2      	; 0xcee <fat_get_dir_entry_of_path+0x44>
     cec:	70 c0       	rjmp	.+224    	; 0xdce <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
     cee:	8f 32       	cpi	r24, 0x2F	; 47
     cf0:	19 f4       	brne	.+6      	; 0xcf8 <fat_get_dir_entry_of_path+0x4e>
        ++path;
     cf2:	ff ef       	ldi	r31, 0xFF	; 255
     cf4:	cf 1a       	sub	r12, r31
     cf6:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
     cf8:	8b e2       	ldi	r24, 0x2B	; 43
     cfa:	fe 01       	movw	r30, r28
     cfc:	11 92       	st	Z+, r1
     cfe:	8a 95       	dec	r24
     d00:	e9 f7       	brne	.-6      	; 0xcfc <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
     d02:	80 e1       	ldi	r24, 0x10	; 16
     d04:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
     d06:	f6 01       	movw	r30, r12
     d08:	80 81       	ld	r24, Z
     d0a:	88 23       	and	r24, r24
     d0c:	09 f4       	brne	.+2      	; 0xd10 <fat_get_dir_entry_of_path+0x66>
     d0e:	61 c0       	rjmp	.+194    	; 0xdd2 <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
     d10:	41 2c       	mov	r4, r1
     d12:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
     d14:	be 01       	movw	r22, r28
     d16:	c4 01       	movw	r24, r8
     d18:	0e 94 35 05 	call	0xa6a	; 0xa6a <fat_open_dir>
     d1c:	8c 01       	movw	r16, r24
        if(!dd)
     d1e:	89 2b       	or	r24, r25
     d20:	09 f4       	brne	.+2      	; 0xd24 <fat_get_dir_entry_of_path+0x7a>
     d22:	59 c0       	rjmp	.+178    	; 0xdd6 <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
     d24:	6f e2       	ldi	r22, 0x2F	; 47
     d26:	70 e0       	ldi	r23, 0x00	; 0
     d28:	c6 01       	movw	r24, r12
     d2a:	0e 94 b1 0b 	call	0x1762	; 0x1762 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	41 f0       	breq	.+16     	; 0xd42 <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
     d32:	e8 2e       	mov	r14, r24
     d34:	ec 18       	sub	r14, r12
            ++sub_path;
     d36:	5c 01       	movw	r10, r24
     d38:	ff ef       	ldi	r31, 0xFF	; 255
     d3a:	af 1a       	sub	r10, r31
     d3c:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
     d3e:	f1 2c       	mov	r15, r1
     d40:	2d c0       	rjmp	.+90     	; 0xd9c <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
     d42:	f6 01       	movw	r30, r12
     d44:	01 90       	ld	r0, Z+
     d46:	00 20       	and	r0, r0
     d48:	e9 f7       	brne	.-6      	; 0xd44 <fat_get_dir_entry_of_path+0x9a>
     d4a:	31 97       	sbiw	r30, 0x01	; 1
     d4c:	ec 19       	sub	r30, r12
     d4e:	fd 09       	sbc	r31, r13
     d50:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
     d52:	56 01       	movw	r10, r12
     d54:	ae 0e       	add	r10, r30
     d56:	b1 1c       	adc	r11, r1
     d58:	f2 cf       	rjmp	.-28     	; 0xd3e <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
     d5a:	fe 01       	movw	r30, r28
     d5c:	01 90       	ld	r0, Z+
     d5e:	00 20       	and	r0, r0
     d60:	e9 f7       	brne	.-6      	; 0xd5c <fat_get_dir_entry_of_path+0xb2>
     d62:	31 97       	sbiw	r30, 0x01	; 1
     d64:	3f 01       	movw	r6, r30
     d66:	6c 1a       	sub	r6, r28
     d68:	7d 0a       	sbc	r7, r29
     d6a:	6e 14       	cp	r6, r14
     d6c:	7f 04       	cpc	r7, r15
     d6e:	b1 f4       	brne	.+44     	; 0xd9c <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
     d70:	a3 01       	movw	r20, r6
     d72:	be 01       	movw	r22, r28
     d74:	c6 01       	movw	r24, r12
     d76:	0e 94 c5 0b 	call	0x178a	; 0x178a <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
     d7a:	89 2b       	or	r24, r25
     d7c:	79 f4       	brne	.+30     	; 0xd9c <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
     d7e:	c8 01       	movw	r24, r16
     d80:	0e 94 73 05 	call	0xae6	; 0xae6 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
     d84:	f6 01       	movw	r30, r12
     d86:	e6 0d       	add	r30, r6
     d88:	f7 1d       	adc	r31, r7
     d8a:	80 81       	ld	r24, Z
     d8c:	88 23       	and	r24, r24
     d8e:	29 f1       	breq	.+74     	; 0xdda <fat_get_dir_entry_of_path+0x130>
     d90:	98 a1       	ldd	r25, Y+32	; 0x20
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
     d92:	89 2f       	mov	r24, r25
     d94:	80 71       	andi	r24, 0x10	; 16
     d96:	94 fd       	sbrc	r25, 4
     d98:	08 c0       	rjmp	.+16     	; 0xdaa <fat_get_dir_entry_of_path+0x100>
     d9a:	20 c0       	rjmp	.+64     	; 0xddc <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
     d9c:	be 01       	movw	r22, r28
     d9e:	c8 01       	movw	r24, r16
     da0:	0e 94 86 05 	call	0xb0c	; 0xb0c <fat_read_dir>
     da4:	81 11       	cpse	r24, r1
     da6:	d9 cf       	rjmp	.-78     	; 0xd5a <fat_get_dir_entry_of_path+0xb0>
     da8:	03 c0       	rjmp	.+6      	; 0xdb0 <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
     daa:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
     dac:	04 2d       	mov	r16, r4
     dae:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
     db0:	c8 01       	movw	r24, r16
     db2:	0e 94 73 05 	call	0xae6	; 0xae6 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
     db6:	f6 01       	movw	r30, r12
     db8:	80 81       	ld	r24, Z
     dba:	81 11       	cpse	r24, r1
     dbc:	ab cf       	rjmp	.-170    	; 0xd14 <fat_get_dir_entry_of_path+0x6a>
            return 1;
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0d c0       	rjmp	.+26     	; 0xddc <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0b c0       	rjmp	.+22     	; 0xddc <fat_get_dir_entry_of_path+0x132>
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	09 c0       	rjmp	.+18     	; 0xddc <fat_get_dir_entry_of_path+0x132>
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	07 c0       	rjmp	.+14     	; 0xddc <fat_get_dir_entry_of_path+0x132>
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	05 c0       	rjmp	.+10     	; 0xddc <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	03 c0       	rjmp	.+6      	; 0xddc <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	08 95       	ret

00000dfe <find_file_in_dir>:
#include "sd_raw.h"
#include "sd_raw_config.h"


uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
     dfe:	ef 92       	push	r14
     e00:	ff 92       	push	r15
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	cf 93       	push	r28
     e08:	df 93       	push	r29
     e0a:	8b 01       	movw	r16, r22
     e0c:	7a 01       	movw	r14, r20
     e0e:	e9 01       	movw	r28, r18
	while(fat_read_dir(dd, dir_entry))
     e10:	0b c0       	rjmp	.+22     	; 0xe28 <find_file_in_dir+0x2a>
	{
		if(strcmp(dir_entry->long_name, name) == 0)
     e12:	b7 01       	movw	r22, r14
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 bc 0b 	call	0x1778	; 0x1778 <strcmp>
     e1a:	89 2b       	or	r24, r25
     e1c:	29 f4       	brne	.+10     	; 0xe28 <find_file_in_dir+0x2a>
		{
			fat_reset_dir(dd);
     e1e:	c8 01       	movw	r24, r16
     e20:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fat_reset_dir>
			return 1;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	06 c0       	rjmp	.+12     	; 0xe34 <find_file_in_dir+0x36>
#include "sd_raw_config.h"


uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
     e28:	be 01       	movw	r22, r28
     e2a:	c8 01       	movw	r24, r16
     e2c:	0e 94 86 05 	call	0xb0c	; 0xb0c <fat_read_dir>
     e30:	81 11       	cpse	r24, r1
     e32:	ef cf       	rjmp	.-34     	; 0xe12 <find_file_in_dir+0x14>
			return 1;
		}
	}

	return 0;
}
     e34:	df 91       	pop	r29
     e36:	cf 91       	pop	r28
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	08 95       	ret

00000e42 <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	cd b7       	in	r28, 0x3d	; 61
     e4c:	de b7       	in	r29, 0x3e	; 62
     e4e:	ab 97       	sbiw	r28, 0x2b	; 43
     e50:	0f b6       	in	r0, 0x3f	; 63
     e52:	f8 94       	cli
     e54:	de bf       	out	0x3e, r29	; 62
     e56:	0f be       	out	0x3f, r0	; 63
     e58:	cd bf       	out	0x3d, r28	; 61
     e5a:	8c 01       	movw	r16, r24
	struct fat_dir_entry_struct file_entry;
	if(!find_file_in_dir(fs, dd, name, &file_entry))
     e5c:	9e 01       	movw	r18, r28
     e5e:	2f 5f       	subi	r18, 0xFF	; 255
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	0e 94 ff 06 	call	0xdfe	; 0xdfe <find_file_in_dir>
     e66:	88 23       	and	r24, r24
     e68:	39 f0       	breq	.+14     	; 0xe78 <open_file_in_dir+0x36>
	return 0;

	return fat_open_file(fs, &file_entry);
     e6a:	be 01       	movw	r22, r28
     e6c:	6f 5f       	subi	r22, 0xFF	; 255
     e6e:	7f 4f       	sbci	r23, 0xFF	; 255
     e70:	c8 01       	movw	r24, r16
     e72:	0e 94 d7 03 	call	0x7ae	; 0x7ae <fat_open_file>
     e76:	02 c0       	rjmp	.+4      	; 0xe7c <open_file_in_dir+0x3a>

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
	struct fat_dir_entry_struct file_entry;
	if(!find_file_in_dir(fs, dd, name, &file_entry))
	return 0;
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0

	return fat_open_file(fs, &file_entry);
}
     e7c:	ab 96       	adiw	r28, 0x2b	; 43
     e7e:	0f b6       	in	r0, 0x3f	; 63
     e80:	f8 94       	cli
     e82:	de bf       	out	0x3e, r29	; 62
     e84:	0f be       	out	0x3f, r0	; 63
     e86:	cd bf       	out	0x3d, r28	; 61
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	1f 91       	pop	r17
     e8e:	0f 91       	pop	r16
     e90:	08 95       	ret

00000e92 <main>:


int main() {
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	e3 97       	sbiw	r28, 0x33	; 51
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
  /* setup sd card slot */
  sd_raw_init();
     eb6:	0e 94 86 09 	call	0x130c	; 0x130c <sd_raw_init>

  /* open first partition */
  struct partition_struct* partition = partition_open(sd_raw_read, sd_raw_read_interval, 0, 0, 0);
     eba:	00 e0       	ldi	r16, 0x00	; 0
     ebc:	20 e0       	ldi	r18, 0x00	; 0
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	40 e0       	ldi	r20, 0x00	; 0
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	67 e1       	ldi	r22, 0x17	; 23
     ec6:	7a e0       	ldi	r23, 0x0A	; 10
     ec8:	83 ed       	ldi	r24, 0xD3	; 211
     eca:	98 e0       	ldi	r25, 0x08	; 8
     ecc:	0e 94 ba 07 	call	0xf74	; 0xf74 <partition_open>
     ed0:	6c 01       	movw	r12, r24

  if(!partition)
     ed2:	89 2b       	or	r24, r25
     ed4:	61 f4       	brne	.+24     	; 0xeee <main+0x5c>
  {
	/* If the partition did not open, assume the storage device
		* is a "superfloppy", i.e. has no MBR.
		*/
    partition = partition_open(sd_raw_read, sd_raw_read_interval, 0, 0, -1);
     ed6:	0f ef       	ldi	r16, 0xFF	; 255
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	50 e0       	ldi	r21, 0x00	; 0
     ee0:	67 e1       	ldi	r22, 0x17	; 23
     ee2:	7a e0       	ldi	r23, 0x0A	; 10
     ee4:	83 ed       	ldi	r24, 0xD3	; 211
     ee6:	98 e0       	ldi	r25, 0x08	; 8
     ee8:	0e 94 ba 07 	call	0xf74	; 0xf74 <partition_open>
     eec:	6c 01       	movw	r12, r24
  }

  /* open file system */
  struct fat_fs_struct* fs = fat_open(partition);
     eee:	c6 01       	movw	r24, r12
     ef0:	0e 94 2d 02 	call	0x45a	; 0x45a <fat_open>
     ef4:	7c 01       	movw	r14, r24

  /* open root directory */
  struct fat_dir_entry_struct directory;
  fat_get_dir_entry_of_path(fs, "/", &directory);
     ef6:	ae 01       	movw	r20, r28
     ef8:	4f 5f       	subi	r20, 0xFF	; 255
     efa:	5f 4f       	sbci	r21, 0xFF	; 255
     efc:	6d e0       	ldi	r22, 0x0D	; 13
     efe:	71 e0       	ldi	r23, 0x01	; 1
     f00:	0e 94 55 06 	call	0xcaa	; 0xcaa <fat_get_dir_entry_of_path>

  struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
     f04:	be 01       	movw	r22, r28
     f06:	6f 5f       	subi	r22, 0xFF	; 255
     f08:	7f 4f       	sbci	r23, 0xFF	; 255
     f0a:	c7 01       	movw	r24, r14
     f0c:	0e 94 35 05 	call	0xa6a	; 0xa6a <fat_open_dir>
     f10:	5c 01       	movw	r10, r24
  struct fat_file_struct* fd = open_file_in_dir(fs, dd, "forecast_d00.dat");
     f12:	4f e0       	ldi	r20, 0x0F	; 15
     f14:	51 e0       	ldi	r21, 0x01	; 1
     f16:	bc 01       	movw	r22, r24
     f18:	c7 01       	movw	r24, r14
     f1a:	0e 94 21 07 	call	0xe42	; 0xe42 <open_file_in_dir>
     f1e:	8c 01       	movw	r16, r24

  uint8_t buffer[8];
  uint32_t offset = 0;
  intptr_t count;
  while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
     f20:	48 e0       	ldi	r20, 0x08	; 8
     f22:	50 e0       	ldi	r21, 0x00	; 0
     f24:	be 01       	movw	r22, r28
     f26:	64 5d       	subi	r22, 0xD4	; 212
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	c8 01       	movw	r24, r16
     f2c:	0e 94 12 04 	call	0x824	; 0x824 <fat_read_file>
     f30:	18 16       	cp	r1, r24
     f32:	19 06       	cpc	r1, r25
     f34:	ac f3       	brlt	.-22     	; 0xf20 <main+0x8e>
  {
    /* do something with the data in buffer here */
	offset += sizeof(buffer);
  }

  fat_close_file(fd);
     f36:	c8 01       	movw	r24, r16
     f38:	0e 94 0c 04 	call	0x818	; 0x818 <fat_close_file>
  
  /* close directory */
  fat_close_dir(dd);
     f3c:	c5 01       	movw	r24, r10
     f3e:	0e 94 73 05 	call	0xae6	; 0xae6 <fat_close_dir>

  /* close file system */
  fat_close(fs);
     f42:	c7 01       	movw	r24, r14
     f44:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <fat_close>

  /* close partition */
  partition_close(partition);
     f48:	c6 01       	movw	r24, r12
     f4a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <partition_close>
}
     f4e:	80 e0       	ldi	r24, 0x00	; 0
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	e3 96       	adiw	r28, 0x33	; 51
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	de bf       	out	0x3e, r29	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	cd bf       	out	0x3d, r28	; 61
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	08 95       	ret

00000f74 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
     f74:	8f 92       	push	r8
     f76:	9f 92       	push	r9
     f78:	af 92       	push	r10
     f7a:	bf 92       	push	r11
     f7c:	cf 92       	push	r12
     f7e:	df 92       	push	r13
     f80:	ef 92       	push	r14
     f82:	ff 92       	push	r15
     f84:	0f 93       	push	r16
     f86:	1f 93       	push	r17
     f88:	cf 93       	push	r28
     f8a:	df 93       	push	r29
     f8c:	cd b7       	in	r28, 0x3d	; 61
     f8e:	de b7       	in	r29, 0x3e	; 62
     f90:	60 97       	sbiw	r28, 0x10	; 16
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	de bf       	out	0x3e, r29	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	29 f1       	breq	.+74     	; 0xfea <partition_open+0x76>
     fa0:	61 15       	cp	r22, r1
     fa2:	71 05       	cpc	r23, r1
     fa4:	29 f1       	breq	.+74     	; 0xff0 <partition_open+0x7c>
     fa6:	04 30       	cpi	r16, 0x04	; 4
     fa8:	34 f5       	brge	.+76     	; 0xff6 <partition_open+0x82>
        return 0;

    if(index >= 0)
     faa:	00 23       	and	r16, r16
     fac:	0c f4       	brge	.+2      	; 0xfb0 <partition_open+0x3c>
     fae:	6b c0       	rjmp	.+214    	; 0x1086 <partition_open+0x112>
     fb0:	49 01       	movw	r8, r18
     fb2:	5a 01       	movw	r10, r20
     fb4:	6b 01       	movw	r12, r22
     fb6:	7c 01       	movw	r14, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
     fb8:	80 e1       	ldi	r24, 0x10	; 16
     fba:	08 02       	muls	r16, r24
     fbc:	b0 01       	movw	r22, r0
     fbe:	11 24       	eor	r1, r1
     fc0:	62 54       	subi	r22, 0x42	; 66
     fc2:	7e 4f       	sbci	r23, 0xFE	; 254
     fc4:	07 2e       	mov	r0, r23
     fc6:	00 0c       	add	r0, r0
     fc8:	88 0b       	sbc	r24, r24
     fca:	99 0b       	sbc	r25, r25
     fcc:	20 e1       	ldi	r18, 0x10	; 16
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	ae 01       	movw	r20, r28
     fd2:	4f 5f       	subi	r20, 0xFF	; 255
     fd4:	5f 4f       	sbci	r21, 0xFF	; 255
     fd6:	f7 01       	movw	r30, r14
     fd8:	09 95       	icall
     fda:	88 23       	and	r24, r24
     fdc:	79 f0       	breq	.+30     	; 0xffc <partition_open+0x88>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	81 11       	cpse	r24, r1
     fe2:	37 c0       	rjmp	.+110    	; 0x1052 <partition_open+0xde>
            return 0;
     fe4:	80 e0       	ldi	r24, 0x00	; 0
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	54 c0       	rjmp	.+168    	; 0x1092 <partition_open+0x11e>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	51 c0       	rjmp	.+162    	; 0x1092 <partition_open+0x11e>
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	4e c0       	rjmp	.+156    	; 0x1092 <partition_open+0x11e>
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	4b c0       	rjmp	.+150    	; 0x1092 <partition_open+0x11e>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	48 c0       	rjmp	.+144    	; 0x1092 <partition_open+0x11e>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    1002:	01 ed       	ldi	r16, 0xD1	; 209
    1004:	11 e0       	ldi	r17, 0x01	; 1
    1006:	81 e1       	ldi	r24, 0x11	; 17
    1008:	d8 01       	movw	r26, r16
    100a:	1d 92       	st	X+, r1
    100c:	8a 95       	dec	r24
    100e:	e9 f7       	brne	.-6      	; 0x100a <partition_open+0x96>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    1010:	f8 01       	movw	r30, r16
    1012:	f1 82       	std	Z+1, r15	; 0x01
    1014:	e0 82       	st	Z, r14
    new_partition->device_read_interval = device_read_interval;
    1016:	d3 82       	std	Z+3, r13	; 0x03
    1018:	c2 82       	std	Z+2, r12	; 0x02
    new_partition->device_write = device_write;
    101a:	b5 82       	std	Z+5, r11	; 0x05
    101c:	a4 82       	std	Z+4, r10	; 0x04
    new_partition->device_write_interval = device_write_interval;
    101e:	97 82       	std	Z+7, r9	; 0x07
    1020:	86 82       	std	Z+6, r8	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    1022:	8d 81       	ldd	r24, Y+5	; 0x05
    1024:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    1026:	ce 01       	movw	r24, r28
    1028:	09 96       	adiw	r24, 0x09	; 9
    102a:	0e 94 6f 00 	call	0xde	; 0xde <read32>
    102e:	d8 01       	movw	r26, r16
    1030:	19 96       	adiw	r26, 0x09	; 9
    1032:	6d 93       	st	X+, r22
    1034:	7d 93       	st	X+, r23
    1036:	8d 93       	st	X+, r24
    1038:	9c 93       	st	X, r25
    103a:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    103c:	ce 01       	movw	r24, r28
    103e:	0d 96       	adiw	r24, 0x0d	; 13
    1040:	0e 94 6f 00 	call	0xde	; 0xde <read32>
    1044:	f8 01       	movw	r30, r16
    1046:	65 87       	std	Z+13, r22	; 0x0d
    1048:	76 87       	std	Z+14, r23	; 0x0e
    104a:	87 87       	std	Z+15, r24	; 0x0f
    104c:	90 8b       	std	Z+16, r25	; 0x10
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    104e:	c8 01       	movw	r24, r16
    1050:	20 c0       	rjmp	.+64     	; 0x1092 <partition_open+0x11e>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    1052:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <partition_handles+0x8>
    1056:	88 23       	and	r24, r24
    1058:	a1 f2       	breq	.-88     	; 0x1002 <partition_open+0x8e>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	19 c0       	rjmp	.+50     	; 0x1092 <partition_open+0x11e>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    1060:	e1 ed       	ldi	r30, 0xD1	; 209
    1062:	f1 e0       	ldi	r31, 0x01	; 1
    1064:	11 e1       	ldi	r17, 0x11	; 17
    1066:	df 01       	movw	r26, r30
    1068:	1d 92       	st	X+, r1
    106a:	1a 95       	dec	r17
    106c:	e9 f7       	brne	.-6      	; 0x1068 <partition_open+0xf4>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    1072:	73 83       	std	Z+3, r23	; 0x03
    1074:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    1076:	55 83       	std	Z+5, r21	; 0x05
    1078:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    107a:	37 83       	std	Z+7, r19	; 0x07
    107c:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	80 87       	std	Z+8, r24	; 0x08
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    1082:	cf 01       	movw	r24, r30
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <partition_open+0x11e>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    1086:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <partition_handles+0x8>
    108a:	ee 23       	and	r30, r30
    108c:	49 f3       	breq	.-46     	; 0x1060 <partition_open+0xec>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    1092:	60 96       	adiw	r28, 0x10	; 16
    1094:	0f b6       	in	r0, 0x3f	; 63
    1096:	f8 94       	cli
    1098:	de bf       	out	0x3e, r29	; 62
    109a:	0f be       	out	0x3f, r0	; 63
    109c:	cd bf       	out	0x3d, r28	; 61
    109e:	df 91       	pop	r29
    10a0:	cf 91       	pop	r28
    10a2:	1f 91       	pop	r17
    10a4:	0f 91       	pop	r16
    10a6:	ff 90       	pop	r15
    10a8:	ef 90       	pop	r14
    10aa:	df 90       	pop	r13
    10ac:	cf 90       	pop	r12
    10ae:	bf 90       	pop	r11
    10b0:	af 90       	pop	r10
    10b2:	9f 90       	pop	r9
    10b4:	8f 90       	pop	r8
    10b6:	08 95       	ret

000010b8 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    10b8:	00 97       	sbiw	r24, 0x00	; 0
    10ba:	21 f0       	breq	.+8      	; 0x10c4 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    10bc:	fc 01       	movw	r30, r24
    10be:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    10c4:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    10c6:	08 95       	ret

000010c8 <sd_raw_send_byte>:
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    10c8:	8f b9       	out	0x0f, r24	; 15
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    10ca:	77 9b       	sbis	0x0e, 7	; 14
    10cc:	fe cf       	rjmp	.-4      	; 0x10ca <sd_raw_send_byte+0x2>
    SPSR &= ~(1 << SPIF);
    10ce:	77 98       	cbi	0x0e, 7	; 14
    10d0:	08 95       	ret

000010d2 <sd_raw_rec_byte>:
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte()
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    10d2:	8f ef       	ldi	r24, 0xFF	; 255
    10d4:	8f b9       	out	0x0f, r24	; 15
    while(!(SPSR & (1 << SPIF)));
    10d6:	77 9b       	sbis	0x0e, 7	; 14
    10d8:	fe cf       	rjmp	.-4      	; 0x10d6 <sd_raw_rec_byte+0x4>
    SPSR &= ~(1 << SPIF);
    10da:	77 98       	cbi	0x0e, 7	; 14

    return SPDR;
    10dc:	8f b1       	in	r24, 0x0f	; 15
}
    10de:	08 95       	ret

000010e0 <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	c8 2f       	mov	r28, r24
    10ec:	d4 2f       	mov	r29, r20
    10ee:	15 2f       	mov	r17, r21
    10f0:	06 2f       	mov	r16, r22
    10f2:	f7 2e       	mov	r15, r23
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    10f4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    10f8:	8c 2f       	mov	r24, r28
    10fa:	80 64       	ori	r24, 0x40	; 64
    10fc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    1100:	8f 2d       	mov	r24, r15
    1102:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    1106:	80 2f       	mov	r24, r16
    1108:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    110c:	81 2f       	mov	r24, r17
    110e:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    1112:	8d 2f       	mov	r24, r29
    1114:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
    switch(command)
    1118:	cc 23       	and	r28, r28
    111a:	19 f0       	breq	.+6      	; 0x1122 <__stack+0x23>
    111c:	c8 30       	cpi	r28, 0x08	; 8
    111e:	29 f0       	breq	.+10     	; 0x112a <__stack+0x2b>
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <__stack+0x33>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    1122:	85 e9       	ldi	r24, 0x95	; 149
    1124:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
           break;
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <__stack+0x49>
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    112a:	87 e8       	ldi	r24, 0x87	; 135
    112c:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
           break;
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <__stack+0x49>
        default:
           sd_raw_send_byte(0xff);
    1132:	8f ef       	ldi	r24, 0xFF	; 255
    1134:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
           break;
    1138:	07 c0       	rjmp	.+14     	; 0x1148 <__stack+0x49>
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    113a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
        if(response != 0xff)
    113e:	8f 3f       	cpi	r24, 0xFF	; 255
    1140:	29 f4       	brne	.+10     	; 0x114c <__stack+0x4d>
    1142:	c1 50       	subi	r28, 0x01	; 1
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    1144:	d1 f7       	brne	.-12     	; 0x113a <__stack+0x3b>
    1146:	02 c0       	rjmp	.+4      	; 0x114c <__stack+0x4d>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    1148:	ca e0       	ldi	r28, 0x0A	; 10
    114a:	f7 cf       	rjmp	.-18     	; 0x113a <__stack+0x3b>
        if(response != 0xff)
            break;
    }

    return response;
}
    114c:	df 91       	pop	r29
    114e:	cf 91       	pop	r28
    1150:	1f 91       	pop	r17
    1152:	0f 91       	pop	r16
    1154:	ff 90       	pop	r15
    1156:	08 95       	ret

00001158 <sd_raw_available>:
 *
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
    1158:	83 b3       	in	r24, 0x13	; 19
    115a:	82 95       	swap	r24
    115c:	81 70       	andi	r24, 0x01	; 1
}
    115e:	91 e0       	ldi	r25, 0x01	; 1
    1160:	89 27       	eor	r24, r25
    1162:	08 95       	ret

00001164 <sd_raw_locked>:
 *
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
    1164:	83 b3       	in	r24, 0x13	; 19
    1166:	85 fb       	bst	r24, 5
    1168:	88 27       	eor	r24, r24
    116a:	80 f9       	bld	r24, 0
}
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	89 27       	eor	r24, r25
    1170:	08 95       	ret

00001172 <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    1172:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <raw_block_written>
    1176:	81 11       	cpse	r24, r1
    1178:	14 c0       	rjmp	.+40     	; 0x11a2 <sd_raw_sync+0x30>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    117a:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <raw_block_address>
    117e:	70 91 e5 01 	lds	r23, 0x01E5	; 0x8001e5 <raw_block_address+0x1>
    1182:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <raw_block_address+0x2>
    1186:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <raw_block_address+0x3>
    118a:	20 e0       	ldi	r18, 0x00	; 0
    118c:	32 e0       	ldi	r19, 0x02	; 2
    118e:	48 ee       	ldi	r20, 0xE8	; 232
    1190:	51 e0       	ldi	r21, 0x01	; 1
    1192:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <sd_raw_write>
    1196:	88 23       	and	r24, r24
    1198:	29 f0       	breq	.+10     	; 0x11a4 <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <raw_block_written>
#endif
    return 1;
    11a0:	08 95       	ret
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    11a4:	08 95       	ret

000011a6 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    11a6:	2f 92       	push	r2
    11a8:	3f 92       	push	r3
    11aa:	4f 92       	push	r4
    11ac:	5f 92       	push	r5
    11ae:	6f 92       	push	r6
    11b0:	7f 92       	push	r7
    11b2:	8f 92       	push	r8
    11b4:	9f 92       	push	r9
    11b6:	af 92       	push	r10
    11b8:	bf 92       	push	r11
    11ba:	cf 92       	push	r12
    11bc:	df 92       	push	r13
    11be:	ef 92       	push	r14
    11c0:	ff 92       	push	r15
    11c2:	0f 93       	push	r16
    11c4:	1f 93       	push	r17
    11c6:	cf 93       	push	r28
    11c8:	df 93       	push	r29
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <sd_raw_read+0x26>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <sd_raw_read+0x28>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	4b 01       	movw	r8, r22
    11d4:	5c 01       	movw	r10, r24
    11d6:	5a 83       	std	Y+2, r21	; 0x02
    11d8:	49 83       	std	Y+1, r20	; 0x01
    11da:	79 01       	movw	r14, r18
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    11dc:	23 2b       	or	r18, r19
    11de:	09 f4       	brne	.+2      	; 0x11e2 <sd_raw_read+0x3c>
    11e0:	7d c0       	rjmp	.+250    	; 0x12dc <sd_raw_read+0x136>
    11e2:	08 ee       	ldi	r16, 0xE8	; 232
    11e4:	13 e0       	ldi	r17, 0x03	; 3
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    11e6:	14 01       	movw	r2, r8
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	38 22       	and	r3, r24
        block_address = offset - block_offset;
    11ec:	24 01       	movw	r4, r8
    11ee:	35 01       	movw	r6, r10
    11f0:	42 18       	sub	r4, r2
    11f2:	53 08       	sbc	r5, r3
    11f4:	61 08       	sbc	r6, r1
    11f6:	71 08       	sbc	r7, r1
    11f8:	c1 2c       	mov	r12, r1
    11fa:	68 94       	set
    11fc:	dd 24       	eor	r13, r13
    11fe:	d1 f8       	bld	r13, 1
    1200:	c2 18       	sub	r12, r2
    1202:	d3 08       	sbc	r13, r3
    1204:	ec 14       	cp	r14, r12
    1206:	fd 04       	cpc	r15, r13
    1208:	08 f4       	brcc	.+2      	; 0x120c <sd_raw_read+0x66>
    120a:	67 01       	movw	r12, r14
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    120c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <raw_block_address>
    1210:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <raw_block_address+0x1>
    1214:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <raw_block_address+0x2>
    1218:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <raw_block_address+0x3>
    121c:	48 16       	cp	r4, r24
    121e:	59 06       	cpc	r5, r25
    1220:	6a 06       	cpc	r6, r26
    1222:	7b 06       	cpc	r7, r27
    1224:	09 f4       	brne	.+2      	; 0x1228 <sd_raw_read+0x82>
    1226:	40 c0       	rjmp	.+128    	; 0x12a8 <sd_raw_read+0x102>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1228:	0e 94 b9 08 	call	0x1172	; 0x1172 <sd_raw_sync>
    122c:	88 23       	and	r24, r24
    122e:	09 f4       	brne	.+2      	; 0x1232 <sd_raw_read+0x8c>
    1230:	56 c0       	rjmp	.+172    	; 0x12de <sd_raw_read+0x138>
                return 0;
#endif

            /* address card */
            select_card();
    1232:	c0 98       	cbi	0x18, 0	; 24

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    1234:	b3 01       	movw	r22, r6
    1236:	a2 01       	movw	r20, r4
    1238:	81 e1       	ldi	r24, 0x11	; 17
    123a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
    123e:	88 23       	and	r24, r24
    1240:	19 f0       	breq	.+6      	; 0x1248 <sd_raw_read+0xa2>
#endif
            {
                unselect_card();
    1242:	c0 9a       	sbi	0x18, 0	; 24
                return 0;
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	4b c0       	rjmp	.+150    	; 0x12de <sd_raw_read+0x138>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    1248:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
    124c:	8e 3f       	cpi	r24, 0xFE	; 254
    124e:	e1 f7       	brne	.-8      	; 0x1248 <sd_raw_read+0xa2>
    1250:	e8 ee       	ldi	r30, 0xE8	; 232
    1252:	f1 e0       	ldi	r31, 0x01	; 1
    1254:	fc 83       	std	Y+4, r31	; 0x04
    1256:	eb 83       	std	Y+3, r30	; 0x03
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    1258:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
    125c:	eb 81       	ldd	r30, Y+3	; 0x03
    125e:	fc 81       	ldd	r31, Y+4	; 0x04
    1260:	81 93       	st	Z+, r24
    1262:	fc 83       	std	Y+4, r31	; 0x04
    1264:	eb 83       	std	Y+3, r30	; 0x03
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    1266:	0e 17       	cp	r16, r30
    1268:	1f 07       	cpc	r17, r31
    126a:	b1 f7       	brne	.-20     	; 0x1258 <sd_raw_read+0xb2>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    126c:	40 92 e4 01 	sts	0x01E4, r4	; 0x8001e4 <raw_block_address>
    1270:	50 92 e5 01 	sts	0x01E5, r5	; 0x8001e5 <raw_block_address+0x1>
    1274:	60 92 e6 01 	sts	0x01E6, r6	; 0x8001e6 <raw_block_address+0x2>
    1278:	70 92 e7 01 	sts	0x01E7, r7	; 0x8001e7 <raw_block_address+0x3>

            memcpy(buffer, raw_block + block_offset, read_length);
    127c:	b1 01       	movw	r22, r2
    127e:	68 51       	subi	r22, 0x18	; 24
    1280:	7e 4f       	sbci	r23, 0xFE	; 254
    1282:	a6 01       	movw	r20, r12
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	0e 94 a8 0b 	call	0x1750	; 0x1750 <memcpy>
            buffer += read_length;
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	9a 81       	ldd	r25, Y+2	; 0x02
    1290:	8c 0d       	add	r24, r12
    1292:	9d 1d       	adc	r25, r13
    1294:	9a 83       	std	Y+2, r25	; 0x02
    1296:	89 83       	std	Y+1, r24	; 0x01
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    1298:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    129c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    12a0:	c0 9a       	sbi	0x18, 0	; 24

            /* let card some time to finish */
            sd_raw_rec_byte();
    12a2:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
    12a6:	0e c0       	rjmp	.+28     	; 0x12c4 <sd_raw_read+0x11e>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    12a8:	b1 01       	movw	r22, r2
    12aa:	68 51       	subi	r22, 0x18	; 24
    12ac:	7e 4f       	sbci	r23, 0xFE	; 254
    12ae:	a6 01       	movw	r20, r12
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <memcpy>
            buffer += read_length;
    12b8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ba:	fa 81       	ldd	r31, Y+2	; 0x02
    12bc:	ec 0d       	add	r30, r12
    12be:	fd 1d       	adc	r31, r13
    12c0:	fa 83       	std	Y+2, r31	; 0x02
    12c2:	e9 83       	std	Y+1, r30	; 0x01
        }
#endif

        length -= read_length;
    12c4:	ec 18       	sub	r14, r12
    12c6:	fd 08       	sbc	r15, r13
        offset += read_length;
    12c8:	8c 0c       	add	r8, r12
    12ca:	9d 1c       	adc	r9, r13
    12cc:	a1 1c       	adc	r10, r1
    12ce:	b1 1c       	adc	r11, r1
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    12d0:	e1 14       	cp	r14, r1
    12d2:	f1 04       	cpc	r15, r1
    12d4:	09 f0       	breq	.+2      	; 0x12d8 <sd_raw_read+0x132>
    12d6:	87 cf       	rjmp	.-242    	; 0x11e6 <sd_raw_read+0x40>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	01 c0       	rjmp	.+2      	; 0x12de <sd_raw_read+0x138>
    12dc:	81 e0       	ldi	r24, 0x01	; 1
}
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	0f 90       	pop	r0
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	9f 90       	pop	r9
    12fc:	8f 90       	pop	r8
    12fe:	7f 90       	pop	r7
    1300:	6f 90       	pop	r6
    1302:	5f 90       	pop	r5
    1304:	4f 90       	pop	r4
    1306:	3f 90       	pop	r3
    1308:	2f 90       	pop	r2
    130a:	08 95       	ret

0000130c <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    1314:	a4 98       	cbi	0x14, 4	; 20
    configure_pin_locked();
    1316:	a5 98       	cbi	0x14, 5	; 20

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    1318:	ba 9a       	sbi	0x17, 2	; 23
    configure_pin_sck();
    131a:	b9 9a       	sbi	0x17, 1	; 23
    configure_pin_ss();
    131c:	b8 9a       	sbi	0x17, 0	; 23
    configure_pin_miso();
    131e:	bb 98       	cbi	0x17, 3	; 23

    unselect_card();
    1320:	c0 9a       	sbi	0x18, 0	; 24

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    1322:	83 e5       	ldi	r24, 0x53	; 83
    1324:	8d b9       	out	0x0d, r24	; 13
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    1326:	70 98       	cbi	0x0e, 0	; 14

    /* initialization procedure */
    sd_raw_card_type = 0;
    1328:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <sd_raw_card_type>
    
    if(!sd_raw_available())
    132c:	0e 94 ac 08 	call	0x1158	; 0x1158 <sd_raw_available>
    1330:	08 2f       	mov	r16, r24
    1332:	88 23       	and	r24, r24
    1334:	09 f4       	brne	.+2      	; 0x1338 <sd_raw_init+0x2c>
    1336:	75 c0       	rjmp	.+234    	; 0x1422 <sd_raw_init+0x116>
    1338:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    133a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
    133e:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    1340:	e1 f7       	brne	.-8      	; 0x133a <sd_raw_init+0x2e>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    1342:	c0 98       	cbi	0x18, 0	; 24
    1344:	c0 e0       	ldi	r28, 0x00	; 0
    1346:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	ba 01       	movw	r22, r20
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	29 f0       	breq	.+10     	; 0x1362 <sd_raw_init+0x56>
    1358:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    135a:	b1 f7       	brne	.-20     	; 0x1348 <sd_raw_init+0x3c>
        {
            unselect_card();
    135c:	c0 9a       	sbi	0x18, 0	; 24
            return 0;
    135e:	01 2f       	mov	r16, r17
    1360:	60 c0       	rjmp	.+192    	; 0x1422 <sd_raw_init+0x116>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    1362:	40 e0       	ldi	r20, 0x00	; 0
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	ba 01       	movw	r22, r20
    1368:	87 e3       	ldi	r24, 0x37	; 55
    136a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    136e:	40 e0       	ldi	r20, 0x00	; 0
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	ba 01       	movw	r22, r20
    1374:	89 e2       	ldi	r24, 0x29	; 41
    1376:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    137a:	82 fd       	sbrc	r24, 2
    137c:	05 c0       	rjmp	.+10     	; 0x1388 <sd_raw_init+0x7c>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    137e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sd_raw_card_type>
    1382:	81 60       	ori	r24, 0x01	; 1
    1384:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    1388:	c0 e0       	ldi	r28, 0x00	; 0
    138a:	d0 e8       	ldi	r29, 0x80	; 128
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    138c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sd_raw_card_type>
    1390:	83 70       	andi	r24, 0x03	; 3
    1392:	69 f0       	breq	.+26     	; 0x13ae <sd_raw_init+0xa2>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	50 e0       	ldi	r21, 0x00	; 0
    1398:	ba 01       	movw	r22, r20
    139a:	87 e3       	ldi	r24, 0x37	; 55
    139c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	ba 01       	movw	r22, r20
    13a6:	89 e2       	ldi	r24, 0x29	; 41
    13a8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
    13ac:	06 c0       	rjmp	.+12     	; 0x13ba <sd_raw_init+0xae>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    13ae:	40 e0       	ldi	r20, 0x00	; 0
    13b0:	50 e0       	ldi	r21, 0x00	; 0
    13b2:	ba 01       	movw	r22, r20
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    13ba:	08 2f       	mov	r16, r24
    13bc:	01 70       	andi	r16, 0x01	; 1
    13be:	80 ff       	sbrs	r24, 0
    13c0:	05 c0       	rjmp	.+10     	; 0x13cc <sd_raw_init+0xc0>
    13c2:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    13c4:	19 f7       	brne	.-58     	; 0x138c <sd_raw_init+0x80>
        {
            unselect_card();
    13c6:	c0 9a       	sbi	0x18, 0	; 24
            return 0;
    13c8:	01 2f       	mov	r16, r17
    13ca:	2b c0       	rjmp	.+86     	; 0x1422 <sd_raw_init+0x116>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    13cc:	40 e0       	ldi	r20, 0x00	; 0
    13ce:	52 e0       	ldi	r21, 0x02	; 2
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	80 e1       	ldi	r24, 0x10	; 16
    13d6:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
    13da:	88 23       	and	r24, r24
    13dc:	11 f0       	breq	.+4      	; 0x13e2 <sd_raw_init+0xd6>
    {
        unselect_card();
    13de:	c0 9a       	sbi	0x18, 0	; 24
        return 0;
    13e0:	20 c0       	rjmp	.+64     	; 0x1422 <sd_raw_init+0x116>
    }

    /* deaddress card */
    unselect_card();
    13e2:	c0 9a       	sbi	0x18, 0	; 24

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    13e4:	8d b1       	in	r24, 0x0d	; 13
    13e6:	8c 7f       	andi	r24, 0xFC	; 252
    13e8:	8d b9       	out	0x0d, r24	; 13
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    13ea:	70 9a       	sbi	0x0e, 0	; 14

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	9f ef       	ldi	r25, 0xFF	; 255
    13f0:	dc 01       	movw	r26, r24
    13f2:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <raw_block_address>
    13f6:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <raw_block_address+0x1>
    13fa:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <raw_block_address+0x2>
    13fe:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <raw_block_address+0x3>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	32 e0       	ldi	r19, 0x02	; 2
    140c:	48 ee       	ldi	r20, 0xE8	; 232
    140e:	51 e0       	ldi	r21, 0x01	; 1
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	cb 01       	movw	r24, r22
    1416:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sd_raw_read>

    /* initialization procedure */
    sd_raw_card_type = 0;
    
    if(!sd_raw_available())
        return 0;
    141a:	01 e0       	ldi	r16, 0x01	; 1
    141c:	81 11       	cpse	r24, r1
    141e:	01 c0       	rjmp	.+2      	; 0x1422 <sd_raw_init+0x116>
    1420:	00 e0       	ldi	r16, 0x00	; 0
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    1422:	80 2f       	mov	r24, r16
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	08 95       	ret

0000142e <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    142e:	2f 92       	push	r2
    1430:	3f 92       	push	r3
    1432:	4f 92       	push	r4
    1434:	5f 92       	push	r5
    1436:	6f 92       	push	r6
    1438:	7f 92       	push	r7
    143a:	8f 92       	push	r8
    143c:	9f 92       	push	r9
    143e:	af 92       	push	r10
    1440:	bf 92       	push	r11
    1442:	cf 92       	push	r12
    1444:	df 92       	push	r13
    1446:	ef 92       	push	r14
    1448:	ff 92       	push	r15
    144a:	0f 93       	push	r16
    144c:	1f 93       	push	r17
    144e:	cf 93       	push	r28
    1450:	df 93       	push	r29
    1452:	4b 01       	movw	r8, r22
    1454:	5c 01       	movw	r10, r24
    1456:	1a 01       	movw	r2, r20
    1458:	e9 01       	movw	r28, r18
    if(!buffer || interval == 0 || length < interval || !callback)
    145a:	45 2b       	or	r20, r21
    145c:	31 f1       	breq	.+76     	; 0x14aa <sd_raw_read_interval+0x7c>
    145e:	20 97       	sbiw	r28, 0x00	; 0
    1460:	31 f1       	breq	.+76     	; 0x14ae <sd_raw_read_interval+0x80>
    1462:	02 17       	cp	r16, r18
    1464:	13 07       	cpc	r17, r19
    1466:	28 f1       	brcs	.+74     	; 0x14b2 <sd_raw_read_interval+0x84>
    1468:	e1 14       	cp	r14, r1
    146a:	f1 04       	cpc	r15, r1
    146c:	21 f1       	breq	.+72     	; 0x14b6 <sd_raw_read_interval+0x88>
    146e:	29 01       	movw	r4, r18
    1470:	61 2c       	mov	r6, r1
    1472:	71 2c       	mov	r7, r1
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    1474:	9e 01       	movw	r18, r28
    1476:	a1 01       	movw	r20, r2
    1478:	c5 01       	movw	r24, r10
    147a:	b4 01       	movw	r22, r8
    147c:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sd_raw_read>
    1480:	88 23       	and	r24, r24
    1482:	e1 f0       	breq	.+56     	; 0x14bc <sd_raw_read_interval+0x8e>
            return 0;
        if(!callback(buffer, offset, p))
    1484:	96 01       	movw	r18, r12
    1486:	b5 01       	movw	r22, r10
    1488:	a4 01       	movw	r20, r8
    148a:	c1 01       	movw	r24, r2
    148c:	f7 01       	movw	r30, r14
    148e:	09 95       	icall
    1490:	88 23       	and	r24, r24
    1492:	99 f0       	breq	.+38     	; 0x14ba <sd_raw_read_interval+0x8c>
    1494:	84 0c       	add	r8, r4
    1496:	95 1c       	adc	r9, r5
    1498:	a6 1c       	adc	r10, r6
    149a:	b7 1c       	adc	r11, r7
            break;
        offset += interval;
        length -= interval;
    149c:	0c 1b       	sub	r16, r28
    149e:	1d 0b       	sbc	r17, r29
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    14a0:	0c 17       	cp	r16, r28
    14a2:	1d 07       	cpc	r17, r29
    14a4:	38 f7       	brcc	.-50     	; 0x1474 <sd_raw_read_interval+0x46>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    14a6:	81 e0       	ldi	r24, 0x01	; 1
    14a8:	09 c0       	rjmp	.+18     	; 0x14bc <sd_raw_read_interval+0x8e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	07 c0       	rjmp	.+14     	; 0x14bc <sd_raw_read_interval+0x8e>
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	05 c0       	rjmp	.+10     	; 0x14bc <sd_raw_read_interval+0x8e>
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <sd_raw_read_interval+0x8e>
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	01 c0       	rjmp	.+2      	; 0x14bc <sd_raw_read_interval+0x8e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    14ba:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	1f 91       	pop	r17
    14c2:	0f 91       	pop	r16
    14c4:	ff 90       	pop	r15
    14c6:	ef 90       	pop	r14
    14c8:	df 90       	pop	r13
    14ca:	cf 90       	pop	r12
    14cc:	bf 90       	pop	r11
    14ce:	af 90       	pop	r10
    14d0:	9f 90       	pop	r9
    14d2:	8f 90       	pop	r8
    14d4:	7f 90       	pop	r7
    14d6:	6f 90       	pop	r6
    14d8:	5f 90       	pop	r5
    14da:	4f 90       	pop	r4
    14dc:	3f 90       	pop	r3
    14de:	2f 90       	pop	r2
    14e0:	08 95       	ret

000014e2 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    14e2:	2f 92       	push	r2
    14e4:	3f 92       	push	r3
    14e6:	4f 92       	push	r4
    14e8:	5f 92       	push	r5
    14ea:	6f 92       	push	r6
    14ec:	7f 92       	push	r7
    14ee:	8f 92       	push	r8
    14f0:	9f 92       	push	r9
    14f2:	af 92       	push	r10
    14f4:	bf 92       	push	r11
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	cf 93       	push	r28
    1504:	df 93       	push	r29
    1506:	00 d0       	rcall	.+0      	; 0x1508 <sd_raw_write+0x26>
    1508:	1f 92       	push	r1
    150a:	cd b7       	in	r28, 0x3d	; 61
    150c:	de b7       	in	r29, 0x3e	; 62
    150e:	4b 01       	movw	r8, r22
    1510:	5c 01       	movw	r10, r24
    1512:	1a 01       	movw	r2, r20
    1514:	69 01       	movw	r12, r18
    if(sd_raw_locked())
    1516:	0e 94 b2 08 	call	0x1164	; 0x1164 <sd_raw_locked>
    151a:	89 83       	std	Y+1, r24	; 0x01
    151c:	81 11       	cpse	r24, r1
    151e:	96 c0       	rjmp	.+300    	; 0x164c <sd_raw_write+0x16a>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    1520:	c1 14       	cp	r12, r1
    1522:	d1 04       	cpc	r13, r1
    1524:	09 f4       	brne	.+2      	; 0x1528 <sd_raw_write+0x46>
    1526:	94 c0       	rjmp	.+296    	; 0x1650 <sd_raw_write+0x16e>
    1528:	08 ee       	ldi	r16, 0xE8	; 232
    152a:	13 e0       	ldi	r17, 0x03	; 3
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    152c:	c4 01       	movw	r24, r8
    152e:	91 70       	andi	r25, 0x01	; 1
    1530:	9b 83       	std	Y+3, r25	; 0x03
    1532:	8a 83       	std	Y+2, r24	; 0x02
        block_address = offset - block_offset;
    1534:	24 01       	movw	r4, r8
    1536:	35 01       	movw	r6, r10
    1538:	48 1a       	sub	r4, r24
    153a:	59 0a       	sbc	r5, r25
    153c:	61 08       	sbc	r6, r1
    153e:	71 08       	sbc	r7, r1
    1540:	e1 2c       	mov	r14, r1
    1542:	68 94       	set
    1544:	ff 24       	eor	r15, r15
    1546:	f1 f8       	bld	r15, 1
    1548:	e8 1a       	sub	r14, r24
    154a:	f9 0a       	sbc	r15, r25
    154c:	ce 14       	cp	r12, r14
    154e:	df 04       	cpc	r13, r15
    1550:	08 f4       	brcc	.+2      	; 0x1554 <sd_raw_write+0x72>
    1552:	76 01       	movw	r14, r12
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    1554:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <raw_block_address>
    1558:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <raw_block_address+0x1>
    155c:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <raw_block_address+0x2>
    1560:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <raw_block_address+0x3>
    1564:	48 16       	cp	r4, r24
    1566:	59 06       	cpc	r5, r25
    1568:	6a 06       	cpc	r6, r26
    156a:	7b 06       	cpc	r7, r27
    156c:	01 f1       	breq	.+64     	; 0x15ae <sd_raw_write+0xcc>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    156e:	0e 94 b9 08 	call	0x1172	; 0x1172 <sd_raw_sync>
    1572:	88 23       	and	r24, r24
    1574:	09 f4       	brne	.+2      	; 0x1578 <sd_raw_write+0x96>
    1576:	6f c0       	rjmp	.+222    	; 0x1656 <sd_raw_write+0x174>
                return 0;
#endif

            if(block_offset || write_length < 512)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	9b 81       	ldd	r25, Y+3	; 0x03
    157c:	89 2b       	or	r24, r25
    157e:	21 f4       	brne	.+8      	; 0x1588 <sd_raw_write+0xa6>
    1580:	e1 14       	cp	r14, r1
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	f9 06       	cpc	r15, r25
    1586:	58 f4       	brcc	.+22     	; 0x159e <sd_raw_write+0xbc>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    1588:	20 e0       	ldi	r18, 0x00	; 0
    158a:	32 e0       	ldi	r19, 0x02	; 2
    158c:	48 ee       	ldi	r20, 0xE8	; 232
    158e:	51 e0       	ldi	r21, 0x01	; 1
    1590:	c3 01       	movw	r24, r6
    1592:	b2 01       	movw	r22, r4
    1594:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <sd_raw_read>
    1598:	88 23       	and	r24, r24
    159a:	09 f4       	brne	.+2      	; 0x159e <sd_raw_write+0xbc>
    159c:	5e c0       	rjmp	.+188    	; 0x165a <sd_raw_write+0x178>
                    return 0;
            }
            raw_block_address = block_address;
    159e:	40 92 e4 01 	sts	0x01E4, r4	; 0x8001e4 <raw_block_address>
    15a2:	50 92 e5 01 	sts	0x01E5, r5	; 0x8001e5 <raw_block_address+0x1>
    15a6:	60 92 e6 01 	sts	0x01E6, r6	; 0x8001e6 <raw_block_address+0x2>
    15aa:	70 92 e7 01 	sts	0x01E7, r7	; 0x8001e7 <raw_block_address+0x3>
        }

        if(buffer != raw_block)
    15ae:	e8 ee       	ldi	r30, 0xE8	; 232
    15b0:	2e 16       	cp	r2, r30
    15b2:	e1 e0       	ldi	r30, 0x01	; 1
    15b4:	3e 06       	cpc	r3, r30
    15b6:	71 f0       	breq	.+28     	; 0x15d4 <sd_raw_write+0xf2>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    15b8:	a7 01       	movw	r20, r14
    15ba:	b1 01       	movw	r22, r2
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	88 51       	subi	r24, 0x18	; 24
    15c2:	9e 4f       	sbci	r25, 0xFE	; 254
    15c4:	0e 94 a8 0b 	call	0x1750	; 0x1750 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    15c8:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <raw_block_written>

            if(length == write_length)
    15cc:	ec 14       	cp	r14, r12
    15ce:	fd 04       	cpc	r15, r13
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <sd_raw_write+0xf2>
    15d2:	45 c0       	rjmp	.+138    	; 0x165e <sd_raw_write+0x17c>
                return 1;
#endif
        }

        /* address card */
        select_card();
    15d4:	c0 98       	cbi	0x18, 0	; 24

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    15d6:	b3 01       	movw	r22, r6
    15d8:	a2 01       	movw	r20, r4
    15da:	88 e1       	ldi	r24, 0x18	; 24
    15dc:	0e 94 70 08 	call	0x10e0	; 0x10e0 <sd_raw_send_command>
    15e0:	88 23       	and	r24, r24
    15e2:	11 f0       	breq	.+4      	; 0x15e8 <sd_raw_write+0x106>
#endif
        {
            unselect_card();
    15e4:	c0 9a       	sbi	0x18, 0	; 24
            return 0;
    15e6:	3d c0       	rjmp	.+122    	; 0x1662 <sd_raw_write+0x180>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    15e8:	8e ef       	ldi	r24, 0xFE	; 254
    15ea:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
    15ee:	88 ee       	ldi	r24, 0xE8	; 232
    15f0:	91 e0       	ldi	r25, 0x01	; 1
    15f2:	9b 83       	std	Y+3, r25	; 0x03
    15f4:	8a 83       	std	Y+2, r24	; 0x02

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    15f6:	ea 81       	ldd	r30, Y+2	; 0x02
    15f8:	fb 81       	ldd	r31, Y+3	; 0x03
    15fa:	81 91       	ld	r24, Z+
    15fc:	fb 83       	std	Y+3, r31	; 0x03
    15fe:	ea 83       	std	Y+2, r30	; 0x02
    1600:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	9b 81       	ldd	r25, Y+3	; 0x03
    1608:	08 17       	cp	r16, r24
    160a:	19 07       	cpc	r17, r25
    160c:	a1 f7       	brne	.-24     	; 0x15f6 <sd_raw_write+0x114>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    160e:	8f ef       	ldi	r24, 0xFF	; 255
    1610:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    1614:	8f ef       	ldi	r24, 0xFF	; 255
    1616:	0e 94 64 08 	call	0x10c8	; 0x10c8 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    161a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>
    161e:	8f 3f       	cpi	r24, 0xFF	; 255
    1620:	e1 f7       	brne	.-8      	; 0x161a <sd_raw_write+0x138>
        sd_raw_rec_byte();
    1622:	0e 94 69 08 	call	0x10d2	; 0x10d2 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    1626:	c0 9a       	sbi	0x18, 0	; 24

        buffer += write_length;
    1628:	2e 0c       	add	r2, r14
    162a:	3f 1c       	adc	r3, r15
        offset += write_length;
    162c:	8e 0c       	add	r8, r14
    162e:	9f 1c       	adc	r9, r15
    1630:	a1 1c       	adc	r10, r1
    1632:	b1 1c       	adc	r11, r1
        length -= write_length;
    1634:	ce 18       	sub	r12, r14
    1636:	df 08       	sbc	r13, r15

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1638:	91 e0       	ldi	r25, 0x01	; 1
    163a:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    163e:	c1 14       	cp	r12, r1
    1640:	d1 04       	cpc	r13, r1
    1642:	09 f0       	breq	.+2      	; 0x1646 <sd_raw_write+0x164>
    1644:	73 cf       	rjmp	.-282    	; 0x152c <sd_raw_write+0x4a>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    1646:	e1 e0       	ldi	r30, 0x01	; 1
    1648:	e9 83       	std	Y+1, r30	; 0x01
    164a:	0b c0       	rjmp	.+22     	; 0x1662 <sd_raw_write+0x180>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    if(sd_raw_locked())
        return 0;
    164c:	19 82       	std	Y+1, r1	; 0x01
    164e:	09 c0       	rjmp	.+18     	; 0x1662 <sd_raw_write+0x180>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    1650:	f1 e0       	ldi	r31, 0x01	; 1
    1652:	f9 83       	std	Y+1, r31	; 0x01
    1654:	06 c0       	rjmp	.+12     	; 0x1662 <sd_raw_write+0x180>
         */
        if(block_address != raw_block_address)
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <sd_raw_write+0x180>
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <sd_raw_write+0x180>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	89 83       	std	Y+1, r24	; 0x01
        raw_block_written = 1;
#endif
    }

    return 1;
}
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	1f 91       	pop	r17
    1670:	0f 91       	pop	r16
    1672:	ff 90       	pop	r15
    1674:	ef 90       	pop	r14
    1676:	df 90       	pop	r13
    1678:	cf 90       	pop	r12
    167a:	bf 90       	pop	r11
    167c:	af 90       	pop	r10
    167e:	9f 90       	pop	r9
    1680:	8f 90       	pop	r8
    1682:	7f 90       	pop	r7
    1684:	6f 90       	pop	r6
    1686:	5f 90       	pop	r5
    1688:	4f 90       	pop	r4
    168a:	3f 90       	pop	r3
    168c:	2f 90       	pop	r2
    168e:	08 95       	ret

00001690 <__mulsi3>:
    1690:	db 01       	movw	r26, r22
    1692:	8f 93       	push	r24
    1694:	9f 93       	push	r25
    1696:	0e 94 9d 0b 	call	0x173a	; 0x173a <__muluhisi3>
    169a:	bf 91       	pop	r27
    169c:	af 91       	pop	r26
    169e:	a2 9f       	mul	r26, r18
    16a0:	80 0d       	add	r24, r0
    16a2:	91 1d       	adc	r25, r1
    16a4:	a3 9f       	mul	r26, r19
    16a6:	90 0d       	add	r25, r0
    16a8:	b2 9f       	mul	r27, r18
    16aa:	90 0d       	add	r25, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	08 95       	ret

000016b0 <__udivmodhi4>:
    16b0:	aa 1b       	sub	r26, r26
    16b2:	bb 1b       	sub	r27, r27
    16b4:	51 e1       	ldi	r21, 0x11	; 17
    16b6:	07 c0       	rjmp	.+14     	; 0x16c6 <__udivmodhi4_ep>

000016b8 <__udivmodhi4_loop>:
    16b8:	aa 1f       	adc	r26, r26
    16ba:	bb 1f       	adc	r27, r27
    16bc:	a6 17       	cp	r26, r22
    16be:	b7 07       	cpc	r27, r23
    16c0:	10 f0       	brcs	.+4      	; 0x16c6 <__udivmodhi4_ep>
    16c2:	a6 1b       	sub	r26, r22
    16c4:	b7 0b       	sbc	r27, r23

000016c6 <__udivmodhi4_ep>:
    16c6:	88 1f       	adc	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	5a 95       	dec	r21
    16cc:	a9 f7       	brne	.-22     	; 0x16b8 <__udivmodhi4_loop>
    16ce:	80 95       	com	r24
    16d0:	90 95       	com	r25
    16d2:	bc 01       	movw	r22, r24
    16d4:	cd 01       	movw	r24, r26
    16d6:	08 95       	ret

000016d8 <__udivmodsi4>:
    16d8:	a1 e2       	ldi	r26, 0x21	; 33
    16da:	1a 2e       	mov	r1, r26
    16dc:	aa 1b       	sub	r26, r26
    16de:	bb 1b       	sub	r27, r27
    16e0:	fd 01       	movw	r30, r26
    16e2:	0d c0       	rjmp	.+26     	; 0x16fe <__udivmodsi4_ep>

000016e4 <__udivmodsi4_loop>:
    16e4:	aa 1f       	adc	r26, r26
    16e6:	bb 1f       	adc	r27, r27
    16e8:	ee 1f       	adc	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	a2 17       	cp	r26, r18
    16ee:	b3 07       	cpc	r27, r19
    16f0:	e4 07       	cpc	r30, r20
    16f2:	f5 07       	cpc	r31, r21
    16f4:	20 f0       	brcs	.+8      	; 0x16fe <__udivmodsi4_ep>
    16f6:	a2 1b       	sub	r26, r18
    16f8:	b3 0b       	sbc	r27, r19
    16fa:	e4 0b       	sbc	r30, r20
    16fc:	f5 0b       	sbc	r31, r21

000016fe <__udivmodsi4_ep>:
    16fe:	66 1f       	adc	r22, r22
    1700:	77 1f       	adc	r23, r23
    1702:	88 1f       	adc	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	1a 94       	dec	r1
    1708:	69 f7       	brne	.-38     	; 0x16e4 <__udivmodsi4_loop>
    170a:	60 95       	com	r22
    170c:	70 95       	com	r23
    170e:	80 95       	com	r24
    1710:	90 95       	com	r25
    1712:	9b 01       	movw	r18, r22
    1714:	ac 01       	movw	r20, r24
    1716:	bd 01       	movw	r22, r26
    1718:	cf 01       	movw	r24, r30
    171a:	08 95       	ret

0000171c <__umulhisi3>:
    171c:	a2 9f       	mul	r26, r18
    171e:	b0 01       	movw	r22, r0
    1720:	b3 9f       	mul	r27, r19
    1722:	c0 01       	movw	r24, r0
    1724:	a3 9f       	mul	r26, r19
    1726:	70 0d       	add	r23, r0
    1728:	81 1d       	adc	r24, r1
    172a:	11 24       	eor	r1, r1
    172c:	91 1d       	adc	r25, r1
    172e:	b2 9f       	mul	r27, r18
    1730:	70 0d       	add	r23, r0
    1732:	81 1d       	adc	r24, r1
    1734:	11 24       	eor	r1, r1
    1736:	91 1d       	adc	r25, r1
    1738:	08 95       	ret

0000173a <__muluhisi3>:
    173a:	0e 94 8e 0b 	call	0x171c	; 0x171c <__umulhisi3>
    173e:	a5 9f       	mul	r26, r21
    1740:	90 0d       	add	r25, r0
    1742:	b4 9f       	mul	r27, r20
    1744:	90 0d       	add	r25, r0
    1746:	a4 9f       	mul	r26, r20
    1748:	80 0d       	add	r24, r0
    174a:	91 1d       	adc	r25, r1
    174c:	11 24       	eor	r1, r1
    174e:	08 95       	ret

00001750 <memcpy>:
    1750:	fb 01       	movw	r30, r22
    1752:	dc 01       	movw	r26, r24
    1754:	02 c0       	rjmp	.+4      	; 0x175a <memcpy+0xa>
    1756:	01 90       	ld	r0, Z+
    1758:	0d 92       	st	X+, r0
    175a:	41 50       	subi	r20, 0x01	; 1
    175c:	50 40       	sbci	r21, 0x00	; 0
    175e:	d8 f7       	brcc	.-10     	; 0x1756 <memcpy+0x6>
    1760:	08 95       	ret

00001762 <strchr>:
    1762:	fc 01       	movw	r30, r24
    1764:	81 91       	ld	r24, Z+
    1766:	86 17       	cp	r24, r22
    1768:	21 f0       	breq	.+8      	; 0x1772 <strchr+0x10>
    176a:	88 23       	and	r24, r24
    176c:	d9 f7       	brne	.-10     	; 0x1764 <strchr+0x2>
    176e:	99 27       	eor	r25, r25
    1770:	08 95       	ret
    1772:	31 97       	sbiw	r30, 0x01	; 1
    1774:	cf 01       	movw	r24, r30
    1776:	08 95       	ret

00001778 <strcmp>:
    1778:	fb 01       	movw	r30, r22
    177a:	dc 01       	movw	r26, r24
    177c:	8d 91       	ld	r24, X+
    177e:	01 90       	ld	r0, Z+
    1780:	80 19       	sub	r24, r0
    1782:	01 10       	cpse	r0, r1
    1784:	d9 f3       	breq	.-10     	; 0x177c <strcmp+0x4>
    1786:	99 0b       	sbc	r25, r25
    1788:	08 95       	ret

0000178a <strncmp>:
    178a:	fb 01       	movw	r30, r22
    178c:	dc 01       	movw	r26, r24
    178e:	41 50       	subi	r20, 0x01	; 1
    1790:	50 40       	sbci	r21, 0x00	; 0
    1792:	30 f0       	brcs	.+12     	; 0x17a0 <strncmp+0x16>
    1794:	8d 91       	ld	r24, X+
    1796:	01 90       	ld	r0, Z+
    1798:	80 19       	sub	r24, r0
    179a:	19 f4       	brne	.+6      	; 0x17a2 <strncmp+0x18>
    179c:	00 20       	and	r0, r0
    179e:	b9 f7       	brne	.-18     	; 0x178e <strncmp+0x4>
    17a0:	88 1b       	sub	r24, r24
    17a2:	99 0b       	sbc	r25, r25
    17a4:	08 95       	ret

000017a6 <_exit>:
    17a6:	f8 94       	cli

000017a8 <__stop_program>:
    17a8:	ff cf       	rjmp	.-2      	; 0x17a8 <__stop_program>
