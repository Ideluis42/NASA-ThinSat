
SDTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  00001790  00001824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c8  00800120  00800120  00001844  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000470b  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001273  00000000  00000000  000061cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002134  00000000  00000000  00007442  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000be8  00000000  00000000  00009578  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f80  00000000  00000000  0000a160  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000051e5  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  000102c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
       4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
       c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      64:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
      a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
      ac:	11 24       	eor	r1, r1
      ae:	1f be       	out	0x3f, r1	; 63
      b0:	cf ef       	ldi	r28, 0xFF	; 255
      b2:	da e0       	ldi	r29, 0x0A	; 10
      b4:	de bf       	out	0x3e, r29	; 62
      b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
      b8:	11 e0       	ldi	r17, 0x01	; 1
      ba:	a0 e0       	ldi	r26, 0x00	; 0
      bc:	b1 e0       	ldi	r27, 0x01	; 1
      be:	e0 e9       	ldi	r30, 0x90	; 144
      c0:	f7 e1       	ldi	r31, 0x17	; 23
      c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
      c4:	05 90       	lpm	r0, Z+
      c6:	0d 92       	st	X+, r0
      c8:	a0 32       	cpi	r26, 0x20	; 32
      ca:	b1 07       	cpc	r27, r17
      cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
      ce:	23 e0       	ldi	r18, 0x03	; 3
      d0:	a0 e2       	ldi	r26, 0x20	; 32
      d2:	b1 e0       	ldi	r27, 0x01	; 1
      d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
      d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
      d8:	a8 3e       	cpi	r26, 0xE8	; 232
      da:	b2 07       	cpc	r27, r18
      dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
      de:	0e 94 59 07 	call	0xeb2	; 0xeb2 <main>
      e2:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <_exit>

000000e6 <__bad_interrupt>:
      e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <read16>:
 * \param[in] p Pointer from where to read the integer.
 * \returns The 16-bit integer read from memory.
 */
uint16_t read16(const uint8_t* p)
{
    return (((uint16_t) p[1]) << 8) |
      ea:	fc 01       	movw	r30, r24
      ec:	21 81       	ldd	r18, Z+1	; 0x01
      ee:	30 e0       	ldi	r19, 0x00	; 0
      f0:	32 2f       	mov	r19, r18
      f2:	22 27       	eor	r18, r18
      f4:	80 81       	ld	r24, Z
           (((uint16_t) p[0]) << 0);
}
      f6:	a9 01       	movw	r20, r18
      f8:	48 2b       	or	r20, r24
      fa:	ca 01       	movw	r24, r20
      fc:	08 95       	ret

000000fe <read32>:
 *
 * \param[in] p Pointer from where to read the integer.
 * \returns The 32-bit integer read from memory.
 */
uint32_t read32(const uint8_t* p)
{
      fe:	fc 01       	movw	r30, r24
    return (((uint32_t) p[3]) << 24) |
     100:	23 81       	ldd	r18, Z+3	; 0x03
     102:	62 81       	ldd	r22, Z+2	; 0x02
     104:	86 2f       	mov	r24, r22
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	a0 e0       	ldi	r26, 0x00	; 0
     10a:	b0 e0       	ldi	r27, 0x00	; 0
     10c:	dc 01       	movw	r26, r24
     10e:	99 27       	eor	r25, r25
     110:	88 27       	eor	r24, r24
     112:	b2 2b       	or	r27, r18
     114:	20 81       	ld	r18, Z
     116:	82 2b       	or	r24, r18
     118:	21 81       	ldd	r18, Z+1	; 0x01
     11a:	bc 01       	movw	r22, r24
     11c:	cd 01       	movw	r24, r26
     11e:	72 2b       	or	r23, r18
           (((uint32_t) p[2]) << 16) |
           (((uint32_t) p[1]) <<  8) |
           (((uint32_t) p[0]) <<  0);
}
     120:	08 95       	ret

00000122 <fat_get_next_cluster>:
    fd->pos = new_pos;
    fd->pos_cluster = 0;

    *offset = (int32_t) new_pos;
    return 1;
}
     122:	0f 93       	push	r16
     124:	1f 93       	push	r17
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	00 d0       	rcall	.+0      	; 0x12c <fat_get_next_cluster+0xa>
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	00 97       	sbiw	r24, 0x00	; 0
     132:	81 f1       	breq	.+96     	; 0x194 <fat_get_next_cluster+0x72>
     134:	62 30       	cpi	r22, 0x02	; 2
     136:	71 05       	cpc	r23, r1
     138:	80 f1       	brcs	.+96     	; 0x19a <fat_get_next_cluster+0x78>
     13a:	fc 01       	movw	r30, r24
     13c:	ab 01       	movw	r20, r22
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	44 0f       	add	r20, r20
     144:	55 1f       	adc	r21, r21
     146:	66 1f       	adc	r22, r22
     148:	77 1f       	adc	r23, r23
     14a:	86 81       	ldd	r24, Z+6	; 0x06
     14c:	97 81       	ldd	r25, Z+7	; 0x07
     14e:	a0 85       	ldd	r26, Z+8	; 0x08
     150:	b1 85       	ldd	r27, Z+9	; 0x09
     152:	8a 01       	movw	r16, r20
     154:	9b 01       	movw	r18, r22
     156:	08 0f       	add	r16, r24
     158:	19 1f       	adc	r17, r25
     15a:	2a 1f       	adc	r18, r26
     15c:	3b 1f       	adc	r19, r27
     15e:	c9 01       	movw	r24, r18
     160:	b8 01       	movw	r22, r16
     162:	01 90       	ld	r0, Z+
     164:	f0 81       	ld	r31, Z
     166:	e0 2d       	mov	r30, r0
     168:	01 90       	ld	r0, Z+
     16a:	f0 81       	ld	r31, Z
     16c:	e0 2d       	mov	r30, r0
     16e:	22 e0       	ldi	r18, 0x02	; 2
     170:	30 e0       	ldi	r19, 0x00	; 0
     172:	ae 01       	movw	r20, r28
     174:	4f 5f       	subi	r20, 0xFF	; 255
     176:	5f 4f       	sbci	r21, 0xFF	; 255
     178:	09 95       	icall
     17a:	88 23       	and	r24, r24
     17c:	41 f0       	breq	.+16     	; 0x18e <fat_get_next_cluster+0x6c>
     17e:	89 81       	ldd	r24, Y+1	; 0x01
     180:	9a 81       	ldd	r25, Y+2	; 0x02
     182:	9c 01       	movw	r18, r24
     184:	21 50       	subi	r18, 0x01	; 1
     186:	31 09       	sbc	r19, r1
     188:	2f 3e       	cpi	r18, 0xEF	; 239
     18a:	3f 4f       	sbci	r19, 0xFF	; 255
     18c:	40 f0       	brcs	.+16     	; 0x19e <fat_get_next_cluster+0x7c>
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	05 c0       	rjmp	.+10     	; 0x19e <fat_get_next_cluster+0x7c>
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	90 e0       	ldi	r25, 0x00	; 0
     198:	02 c0       	rjmp	.+4      	; 0x19e <fat_get_next_cluster+0x7c>
     19a:	80 e0       	ldi	r24, 0x00	; 0
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	1f 91       	pop	r17
     1a8:	0f 91       	pop	r16
     1aa:	08 95       	ret

000001ac <fat_cluster_offset>:
     1ac:	0f 93       	push	r16
     1ae:	1f 93       	push	r17
     1b0:	fc 01       	movw	r30, r24
     1b2:	89 2b       	or	r24, r25
     1b4:	99 f0       	breq	.+38     	; 0x1dc <fat_cluster_offset+0x30>
     1b6:	62 30       	cpi	r22, 0x02	; 2
     1b8:	71 05       	cpc	r23, r1
     1ba:	a0 f0       	brcs	.+40     	; 0x1e4 <fat_cluster_offset+0x38>
     1bc:	9b 01       	movw	r18, r22
     1be:	22 50       	subi	r18, 0x02	; 2
     1c0:	31 09       	sbc	r19, r1
     1c2:	a0 89       	ldd	r26, Z+16	; 0x10
     1c4:	b1 89       	ldd	r27, Z+17	; 0x11
     1c6:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>
     1ca:	02 89       	ldd	r16, Z+18	; 0x12
     1cc:	13 89       	ldd	r17, Z+19	; 0x13
     1ce:	24 89       	ldd	r18, Z+20	; 0x14
     1d0:	35 89       	ldd	r19, Z+21	; 0x15
     1d2:	60 0f       	add	r22, r16
     1d4:	71 1f       	adc	r23, r17
     1d6:	82 1f       	adc	r24, r18
     1d8:	93 1f       	adc	r25, r19
     1da:	07 c0       	rjmp	.+14     	; 0x1ea <fat_cluster_offset+0x3e>
     1dc:	60 e0       	ldi	r22, 0x00	; 0
     1de:	70 e0       	ldi	r23, 0x00	; 0
     1e0:	cb 01       	movw	r24, r22
     1e2:	03 c0       	rjmp	.+6      	; 0x1ea <fat_cluster_offset+0x3e>
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	70 e0       	ldi	r23, 0x00	; 0
     1e8:	cb 01       	movw	r24, r22
     1ea:	1f 91       	pop	r17
     1ec:	0f 91       	pop	r16
     1ee:	08 95       	ret

000001f0 <fat_calc_83_checksum>:
     1f0:	9c 01       	movw	r18, r24
     1f2:	fc 01       	movw	r30, r24
     1f4:	81 91       	ld	r24, Z+
     1f6:	25 5f       	subi	r18, 0xF5	; 245
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	80 fb       	bst	r24, 0
     1fc:	87 95       	ror	r24
     1fe:	87 f9       	bld	r24, 7
     200:	91 91       	ld	r25, Z+
     202:	89 0f       	add	r24, r25
     204:	e2 17       	cp	r30, r18
     206:	f3 07       	cpc	r31, r19
     208:	c1 f7       	brne	.-16     	; 0x1fa <fat_calc_83_checksum+0xa>
     20a:	08 95       	ret

0000020c <fat_dir_entry_read_callback>:
     20c:	4f 92       	push	r4
     20e:	5f 92       	push	r5
     210:	6f 92       	push	r6
     212:	7f 92       	push	r7
     214:	af 92       	push	r10
     216:	bf 92       	push	r11
     218:	cf 92       	push	r12
     21a:	df 92       	push	r13
     21c:	ef 92       	push	r14
     21e:	ff 92       	push	r15
     220:	0f 93       	push	r16
     222:	1f 93       	push	r17
     224:	cf 93       	push	r28
     226:	df 93       	push	r29
     228:	cd b7       	in	r28, 0x3d	; 61
     22a:	de b7       	in	r29, 0x3e	; 62
     22c:	2d 97       	sbiw	r28, 0x0d	; 13
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	f9 01       	movw	r30, r18
     23a:	c0 80       	ld	r12, Z
     23c:	d1 80       	ldd	r13, Z+1	; 0x01
     23e:	22 81       	ldd	r18, Z+2	; 0x02
     240:	33 81       	ldd	r19, Z+3	; 0x03
     242:	20 5e       	subi	r18, 0xE0	; 224
     244:	3f 4f       	sbci	r19, 0xFF	; 255
     246:	33 83       	std	Z+3, r19	; 0x03
     248:	22 83       	std	Z+2, r18	; 0x02
     24a:	dc 01       	movw	r26, r24
     24c:	2c 91       	ld	r18, X
     24e:	25 3e       	cpi	r18, 0xE5	; 229
     250:	11 f0       	breq	.+4      	; 0x256 <fat_dir_entry_read_callback+0x4a>
     252:	21 11       	cpse	r18, r1
     254:	03 c0       	rjmp	.+6      	; 0x25c <fat_dir_entry_read_callback+0x50>
     256:	14 82       	std	Z+4, r1	; 0x04
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	fa c0       	rjmp	.+500    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     25c:	56 01       	movw	r10, r12
     25e:	dc 01       	movw	r26, r24
     260:	1b 96       	adiw	r26, 0x0b	; 11
     262:	2c 91       	ld	r18, X
     264:	1b 97       	sbiw	r26, 0x0b	; 11
     266:	2f 30       	cpi	r18, 0x0F	; 15
     268:	09 f0       	breq	.+2      	; 0x26c <fat_dir_entry_read_callback+0x60>
     26a:	40 c0       	rjmp	.+128    	; 0x2ec <fat_dir_entry_read_callback+0xe0>
     26c:	24 81       	ldd	r18, Z+4	; 0x04
     26e:	22 23       	and	r18, r18
     270:	21 f0       	breq	.+8      	; 0x27a <fat_dir_entry_read_callback+0x6e>
     272:	1d 96       	adiw	r26, 0x0d	; 13
     274:	3c 91       	ld	r19, X
     276:	23 17       	cp	r18, r19
     278:	71 f0       	breq	.+28     	; 0x296 <fat_dir_entry_read_callback+0x8a>
     27a:	2b e2       	ldi	r18, 0x2B	; 43
     27c:	d6 01       	movw	r26, r12
     27e:	1d 92       	st	X+, r1
     280:	2a 95       	dec	r18
     282:	e9 f7       	brne	.-6      	; 0x27e <fat_dir_entry_read_callback+0x72>
     284:	dc 01       	movw	r26, r24
     286:	1d 96       	adiw	r26, 0x0d	; 13
     288:	2c 91       	ld	r18, X
     28a:	24 83       	std	Z+4, r18	; 0x04
     28c:	f6 01       	movw	r30, r12
     28e:	47 a3       	std	Z+39, r20	; 0x27
     290:	50 a7       	std	Z+40, r21	; 0x28
     292:	61 a7       	std	Z+41, r22	; 0x29
     294:	72 a7       	std	Z+42, r23	; 0x2a
     296:	dc 01       	movw	r26, r24
     298:	2c 91       	ld	r18, X
     29a:	2f 73       	andi	r18, 0x3F	; 63
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	21 50       	subi	r18, 0x01	; 1
     2a0:	31 09       	sbc	r19, r1
     2a2:	4d e0       	ldi	r20, 0x0D	; 13
     2a4:	42 9f       	mul	r20, r18
     2a6:	b0 01       	movw	r22, r0
     2a8:	43 9f       	mul	r20, r19
     2aa:	70 0d       	add	r23, r0
     2ac:	11 24       	eor	r1, r1
     2ae:	2d e0       	ldi	r18, 0x0D	; 13
     2b0:	e0 e0       	ldi	r30, 0x00	; 0
     2b2:	f1 e0       	ldi	r31, 0x01	; 1
     2b4:	de 01       	movw	r26, r28
     2b6:	11 96       	adiw	r26, 0x01	; 1
     2b8:	01 90       	ld	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	2a 95       	dec	r18
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <fat_dir_entry_read_callback+0xac>
     2c0:	6f 31       	cpi	r22, 0x1F	; 31
     2c2:	71 05       	cpc	r23, r1
     2c4:	08 f4       	brcc	.+2      	; 0x2c8 <fat_dir_entry_read_callback+0xbc>
     2c6:	a7 c0       	rjmp	.+334    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     2c8:	0f c0       	rjmp	.+30     	; 0x2e8 <fat_dir_entry_read_callback+0xdc>
     2ca:	21 91       	ld	r18, Z+
     2cc:	8c 01       	movw	r16, r24
     2ce:	02 0f       	add	r16, r18
     2d0:	11 1d       	adc	r17, r1
     2d2:	d8 01       	movw	r26, r16
     2d4:	2c 91       	ld	r18, X
     2d6:	d6 01       	movw	r26, r12
     2d8:	2d 93       	st	X+, r18
     2da:	6d 01       	movw	r12, r26
     2dc:	e6 17       	cp	r30, r22
     2de:	f7 07       	cpc	r31, r23
     2e0:	19 f0       	breq	.+6      	; 0x2e8 <fat_dir_entry_read_callback+0xdc>
     2e2:	e4 17       	cp	r30, r20
     2e4:	f5 07       	cpc	r31, r21
     2e6:	89 f7       	brne	.-30     	; 0x2ca <fat_dir_entry_read_callback+0xbe>
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	b2 c0       	rjmp	.+356    	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     2ec:	7f 01       	movw	r14, r30
     2ee:	2a 01       	movw	r4, r20
     2f0:	3b 01       	movw	r6, r22
     2f2:	8c 01       	movw	r16, r24
     2f4:	f6 01       	movw	r30, r12
     2f6:	80 81       	ld	r24, Z
     2f8:	88 23       	and	r24, r24
     2fa:	49 f0       	breq	.+18     	; 0x30e <fat_dir_entry_read_callback+0x102>
     2fc:	cd 01       	movw	r24, r26
     2fe:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <fat_calc_83_checksum>
     302:	d7 01       	movw	r26, r14
     304:	14 96       	adiw	r26, 0x04	; 4
     306:	9c 91       	ld	r25, X
     308:	98 17       	cp	r25, r24
     30a:	09 f4       	brne	.+2      	; 0x30e <fat_dir_entry_read_callback+0x102>
     30c:	68 c0       	rjmp	.+208    	; 0x3de <fat_dir_entry_read_callback+0x1d2>
     30e:	8b e2       	ldi	r24, 0x2B	; 43
     310:	f6 01       	movw	r30, r12
     312:	11 92       	st	Z+, r1
     314:	8a 95       	dec	r24
     316:	e9 f7       	brne	.-6      	; 0x312 <fat_dir_entry_read_callback+0x106>
     318:	d6 01       	movw	r26, r12
     31a:	97 96       	adiw	r26, 0x27	; 39
     31c:	4d 92       	st	X+, r4
     31e:	5d 92       	st	X+, r5
     320:	6d 92       	st	X+, r6
     322:	7c 92       	st	X, r7
     324:	9a 97       	sbiw	r26, 0x2a	; 42
     326:	f8 01       	movw	r30, r16
     328:	90 81       	ld	r25, Z
     32a:	90 32       	cpi	r25, 0x20	; 32
     32c:	e9 f0       	breq	.+58     	; 0x368 <fat_dir_entry_read_callback+0x15c>
     32e:	a6 01       	movw	r20, r12
     330:	80 e0       	ldi	r24, 0x00	; 0
     332:	04 c0       	rjmp	.+8      	; 0x33c <fat_dir_entry_read_callback+0x130>
     334:	31 96       	adiw	r30, 0x01	; 1
     336:	90 81       	ld	r25, Z
     338:	90 32       	cpi	r25, 0x20	; 32
     33a:	b9 f0       	breq	.+46     	; 0x36a <fat_dir_entry_read_callback+0x15e>
     33c:	da 01       	movw	r26, r20
     33e:	9d 93       	st	X+, r25
     340:	ad 01       	movw	r20, r26
     342:	d8 01       	movw	r26, r16
     344:	1c 96       	adiw	r26, 0x0c	; 12
     346:	2c 91       	ld	r18, X
     348:	23 ff       	sbrs	r18, 3
     34a:	0a c0       	rjmp	.+20     	; 0x360 <fat_dir_entry_read_callback+0x154>
     34c:	20 81       	ld	r18, Z
     34e:	21 54       	subi	r18, 0x41	; 65
     350:	2a 31       	cpi	r18, 0x1A	; 26
     352:	30 f4       	brcc	.+12     	; 0x360 <fat_dir_entry_read_callback+0x154>
     354:	9a 01       	movw	r18, r20
     356:	21 50       	subi	r18, 0x01	; 1
     358:	31 09       	sbc	r19, r1
     35a:	90 5e       	subi	r25, 0xE0	; 224
     35c:	d9 01       	movw	r26, r18
     35e:	9c 93       	st	X, r25
     360:	8f 5f       	subi	r24, 0xFF	; 255
     362:	88 30       	cpi	r24, 0x08	; 8
     364:	39 f7       	brne	.-50     	; 0x334 <fat_dir_entry_read_callback+0x128>
     366:	01 c0       	rjmp	.+2      	; 0x36a <fat_dir_entry_read_callback+0x15e>
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	f6 01       	movw	r30, r12
     36c:	90 81       	ld	r25, Z
     36e:	95 30       	cpi	r25, 0x05	; 5
     370:	11 f4       	brne	.+4      	; 0x376 <fat_dir_entry_read_callback+0x16a>
     372:	95 ee       	ldi	r25, 0xE5	; 229
     374:	90 83       	st	Z, r25
     376:	d8 01       	movw	r26, r16
     378:	18 96       	adiw	r26, 0x08	; 8
     37a:	9c 91       	ld	r25, X
     37c:	18 97       	sbiw	r26, 0x08	; 8
     37e:	90 32       	cpi	r25, 0x20	; 32
     380:	51 f1       	breq	.+84     	; 0x3d6 <fat_dir_entry_read_callback+0x1ca>
     382:	91 e0       	ldi	r25, 0x01	; 1
     384:	98 0f       	add	r25, r24
     386:	2e e2       	ldi	r18, 0x2E	; 46
     388:	f6 01       	movw	r30, r12
     38a:	e8 0f       	add	r30, r24
     38c:	f1 1d       	adc	r31, r1
     38e:	20 83       	st	Z, r18
     390:	18 96       	adiw	r26, 0x08	; 8
     392:	2c 91       	ld	r18, X
     394:	20 32       	cpi	r18, 0x20	; 32
     396:	e1 f0       	breq	.+56     	; 0x3d0 <fat_dir_entry_read_callback+0x1c4>
     398:	f8 01       	movw	r30, r16
     39a:	8c 5f       	subi	r24, 0xFC	; 252
     39c:	04 c0       	rjmp	.+8      	; 0x3a6 <fat_dir_entry_read_callback+0x19a>
     39e:	31 96       	adiw	r30, 0x01	; 1
     3a0:	20 85       	ldd	r18, Z+8	; 0x08
     3a2:	20 32       	cpi	r18, 0x20	; 32
     3a4:	b9 f0       	breq	.+46     	; 0x3d4 <fat_dir_entry_read_callback+0x1c8>
     3a6:	a5 01       	movw	r20, r10
     3a8:	49 0f       	add	r20, r25
     3aa:	51 1d       	adc	r21, r1
     3ac:	da 01       	movw	r26, r20
     3ae:	2c 93       	st	X, r18
     3b0:	d8 01       	movw	r26, r16
     3b2:	1c 96       	adiw	r26, 0x0c	; 12
     3b4:	3c 91       	ld	r19, X
     3b6:	34 ff       	sbrs	r19, 4
     3b8:	07 c0       	rjmp	.+14     	; 0x3c8 <fat_dir_entry_read_callback+0x1bc>
     3ba:	30 85       	ldd	r19, Z+8	; 0x08
     3bc:	31 54       	subi	r19, 0x41	; 65
     3be:	3a 31       	cpi	r19, 0x1A	; 26
     3c0:	18 f4       	brcc	.+6      	; 0x3c8 <fat_dir_entry_read_callback+0x1bc>
     3c2:	20 5e       	subi	r18, 0xE0	; 224
     3c4:	da 01       	movw	r26, r20
     3c6:	2c 93       	st	X, r18
     3c8:	9f 5f       	subi	r25, 0xFF	; 255
     3ca:	98 13       	cpse	r25, r24
     3cc:	e8 cf       	rjmp	.-48     	; 0x39e <fat_dir_entry_read_callback+0x192>
     3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <fat_dir_entry_read_callback+0x1ca>
     3d0:	89 2f       	mov	r24, r25
     3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <fat_dir_entry_read_callback+0x1ca>
     3d4:	89 2f       	mov	r24, r25
     3d6:	f6 01       	movw	r30, r12
     3d8:	e8 0f       	add	r30, r24
     3da:	f1 1d       	adc	r31, r1
     3dc:	10 82       	st	Z, r1
     3de:	f8 01       	movw	r30, r16
     3e0:	83 85       	ldd	r24, Z+11	; 0x0b
     3e2:	d6 01       	movw	r26, r12
     3e4:	90 96       	adiw	r26, 0x20	; 32
     3e6:	8c 93       	st	X, r24
     3e8:	c8 01       	movw	r24, r16
     3ea:	4a 96       	adiw	r24, 0x1a	; 26
     3ec:	0e 94 75 00 	call	0xea	; 0xea <read16>
     3f0:	f6 01       	movw	r30, r12
     3f2:	92 a3       	std	Z+34, r25	; 0x22
     3f4:	81 a3       	std	Z+33, r24	; 0x21
     3f6:	c8 01       	movw	r24, r16
     3f8:	4c 96       	adiw	r24, 0x1c	; 28
     3fa:	0e 94 7f 00 	call	0xfe	; 0xfe <read32>
     3fe:	d6 01       	movw	r26, r12
     400:	93 96       	adiw	r26, 0x23	; 35
     402:	6d 93       	st	X+, r22
     404:	7d 93       	st	X+, r23
     406:	8d 93       	st	X+, r24
     408:	9c 93       	st	X, r25
     40a:	96 97       	sbiw	r26, 0x26	; 38
     40c:	81 e0       	ldi	r24, 0x01	; 1
     40e:	f7 01       	movw	r30, r14
     410:	85 83       	std	Z+5, r24	; 0x05
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	1d c0       	rjmp	.+58     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     416:	29 81       	ldd	r18, Y+1	; 0x01
     418:	fc 01       	movw	r30, r24
     41a:	e2 0f       	add	r30, r18
     41c:	f1 1d       	adc	r31, r1
     41e:	20 81       	ld	r18, Z
     420:	f6 01       	movw	r30, r12
     422:	e6 0f       	add	r30, r22
     424:	f7 1f       	adc	r31, r23
     426:	20 83       	st	Z, r18
     428:	fe 01       	movw	r30, r28
     42a:	32 96       	adiw	r30, 0x02	; 2
     42c:	db 01       	movw	r26, r22
     42e:	11 96       	adiw	r26, 0x01	; 1
     430:	ca 0e       	add	r12, r26
     432:	db 1e       	adc	r13, r27
     434:	4f e1       	ldi	r20, 0x1F	; 31
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	46 1b       	sub	r20, r22
     43a:	57 0b       	sbc	r21, r23
     43c:	01 e0       	ldi	r16, 0x01	; 1
     43e:	10 e0       	ldi	r17, 0x00	; 0
     440:	0c 0f       	add	r16, r28
     442:	1d 1f       	adc	r17, r29
     444:	40 0f       	add	r20, r16
     446:	51 1f       	adc	r21, r17
     448:	be 01       	movw	r22, r28
     44a:	62 5f       	subi	r22, 0xF2	; 242
     44c:	7f 4f       	sbci	r23, 0xFF	; 255
     44e:	49 cf       	rjmp	.-366    	; 0x2e2 <fat_dir_entry_read_callback+0xd6>
     450:	2d 96       	adiw	r28, 0x0d	; 13
     452:	0f b6       	in	r0, 0x3f	; 63
     454:	f8 94       	cli
     456:	de bf       	out	0x3e, r29	; 62
     458:	0f be       	out	0x3f, r0	; 63
     45a:	cd bf       	out	0x3d, r28	; 61
     45c:	df 91       	pop	r29
     45e:	cf 91       	pop	r28
     460:	1f 91       	pop	r17
     462:	0f 91       	pop	r16
     464:	ff 90       	pop	r15
     466:	ef 90       	pop	r14
     468:	df 90       	pop	r13
     46a:	cf 90       	pop	r12
     46c:	bf 90       	pop	r11
     46e:	af 90       	pop	r10
     470:	7f 90       	pop	r7
     472:	6f 90       	pop	r6
     474:	5f 90       	pop	r5
     476:	4f 90       	pop	r4
     478:	08 95       	ret

0000047a <fat_open>:
     47a:	2f 92       	push	r2
     47c:	3f 92       	push	r3
     47e:	4f 92       	push	r4
     480:	5f 92       	push	r5
     482:	6f 92       	push	r6
     484:	7f 92       	push	r7
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	a8 97       	sbiw	r28, 0x28	; 40
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	00 97       	sbiw	r24, 0x00	; 0
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <fat_open+0x3a>
     4b2:	36 c1       	rjmp	.+620    	; 0x720 <fat_open+0x2a6>
     4b4:	dc 01       	movw	r26, r24
     4b6:	14 96       	adiw	r26, 0x04	; 4
     4b8:	2d 91       	ld	r18, X+
     4ba:	3c 91       	ld	r19, X
     4bc:	15 97       	sbiw	r26, 0x05	; 5
     4be:	23 2b       	or	r18, r19
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <fat_open+0x4a>
     4c2:	31 c1       	rjmp	.+610    	; 0x726 <fat_open+0x2ac>
     4c4:	16 96       	adiw	r26, 0x06	; 6
     4c6:	2d 91       	ld	r18, X+
     4c8:	3c 91       	ld	r19, X
     4ca:	17 97       	sbiw	r26, 0x07	; 7
     4cc:	23 2b       	or	r18, r19
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <fat_open+0x58>
     4d0:	2d c1       	rjmp	.+602    	; 0x72c <fat_open+0x2b2>
     4d2:	20 91 b5 01 	lds	r18, 0x01B5	; 0x8001b5 <fat_fs_handles>
     4d6:	30 91 b6 01 	lds	r19, 0x01B6	; 0x8001b6 <fat_fs_handles+0x1>
     4da:	23 2b       	or	r18, r19
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <fat_open+0x66>
     4de:	29 c1       	rjmp	.+594    	; 0x732 <fat_open+0x2b8>
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	55 c1       	rjmp	.+682    	; 0x790 <fat_open+0x316>
     4e6:	ce 01       	movw	r24, r28
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	0e 94 75 00 	call	0xea	; 0xea <read16>
     4ee:	1c 01       	movw	r2, r24
     4f0:	ce 01       	movw	r24, r28
     4f2:	04 96       	adiw	r24, 0x04	; 4
     4f4:	0e 94 75 00 	call	0xea	; 0xea <read16>
     4f8:	9b 8f       	std	Y+27, r25	; 0x1b
     4fa:	8a 8f       	std	Y+26, r24	; 0x1a
     4fc:	bb 81       	ldd	r27, Y+3	; 0x03
     4fe:	be a3       	std	Y+38, r27	; 0x26
     500:	ee 81       	ldd	r30, Y+6	; 0x06
     502:	ee 8f       	std	Y+30, r30	; 0x1e
     504:	ce 01       	movw	r24, r28
     506:	07 96       	adiw	r24, 0x07	; 7
     508:	0e 94 75 00 	call	0xea	; 0xea <read16>
     50c:	98 a7       	std	Y+40, r25	; 0x28
     50e:	8f a3       	std	Y+39, r24	; 0x27
     510:	ce 01       	movw	r24, r28
     512:	09 96       	adiw	r24, 0x09	; 9
     514:	0e 94 75 00 	call	0xea	; 0xea <read16>
     518:	7c 01       	movw	r14, r24
     51a:	ce 01       	movw	r24, r28
     51c:	0c 96       	adiw	r24, 0x0c	; 12
     51e:	0e 94 75 00 	call	0xea	; 0xea <read16>
     522:	6c 01       	movw	r12, r24
     524:	ce 01       	movw	r24, r28
     526:	46 96       	adiw	r24, 0x16	; 22
     528:	0e 94 7f 00 	call	0xfe	; 0xfe <read32>
     52c:	2b 01       	movw	r4, r22
     52e:	3c 01       	movw	r6, r24
     530:	67 2b       	or	r22, r23
     532:	68 2b       	or	r22, r24
     534:	69 2b       	or	r22, r25
     536:	39 f4       	brne	.+14     	; 0x546 <fat_open+0xcc>
     538:	e1 14       	cp	r14, r1
     53a:	f1 04       	cpc	r15, r1
     53c:	09 f4       	brne	.+2      	; 0x540 <fat_open+0xc6>
     53e:	22 c1       	rjmp	.+580    	; 0x784 <fat_open+0x30a>
     540:	27 01       	movw	r4, r14
     542:	61 2c       	mov	r6, r1
     544:	71 2c       	mov	r7, r1
     546:	c1 14       	cp	r12, r1
     548:	d1 04       	cpc	r13, r1
     54a:	09 f4       	brne	.+2      	; 0x54e <fat_open+0xd4>
     54c:	1b c1       	rjmp	.+566    	; 0x784 <fat_open+0x30a>
     54e:	4a 8d       	ldd	r20, Y+26	; 0x1a
     550:	5b 8d       	ldd	r21, Y+27	; 0x1b
     552:	9a 01       	movw	r18, r20
     554:	40 e0       	ldi	r20, 0x00	; 0
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	2a 8f       	std	Y+26, r18	; 0x1a
     55a:	3b 8f       	std	Y+27, r19	; 0x1b
     55c:	4c 8f       	std	Y+28, r20	; 0x1c
     55e:	5d 8f       	std	Y+29, r21	; 0x1d
     560:	96 01       	movw	r18, r12
     562:	5e 8d       	ldd	r21, Y+30	; 0x1e
     564:	a5 2f       	mov	r26, r21
     566:	b0 e0       	ldi	r27, 0x00	; 0
     568:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>
     56c:	6e 8f       	std	Y+30, r22	; 0x1e
     56e:	7f 8f       	std	Y+31, r23	; 0x1f
     570:	88 a3       	std	Y+32, r24	; 0x20
     572:	99 a3       	std	Y+33, r25	; 0x21
     574:	73 01       	movw	r14, r6
     576:	62 01       	movw	r12, r4
     578:	8a 8d       	ldd	r24, Y+26	; 0x1a
     57a:	9b 8d       	ldd	r25, Y+27	; 0x1b
     57c:	ac 8d       	ldd	r26, Y+28	; 0x1c
     57e:	bd 8d       	ldd	r27, Y+29	; 0x1d
     580:	c8 1a       	sub	r12, r24
     582:	d9 0a       	sbc	r13, r25
     584:	ea 0a       	sbc	r14, r26
     586:	fb 0a       	sbc	r15, r27
     588:	2e 8d       	ldd	r18, Y+30	; 0x1e
     58a:	3f 8d       	ldd	r19, Y+31	; 0x1f
     58c:	48 a1       	ldd	r20, Y+32	; 0x20
     58e:	59 a1       	ldd	r21, Y+33	; 0x21
     590:	c2 1a       	sub	r12, r18
     592:	d3 0a       	sbc	r13, r19
     594:	e4 0a       	sbc	r14, r20
     596:	f5 0a       	sbc	r15, r21
     598:	c1 01       	movw	r24, r2
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	2f a1       	ldd	r18, Y+39	; 0x27
     59e:	38 a5       	ldd	r19, Y+40	; 0x28
     5a0:	22 0f       	add	r18, r18
     5a2:	33 1f       	adc	r19, r19
     5a4:	22 95       	swap	r18
     5a6:	32 95       	swap	r19
     5a8:	30 7f       	andi	r19, 0xF0	; 240
     5aa:	32 27       	eor	r19, r18
     5ac:	20 7f       	andi	r18, 0xF0	; 240
     5ae:	32 27       	eor	r19, r18
     5b0:	82 0f       	add	r24, r18
     5b2:	93 1f       	adc	r25, r19
     5b4:	b1 01       	movw	r22, r2
     5b6:	0e 94 4b 0b 	call	0x1696	; 0x1696 <__udivmodhi4>
     5ba:	a7 01       	movw	r20, r14
     5bc:	96 01       	movw	r18, r12
     5be:	26 1b       	sub	r18, r22
     5c0:	37 0b       	sbc	r19, r23
     5c2:	41 09       	sbc	r20, r1
     5c4:	51 09       	sbc	r21, r1
     5c6:	ca 01       	movw	r24, r20
     5c8:	b9 01       	movw	r22, r18
     5ca:	3e a1       	ldd	r19, Y+38	; 0x26
     5cc:	c3 2e       	mov	r12, r19
     5ce:	d1 2c       	mov	r13, r1
     5d0:	e1 2c       	mov	r14, r1
     5d2:	f1 2c       	mov	r15, r1
     5d4:	a7 01       	movw	r20, r14
     5d6:	96 01       	movw	r18, r12
     5d8:	0e 94 5f 0b 	call	0x16be	; 0x16be <__udivmodsi4>
     5dc:	69 01       	movw	r12, r18
     5de:	7a 01       	movw	r14, r20
     5e0:	45 ef       	ldi	r20, 0xF5	; 245
     5e2:	c4 16       	cp	r12, r20
     5e4:	4f e0       	ldi	r20, 0x0F	; 15
     5e6:	d4 06       	cpc	r13, r20
     5e8:	e1 04       	cpc	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	08 f4       	brcc	.+2      	; 0x5f0 <fat_open+0x176>
     5ee:	ca c0       	rjmp	.+404    	; 0x784 <fat_open+0x30a>
     5f0:	55 ef       	ldi	r21, 0xF5	; 245
     5f2:	c5 16       	cp	r12, r21
     5f4:	5f ef       	ldi	r21, 0xFF	; 255
     5f6:	d5 06       	cpc	r13, r21
     5f8:	e1 04       	cpc	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	28 f4       	brcc	.+10     	; 0x608 <fat_open+0x18e>
     5fe:	86 e0       	ldi	r24, 0x06	; 6
     600:	d8 01       	movw	r26, r16
     602:	18 96       	adiw	r26, 0x08	; 8
     604:	8c 93       	st	X, r24
     606:	03 c0       	rjmp	.+6      	; 0x60e <fat_open+0x194>
     608:	8b e0       	ldi	r24, 0x0B	; 11
     60a:	f8 01       	movw	r30, r16
     60c:	80 87       	std	Z+8, r24	; 0x08
     60e:	88 e1       	ldi	r24, 0x18	; 24
     610:	e7 eb       	ldi	r30, 0xB7	; 183
     612:	f1 e0       	ldi	r31, 0x01	; 1
     614:	df 01       	movw	r26, r30
     616:	1d 92       	st	X+, r1
     618:	8a 95       	dec	r24
     61a:	e9 f7       	brne	.-6      	; 0x616 <fat_open+0x19c>
     61c:	91 01       	movw	r18, r2
     61e:	40 e0       	ldi	r20, 0x00	; 0
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	2a a3       	std	Y+34, r18	; 0x22
     624:	3b a3       	std	Y+35, r19	; 0x23
     626:	4c a3       	std	Y+36, r20	; 0x24
     628:	5d a3       	std	Y+37, r21	; 0x25
     62a:	e5 eb       	ldi	r30, 0xB5	; 181
     62c:	f1 e0       	ldi	r31, 0x01	; 1
     62e:	a3 01       	movw	r20, r6
     630:	92 01       	movw	r18, r4
     632:	6a a1       	ldd	r22, Y+34	; 0x22
     634:	7b a1       	ldd	r23, Y+35	; 0x23
     636:	8c a1       	ldd	r24, Y+36	; 0x24
     638:	9d a1       	ldd	r25, Y+37	; 0x25
     63a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsi3>
     63e:	62 83       	std	Z+2, r22	; 0x02
     640:	73 83       	std	Z+3, r23	; 0x03
     642:	84 83       	std	Z+4, r24	; 0x04
     644:	95 83       	std	Z+5, r25	; 0x05
     646:	2a 8d       	ldd	r18, Y+26	; 0x1a
     648:	3b 8d       	ldd	r19, Y+27	; 0x1b
     64a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     64c:	5d 8d       	ldd	r21, Y+29	; 0x1d
     64e:	6a a1       	ldd	r22, Y+34	; 0x22
     650:	7b a1       	ldd	r23, Y+35	; 0x23
     652:	8c a1       	ldd	r24, Y+36	; 0x24
     654:	9d a1       	ldd	r25, Y+37	; 0x25
     656:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsi3>
     65a:	86 0e       	add	r8, r22
     65c:	97 1e       	adc	r9, r23
     65e:	a8 1e       	adc	r10, r24
     660:	b9 1e       	adc	r11, r25
     662:	86 82       	std	Z+6, r8	; 0x06
     664:	97 82       	std	Z+7, r9	; 0x07
     666:	a0 86       	std	Z+8, r10	; 0x08
     668:	b1 86       	std	Z+9, r11	; 0x09
     66a:	a7 01       	movw	r20, r14
     66c:	96 01       	movw	r18, r12
     66e:	2e 5f       	subi	r18, 0xFE	; 254
     670:	3f 4f       	sbci	r19, 0xFF	; 255
     672:	4f 4f       	sbci	r20, 0xFF	; 255
     674:	5f 4f       	sbci	r21, 0xFF	; 255
     676:	d8 01       	movw	r26, r16
     678:	18 96       	adiw	r26, 0x08	; 8
     67a:	8c 91       	ld	r24, X
     67c:	86 30       	cpi	r24, 0x06	; 6
     67e:	29 f0       	breq	.+10     	; 0x68a <fat_open+0x210>
     680:	64 e0       	ldi	r22, 0x04	; 4
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	04 c0       	rjmp	.+8      	; 0x692 <fat_open+0x218>
     68a:	62 e0       	ldi	r22, 0x02	; 2
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	e5 eb       	ldi	r30, 0xB5	; 181
     694:	f1 e0       	ldi	r31, 0x01	; 1
     696:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsi3>
     69a:	62 87       	std	Z+10, r22	; 0x0a
     69c:	73 87       	std	Z+11, r23	; 0x0b
     69e:	84 87       	std	Z+12, r24	; 0x0c
     6a0:	95 87       	std	Z+13, r25	; 0x0d
     6a2:	37 86       	std	Z+15, r3	; 0x0f
     6a4:	26 86       	std	Z+14, r2	; 0x0e
     6a6:	be a1       	ldd	r27, Y+38	; 0x26
     6a8:	b2 9d       	mul	r27, r2
     6aa:	c0 01       	movw	r24, r0
     6ac:	b3 9d       	mul	r27, r3
     6ae:	90 0d       	add	r25, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	91 8b       	std	Z+17, r25	; 0x11
     6b4:	80 8b       	std	Z+16, r24	; 0x10
     6b6:	2e 8d       	ldd	r18, Y+30	; 0x1e
     6b8:	3f 8d       	ldd	r19, Y+31	; 0x1f
     6ba:	48 a1       	ldd	r20, Y+32	; 0x20
     6bc:	59 a1       	ldd	r21, Y+33	; 0x21
     6be:	6a a1       	ldd	r22, Y+34	; 0x22
     6c0:	7b a1       	ldd	r23, Y+35	; 0x23
     6c2:	8c a1       	ldd	r24, Y+36	; 0x24
     6c4:	9d a1       	ldd	r25, Y+37	; 0x25
     6c6:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__mulsi3>
     6ca:	86 0e       	add	r8, r22
     6cc:	97 1e       	adc	r9, r23
     6ce:	a8 1e       	adc	r10, r24
     6d0:	b9 1e       	adc	r11, r25
     6d2:	86 8a       	std	Z+22, r8	; 0x16
     6d4:	97 8a       	std	Z+23, r9	; 0x17
     6d6:	a0 8e       	std	Z+24, r10	; 0x18
     6d8:	b1 8e       	std	Z+25, r11	; 0x19
     6da:	2f a1       	ldd	r18, Y+39	; 0x27
     6dc:	38 a5       	ldd	r19, Y+40	; 0x28
     6de:	c9 01       	movw	r24, r18
     6e0:	a0 e0       	ldi	r26, 0x00	; 0
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	88 0f       	add	r24, r24
     6e6:	99 1f       	adc	r25, r25
     6e8:	aa 1f       	adc	r26, r26
     6ea:	bb 1f       	adc	r27, r27
     6ec:	88 0f       	add	r24, r24
     6ee:	99 1f       	adc	r25, r25
     6f0:	aa 1f       	adc	r26, r26
     6f2:	bb 1f       	adc	r27, r27
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	aa 1f       	adc	r26, r26
     6fa:	bb 1f       	adc	r27, r27
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	aa 1f       	adc	r26, r26
     702:	bb 1f       	adc	r27, r27
     704:	88 0f       	add	r24, r24
     706:	99 1f       	adc	r25, r25
     708:	aa 1f       	adc	r26, r26
     70a:	bb 1f       	adc	r27, r27
     70c:	88 0e       	add	r8, r24
     70e:	99 1e       	adc	r9, r25
     710:	aa 1e       	adc	r10, r26
     712:	bb 1e       	adc	r11, r27
     714:	82 8a       	std	Z+18, r8	; 0x12
     716:	93 8a       	std	Z+19, r9	; 0x13
     718:	a4 8a       	std	Z+20, r10	; 0x14
     71a:	b5 8a       	std	Z+21, r11	; 0x15
     71c:	cf 01       	movw	r24, r30
     71e:	38 c0       	rjmp	.+112    	; 0x790 <fat_open+0x316>
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	35 c0       	rjmp	.+106    	; 0x790 <fat_open+0x316>
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 e0       	ldi	r25, 0x00	; 0
     72a:	32 c0       	rjmp	.+100    	; 0x790 <fat_open+0x316>
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	2f c0       	rjmp	.+94     	; 0x790 <fat_open+0x316>
     732:	8c 01       	movw	r16, r24
     734:	e5 eb       	ldi	r30, 0xB5	; 181
     736:	f1 e0       	ldi	r31, 0x01	; 1
     738:	8c e1       	ldi	r24, 0x1C	; 28
     73a:	df 01       	movw	r26, r30
     73c:	1d 92       	st	X+, r1
     73e:	8a 95       	dec	r24
     740:	e9 f7       	brne	.-6      	; 0x73c <fat_open+0x2c2>
     742:	11 83       	std	Z+1, r17	; 0x01
     744:	00 83       	st	Z, r16
     746:	f8 01       	movw	r30, r16
     748:	81 84       	ldd	r8, Z+9	; 0x09
     74a:	92 84       	ldd	r9, Z+10	; 0x0a
     74c:	a3 84       	ldd	r10, Z+11	; 0x0b
     74e:	b4 84       	ldd	r11, Z+12	; 0x0c
     750:	07 2e       	mov	r0, r23
     752:	79 e0       	ldi	r23, 0x09	; 9
     754:	88 0c       	add	r8, r8
     756:	99 1c       	adc	r9, r9
     758:	aa 1c       	adc	r10, r10
     75a:	bb 1c       	adc	r11, r11
     75c:	7a 95       	dec	r23
     75e:	d1 f7       	brne	.-12     	; 0x754 <fat_open+0x2da>
     760:	70 2d       	mov	r23, r0
     762:	c5 01       	movw	r24, r10
     764:	b4 01       	movw	r22, r8
     766:	65 5f       	subi	r22, 0xF5	; 245
     768:	7f 4f       	sbci	r23, 0xFF	; 255
     76a:	8f 4f       	sbci	r24, 0xFF	; 255
     76c:	9f 4f       	sbci	r25, 0xFF	; 255
     76e:	01 90       	ld	r0, Z+
     770:	f0 81       	ld	r31, Z
     772:	e0 2d       	mov	r30, r0
     774:	29 e1       	ldi	r18, 0x19	; 25
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	ae 01       	movw	r20, r28
     77a:	4f 5f       	subi	r20, 0xFF	; 255
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	09 95       	icall
     780:	81 11       	cpse	r24, r1
     782:	b1 ce       	rjmp	.-670    	; 0x4e6 <fat_open+0x6c>
     784:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <fat_fs_handles+0x1>
     788:	10 92 b5 01 	sts	0x01B5, r1	; 0x8001b5 <fat_fs_handles>
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a8 96       	adiw	r28, 0x28	; 40
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	f8 94       	cli
     796:	de bf       	out	0x3e, r29	; 62
     798:	0f be       	out	0x3f, r0	; 63
     79a:	cd bf       	out	0x3d, r28	; 61
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	bf 90       	pop	r11
     7ae:	af 90       	pop	r10
     7b0:	9f 90       	pop	r9
     7b2:	8f 90       	pop	r8
     7b4:	7f 90       	pop	r7
     7b6:	6f 90       	pop	r6
     7b8:	5f 90       	pop	r5
     7ba:	4f 90       	pop	r4
     7bc:	3f 90       	pop	r3
     7be:	2f 90       	pop	r2
     7c0:	08 95       	ret

000007c2 <fat_close>:
     7c2:	00 97       	sbiw	r24, 0x00	; 0
     7c4:	19 f0       	breq	.+6      	; 0x7cc <fat_close+0xa>
     7c6:	fc 01       	movw	r30, r24
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	10 82       	st	Z, r1
     7cc:	08 95       	ret

000007ce <fat_open_file>:
     7ce:	00 97       	sbiw	r24, 0x00	; 0
     7d0:	89 f0       	breq	.+34     	; 0x7f4 <fat_open_file+0x26>
     7d2:	61 15       	cp	r22, r1
     7d4:	71 05       	cpc	r23, r1
     7d6:	89 f0       	breq	.+34     	; 0x7fa <fat_open_file+0x2c>
     7d8:	db 01       	movw	r26, r22
     7da:	90 96       	adiw	r26, 0x20	; 32
     7dc:	2c 91       	ld	r18, X
     7de:	24 fd       	sbrc	r18, 4
     7e0:	0f c0       	rjmp	.+30     	; 0x800 <fat_open_file+0x32>
     7e2:	20 91 82 01 	lds	r18, 0x0182	; 0x800182 <fat_file_handles>
     7e6:	30 91 83 01 	lds	r19, 0x0183	; 0x800183 <fat_file_handles+0x1>
     7ea:	23 2b       	or	r18, r19
     7ec:	61 f0       	breq	.+24     	; 0x806 <fat_open_file+0x38>
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	08 95       	ret
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 95       	ret
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	08 95       	ret
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	90 e0       	ldi	r25, 0x00	; 0
     804:	08 95       	ret
     806:	2b e2       	ldi	r18, 0x2B	; 43
     808:	fb 01       	movw	r30, r22
     80a:	a4 e8       	ldi	r26, 0x84	; 132
     80c:	b1 e0       	ldi	r27, 0x01	; 1
     80e:	01 90       	ld	r0, Z+
     810:	0d 92       	st	X+, r0
     812:	2a 95       	dec	r18
     814:	e1 f7       	brne	.-8      	; 0x80e <fat_open_file+0x40>
     816:	e2 e8       	ldi	r30, 0x82	; 130
     818:	f1 e0       	ldi	r31, 0x01	; 1
     81a:	91 83       	std	Z+1, r25	; 0x01
     81c:	80 83       	st	Z, r24
     81e:	15 a6       	std	Z+45, r1	; 0x2d
     820:	16 a6       	std	Z+46, r1	; 0x2e
     822:	17 a6       	std	Z+47, r1	; 0x2f
     824:	10 aa       	std	Z+48, r1	; 0x30
     826:	db 01       	movw	r26, r22
     828:	91 96       	adiw	r26, 0x21	; 33
     82a:	8d 91       	ld	r24, X+
     82c:	9c 91       	ld	r25, X
     82e:	92 97       	sbiw	r26, 0x22	; 34
     830:	92 ab       	std	Z+50, r25	; 0x32
     832:	81 ab       	std	Z+49, r24	; 0x31
     834:	cf 01       	movw	r24, r30
     836:	08 95       	ret

00000838 <fat_close_file>:
     838:	00 97       	sbiw	r24, 0x00	; 0
     83a:	19 f0       	breq	.+6      	; 0x842 <fat_close_file+0xa>
     83c:	fc 01       	movw	r30, r24
     83e:	11 82       	std	Z+1, r1	; 0x01
     840:	10 82       	st	Z, r1
     842:	08 95       	ret

00000844 <fat_read_file>:
     844:	2f 92       	push	r2
     846:	3f 92       	push	r3
     848:	4f 92       	push	r4
     84a:	5f 92       	push	r5
     84c:	6f 92       	push	r6
     84e:	7f 92       	push	r7
     850:	8f 92       	push	r8
     852:	9f 92       	push	r9
     854:	af 92       	push	r10
     856:	bf 92       	push	r11
     858:	cf 92       	push	r12
     85a:	df 92       	push	r13
     85c:	ef 92       	push	r14
     85e:	ff 92       	push	r15
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	cf 93       	push	r28
     866:	df 93       	push	r29
     868:	cd b7       	in	r28, 0x3d	; 61
     86a:	de b7       	in	r29, 0x3e	; 62
     86c:	28 97       	sbiw	r28, 0x08	; 8
     86e:	0f b6       	in	r0, 0x3f	; 63
     870:	f8 94       	cli
     872:	de bf       	out	0x3e, r29	; 62
     874:	0f be       	out	0x3f, r0	; 63
     876:	cd bf       	out	0x3d, r28	; 61
     878:	8c 01       	movw	r16, r24
     87a:	4b 01       	movw	r8, r22
     87c:	1a 01       	movw	r2, r20
     87e:	00 97       	sbiw	r24, 0x00	; 0
     880:	09 f4       	brne	.+2      	; 0x884 <fat_read_file+0x40>
     882:	dc c0       	rjmp	.+440    	; 0xa3c <fat_read_file+0x1f8>
     884:	67 2b       	or	r22, r23
     886:	09 f4       	brne	.+2      	; 0x88a <fat_read_file+0x46>
     888:	dc c0       	rjmp	.+440    	; 0xa42 <fat_read_file+0x1fe>
     88a:	45 2b       	or	r20, r21
     88c:	09 f4       	brne	.+2      	; 0x890 <fat_read_file+0x4c>
     88e:	dc c0       	rjmp	.+440    	; 0xa48 <fat_read_file+0x204>
     890:	dc 01       	movw	r26, r24
     892:	9d 96       	adiw	r26, 0x2d	; 45
     894:	cd 90       	ld	r12, X+
     896:	dd 90       	ld	r13, X+
     898:	ed 90       	ld	r14, X+
     89a:	fc 90       	ld	r15, X
     89c:	d0 97       	sbiw	r26, 0x30	; 48
     89e:	95 96       	adiw	r26, 0x25	; 37
     8a0:	8d 91       	ld	r24, X+
     8a2:	9d 91       	ld	r25, X+
     8a4:	0d 90       	ld	r0, X+
     8a6:	bc 91       	ld	r27, X
     8a8:	a0 2d       	mov	r26, r0
     8aa:	b7 01       	movw	r22, r14
     8ac:	a6 01       	movw	r20, r12
     8ae:	42 0d       	add	r20, r2
     8b0:	53 1d       	adc	r21, r3
     8b2:	61 1d       	adc	r22, r1
     8b4:	71 1d       	adc	r23, r1
     8b6:	84 17       	cp	r24, r20
     8b8:	95 07       	cpc	r25, r21
     8ba:	a6 07       	cpc	r26, r22
     8bc:	b7 07       	cpc	r27, r23
     8be:	28 f4       	brcc	.+10     	; 0x8ca <fat_read_file+0x86>
     8c0:	1c 01       	movw	r2, r24
     8c2:	2c 18       	sub	r2, r12
     8c4:	3d 08       	sbc	r3, r13
     8c6:	09 f4       	brne	.+2      	; 0x8ca <fat_read_file+0x86>
     8c8:	c2 c0       	rjmp	.+388    	; 0xa4e <fat_read_file+0x20a>
     8ca:	d8 01       	movw	r26, r16
     8cc:	ed 91       	ld	r30, X+
     8ce:	fc 91       	ld	r31, X
     8d0:	11 97       	sbiw	r26, 0x01	; 1
     8d2:	40 88       	ldd	r4, Z+16	; 0x10
     8d4:	51 88       	ldd	r5, Z+17	; 0x11
     8d6:	d1 96       	adiw	r26, 0x31	; 49
     8d8:	ad 90       	ld	r10, X+
     8da:	bc 90       	ld	r11, X
     8dc:	d2 97       	sbiw	r26, 0x32	; 50
     8de:	a1 14       	cp	r10, r1
     8e0:	b1 04       	cpc	r11, r1
     8e2:	09 f0       	breq	.+2      	; 0x8e6 <fat_read_file+0xa2>
     8e4:	4b c0       	rjmp	.+150    	; 0x97c <fat_read_file+0x138>
     8e6:	93 96       	adiw	r26, 0x23	; 35
     8e8:	ad 90       	ld	r10, X+
     8ea:	bc 90       	ld	r11, X
     8ec:	94 97       	sbiw	r26, 0x24	; 36
     8ee:	a1 14       	cp	r10, r1
     8f0:	b1 04       	cpc	r11, r1
     8f2:	61 f4       	brne	.+24     	; 0x90c <fat_read_file+0xc8>
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	cd 28       	or	r12, r13
     8fa:	ce 28       	or	r12, r14
     8fc:	cf 28       	or	r12, r15
     8fe:	11 f4       	brne	.+4      	; 0x904 <fat_read_file+0xc0>
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	91 95       	neg	r25
     906:	81 95       	neg	r24
     908:	91 09       	sbc	r25, r1
     90a:	a6 c0       	rjmp	.+332    	; 0xa58 <fat_read_file+0x214>
     90c:	c1 14       	cp	r12, r1
     90e:	d1 04       	cpc	r13, r1
     910:	e1 04       	cpc	r14, r1
     912:	f1 04       	cpc	r15, r1
     914:	d9 f4       	brne	.+54     	; 0x94c <fat_read_file+0x108>
     916:	32 c0       	rjmp	.+100    	; 0x97c <fat_read_file+0x138>
     918:	29 81       	ldd	r18, Y+1	; 0x01
     91a:	3a 81       	ldd	r19, Y+2	; 0x02
     91c:	4b 81       	ldd	r20, Y+3	; 0x03
     91e:	5c 81       	ldd	r21, Y+4	; 0x04
     920:	8d 81       	ldd	r24, Y+5	; 0x05
     922:	9e 81       	ldd	r25, Y+6	; 0x06
     924:	af 81       	ldd	r26, Y+7	; 0x07
     926:	b8 85       	ldd	r27, Y+8	; 0x08
     928:	28 1b       	sub	r18, r24
     92a:	39 0b       	sbc	r19, r25
     92c:	4a 0b       	sbc	r20, r26
     92e:	5b 0b       	sbc	r21, r27
     930:	29 83       	std	Y+1, r18	; 0x01
     932:	3a 83       	std	Y+2, r19	; 0x02
     934:	4b 83       	std	Y+3, r20	; 0x03
     936:	5c 83       	std	Y+4, r21	; 0x04
     938:	b5 01       	movw	r22, r10
     93a:	d8 01       	movw	r26, r16
     93c:	8d 91       	ld	r24, X+
     93e:	9c 91       	ld	r25, X
     940:	0e 94 91 00 	call	0x122	; 0x122 <fat_get_next_cluster>
     944:	5c 01       	movw	r10, r24
     946:	89 2b       	or	r24, r25
     948:	61 f4       	brne	.+24     	; 0x962 <fat_read_file+0x11e>
     94a:	84 c0       	rjmp	.+264    	; 0xa54 <fat_read_file+0x210>
     94c:	c9 82       	std	Y+1, r12	; 0x01
     94e:	da 82       	std	Y+2, r13	; 0x02
     950:	eb 82       	std	Y+3, r14	; 0x03
     952:	fc 82       	std	Y+4, r15	; 0x04
     954:	92 01       	movw	r18, r4
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	50 e0       	ldi	r21, 0x00	; 0
     95a:	2d 83       	std	Y+5, r18	; 0x05
     95c:	3e 83       	std	Y+6, r19	; 0x06
     95e:	4f 83       	std	Y+7, r20	; 0x07
     960:	58 87       	std	Y+8, r21	; 0x08
     962:	89 81       	ldd	r24, Y+1	; 0x01
     964:	9a 81       	ldd	r25, Y+2	; 0x02
     966:	ab 81       	ldd	r26, Y+3	; 0x03
     968:	bc 81       	ldd	r27, Y+4	; 0x04
     96a:	2d 81       	ldd	r18, Y+5	; 0x05
     96c:	3e 81       	ldd	r19, Y+6	; 0x06
     96e:	4f 81       	ldd	r20, Y+7	; 0x07
     970:	58 85       	ldd	r21, Y+8	; 0x08
     972:	82 17       	cp	r24, r18
     974:	93 07       	cpc	r25, r19
     976:	a4 07       	cpc	r26, r20
     978:	b5 07       	cpc	r27, r21
     97a:	70 f6       	brcc	.-100    	; 0x918 <fat_read_file+0xd4>
     97c:	c2 01       	movw	r24, r4
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	c8 22       	and	r12, r24
     982:	d9 22       	and	r13, r25
     984:	71 01       	movw	r14, r2
     986:	d8 01       	movw	r26, r16
     988:	6d 90       	ld	r6, X+
     98a:	7c 90       	ld	r7, X
     98c:	b5 01       	movw	r22, r10
     98e:	c3 01       	movw	r24, r6
     990:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fat_cluster_offset>
     994:	92 01       	movw	r18, r4
     996:	2c 19       	sub	r18, r12
     998:	3d 09       	sbc	r19, r13
     99a:	fa 82       	std	Y+2, r15	; 0x02
     99c:	e9 82       	std	Y+1, r14	; 0x01
     99e:	2e 15       	cp	r18, r14
     9a0:	3f 05       	cpc	r19, r15
     9a2:	10 f4       	brcc	.+4      	; 0x9a8 <fat_read_file+0x164>
     9a4:	3a 83       	std	Y+2, r19	; 0x02
     9a6:	29 83       	std	Y+1, r18	; 0x01
     9a8:	6c 0d       	add	r22, r12
     9aa:	7d 1d       	adc	r23, r13
     9ac:	81 1d       	adc	r24, r1
     9ae:	91 1d       	adc	r25, r1
     9b0:	d3 01       	movw	r26, r6
     9b2:	ed 91       	ld	r30, X+
     9b4:	fc 91       	ld	r31, X
     9b6:	01 90       	ld	r0, Z+
     9b8:	f0 81       	ld	r31, Z
     9ba:	e0 2d       	mov	r30, r0
     9bc:	29 81       	ldd	r18, Y+1	; 0x01
     9be:	3a 81       	ldd	r19, Y+2	; 0x02
     9c0:	a4 01       	movw	r20, r8
     9c2:	09 95       	icall
     9c4:	81 11       	cpse	r24, r1
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <fat_read_file+0x18c>
     9c8:	c1 01       	movw	r24, r2
     9ca:	8e 19       	sub	r24, r14
     9cc:	9f 09       	sbc	r25, r15
     9ce:	44 c0       	rjmp	.+136    	; 0xa58 <fat_read_file+0x214>
     9d0:	e9 81       	ldd	r30, Y+1	; 0x01
     9d2:	fa 81       	ldd	r31, Y+2	; 0x02
     9d4:	8e 0e       	add	r8, r30
     9d6:	9f 1e       	adc	r9, r31
     9d8:	ee 1a       	sub	r14, r30
     9da:	ff 0a       	sbc	r15, r31
     9dc:	f8 01       	movw	r30, r16
     9de:	85 a5       	ldd	r24, Z+45	; 0x2d
     9e0:	96 a5       	ldd	r25, Z+46	; 0x2e
     9e2:	a7 a5       	ldd	r26, Z+47	; 0x2f
     9e4:	b0 a9       	ldd	r27, Z+48	; 0x30
     9e6:	29 81       	ldd	r18, Y+1	; 0x01
     9e8:	3a 81       	ldd	r19, Y+2	; 0x02
     9ea:	82 0f       	add	r24, r18
     9ec:	93 1f       	adc	r25, r19
     9ee:	a1 1d       	adc	r26, r1
     9f0:	b1 1d       	adc	r27, r1
     9f2:	85 a7       	std	Z+45, r24	; 0x2d
     9f4:	96 a7       	std	Z+46, r25	; 0x2e
     9f6:	a7 a7       	std	Z+47, r26	; 0x2f
     9f8:	b0 ab       	std	Z+48, r27	; 0x30
     9fa:	2c 0d       	add	r18, r12
     9fc:	3d 1d       	adc	r19, r13
     9fe:	24 15       	cp	r18, r4
     a00:	35 05       	cpc	r19, r5
     a02:	98 f0       	brcs	.+38     	; 0xa2a <fat_read_file+0x1e6>
     a04:	b5 01       	movw	r22, r10
     a06:	80 81       	ld	r24, Z
     a08:	91 81       	ldd	r25, Z+1	; 0x01
     a0a:	0e 94 91 00 	call	0x122	; 0x122 <fat_get_next_cluster>
     a0e:	5c 01       	movw	r10, r24
     a10:	89 2b       	or	r24, r25
     a12:	49 f4       	brne	.+18     	; 0xa26 <fat_read_file+0x1e2>
     a14:	d8 01       	movw	r26, r16
     a16:	d2 96       	adiw	r26, 0x32	; 50
     a18:	1c 92       	st	X, r1
     a1a:	1e 92       	st	-X, r1
     a1c:	d1 97       	sbiw	r26, 0x31	; 49
     a1e:	c1 01       	movw	r24, r2
     a20:	8e 19       	sub	r24, r14
     a22:	9f 09       	sbc	r25, r15
     a24:	19 c0       	rjmp	.+50     	; 0xa58 <fat_read_file+0x214>
     a26:	c1 2c       	mov	r12, r1
     a28:	d1 2c       	mov	r13, r1
     a2a:	f8 01       	movw	r30, r16
     a2c:	b2 aa       	std	Z+50, r11	; 0x32
     a2e:	a1 aa       	std	Z+49, r10	; 0x31
     a30:	e1 14       	cp	r14, r1
     a32:	f1 04       	cpc	r15, r1
     a34:	09 f0       	breq	.+2      	; 0xa38 <fat_read_file+0x1f4>
     a36:	a7 cf       	rjmp	.-178    	; 0x986 <fat_read_file+0x142>
     a38:	c1 01       	movw	r24, r2
     a3a:	0e c0       	rjmp	.+28     	; 0xa58 <fat_read_file+0x214>
     a3c:	8f ef       	ldi	r24, 0xFF	; 255
     a3e:	9f ef       	ldi	r25, 0xFF	; 255
     a40:	0b c0       	rjmp	.+22     	; 0xa58 <fat_read_file+0x214>
     a42:	8f ef       	ldi	r24, 0xFF	; 255
     a44:	9f ef       	ldi	r25, 0xFF	; 255
     a46:	08 c0       	rjmp	.+16     	; 0xa58 <fat_read_file+0x214>
     a48:	8f ef       	ldi	r24, 0xFF	; 255
     a4a:	9f ef       	ldi	r25, 0xFF	; 255
     a4c:	05 c0       	rjmp	.+10     	; 0xa58 <fat_read_file+0x214>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 c0       	rjmp	.+4      	; 0xa58 <fat_read_file+0x214>
     a54:	8f ef       	ldi	r24, 0xFF	; 255
     a56:	9f ef       	ldi	r25, 0xFF	; 255
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	de bf       	out	0x3e, r29	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	cd bf       	out	0x3d, r28	; 61
     a64:	df 91       	pop	r29
     a66:	cf 91       	pop	r28
     a68:	1f 91       	pop	r17
     a6a:	0f 91       	pop	r16
     a6c:	ff 90       	pop	r15
     a6e:	ef 90       	pop	r14
     a70:	df 90       	pop	r13
     a72:	cf 90       	pop	r12
     a74:	bf 90       	pop	r11
     a76:	af 90       	pop	r10
     a78:	9f 90       	pop	r9
     a7a:	8f 90       	pop	r8
     a7c:	7f 90       	pop	r7
     a7e:	6f 90       	pop	r6
     a80:	5f 90       	pop	r5
     a82:	4f 90       	pop	r4
     a84:	3f 90       	pop	r3
     a86:	2f 90       	pop	r2
     a88:	08 95       	ret

00000a8a <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
     a8e:	00 97       	sbiw	r24, 0x00	; 0
     a90:	b1 f0       	breq	.+44     	; 0xabe <fat_open_dir+0x34>
     a92:	61 15       	cp	r22, r1
     a94:	71 05       	cpc	r23, r1
     a96:	b1 f0       	breq	.+44     	; 0xac4 <fat_open_dir+0x3a>
     a98:	fb 01       	movw	r30, r22
     a9a:	20 a1       	ldd	r18, Z+32	; 0x20
     a9c:	24 ff       	sbrs	r18, 4
     a9e:	15 c0       	rjmp	.+42     	; 0xaca <fat_open_dir+0x40>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
     aa0:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <__data_end>
     aa4:	30 91 21 01 	lds	r19, 0x0121	; 0x800121 <__data_end+0x1>
     aa8:	23 2b       	or	r18, r19
     aaa:	91 f0       	breq	.+36     	; 0xad0 <fat_open_dir+0x46>
     aac:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <__data_end+0x31>
     ab0:	30 91 52 01 	lds	r19, 0x0152	; 0x800152 <__data_end+0x32>
     ab4:	23 2b       	or	r18, r19
     ab6:	79 f0       	breq	.+30     	; 0xad6 <fat_open_dir+0x4c>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	21 c0       	rjmp	.+66     	; 0xb00 <__stack+0x1>
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	1e c0       	rjmp	.+60     	; 0xb00 <__stack+0x1>
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	1b c0       	rjmp	.+54     	; 0xb00 <__stack+0x1>
     aca:	80 e0       	ldi	r24, 0x00	; 0
     acc:	90 e0       	ldi	r25, 0x00	; 0
     ace:	18 c0       	rjmp	.+48     	; 0xb00 <__stack+0x1>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
     ad0:	c0 e2       	ldi	r28, 0x20	; 32
     ad2:	d1 e0       	ldi	r29, 0x01	; 1
     ad4:	02 c0       	rjmp	.+4      	; 0xada <fat_open_dir+0x50>
     ad6:	c1 e5       	ldi	r28, 0x51	; 81
     ad8:	d1 e0       	ldi	r29, 0x01	; 1
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
     ada:	de 01       	movw	r26, r28
     adc:	12 96       	adiw	r26, 0x02	; 2
     ade:	2b e2       	ldi	r18, 0x2B	; 43
     ae0:	fb 01       	movw	r30, r22
     ae2:	01 90       	ld	r0, Z+
     ae4:	0d 92       	st	X+, r0
     ae6:	2a 95       	dec	r18
     ae8:	e1 f7       	brne	.-8      	; 0xae2 <fat_open_dir+0x58>
    dd->fs = fs;
     aea:	99 83       	std	Y+1, r25	; 0x01
     aec:	88 83       	st	Y, r24
    dd->entry_cluster = dir_entry->cluster;
     aee:	fb 01       	movw	r30, r22
     af0:	81 a1       	ldd	r24, Z+33	; 0x21
     af2:	92 a1       	ldd	r25, Z+34	; 0x22
     af4:	9e a7       	std	Y+46, r25	; 0x2e
     af6:	8d a7       	std	Y+45, r24	; 0x2d
    dd->entry_offset = 0;
     af8:	18 aa       	std	Y+48, r1	; 0x30
     afa:	1f a6       	std	Y+47, r1	; 0x2f

    return dd;
     afc:	8c 2f       	mov	r24, r28
     afe:	9d 2f       	mov	r25, r29
}
     b00:	df 91       	pop	r29
     b02:	cf 91       	pop	r28
     b04:	08 95       	ret

00000b06 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
     b06:	00 97       	sbiw	r24, 0x00	; 0
     b08:	19 f0       	breq	.+6      	; 0xb10 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
     b0a:	fc 01       	movw	r30, r24
     b0c:	11 82       	std	Z+1, r1	; 0x01
     b0e:	10 82       	st	Z, r1
     b10:	08 95       	ret

00000b12 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
     b12:	fc 01       	movw	r30, r24
    if(!dd)
     b14:	89 2b       	or	r24, r25
     b16:	41 f0       	breq	.+16     	; 0xb28 <fat_reset_dir+0x16>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
     b18:	83 a1       	ldd	r24, Z+35	; 0x23
     b1a:	94 a1       	ldd	r25, Z+36	; 0x24
     b1c:	96 a7       	std	Z+46, r25	; 0x2e
     b1e:	85 a7       	std	Z+45, r24	; 0x2d
    dd->entry_offset = 0;
     b20:	10 aa       	std	Z+48, r1	; 0x30
     b22:	17 a6       	std	Z+47, r1	; 0x2f
    return 1;
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
     b28:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
     b2a:	08 95       	ret

00000b2c <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
     b2c:	2f 92       	push	r2
     b2e:	3f 92       	push	r3
     b30:	4f 92       	push	r4
     b32:	5f 92       	push	r5
     b34:	6f 92       	push	r6
     b36:	7f 92       	push	r7
     b38:	8f 92       	push	r8
     b3a:	9f 92       	push	r9
     b3c:	af 92       	push	r10
     b3e:	bf 92       	push	r11
     b40:	cf 92       	push	r12
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	a6 97       	sbiw	r28, 0x26	; 38
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
    if(!dd || !dir_entry)
     b60:	00 97       	sbiw	r24, 0x00	; 0
     b62:	09 f4       	brne	.+2      	; 0xb66 <fat_read_dir+0x3a>
     b64:	95 c0       	rjmp	.+298    	; 0xc90 <fat_read_dir+0x164>
     b66:	61 15       	cp	r22, r1
     b68:	71 05       	cpc	r23, r1
     b6a:	09 f4       	brne	.+2      	; 0xb6e <fat_read_dir+0x42>
     b6c:	93 c0       	rjmp	.+294    	; 0xc94 <fat_read_dir+0x168>
     b6e:	1c 01       	movw	r2, r24
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
     b70:	fc 01       	movw	r30, r24
     b72:	40 80       	ld	r4, Z
     b74:	51 80       	ldd	r5, Z+1	; 0x01
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
     b76:	f2 01       	movw	r30, r4
     b78:	80 88       	ldd	r8, Z+16	; 0x10
     b7a:	91 88       	ldd	r9, Z+17	; 0x11
    cluster_t cluster_num = dd->entry_cluster;
    uint16_t cluster_offset = dd->entry_offset;
     b7c:	fc 01       	movw	r30, r24
     b7e:	a7 a4       	ldd	r10, Z+47	; 0x2f
     b80:	b0 a8       	ldd	r11, Z+48	; 0x30
    struct fat_read_dir_callback_arg arg;

    if(cluster_offset >= cluster_size)
     b82:	a8 14       	cp	r10, r8
     b84:	b9 04       	cpc	r11, r9
     b86:	20 f0       	brcs	.+8      	; 0xb90 <fat_read_dir+0x64>
        /* The latest call hit the border of the last cluster in
         * the chain, but it still returned a directory entry.
         * So we now reset the handle and signal the caller the
         * end of the listing.
         */
        fat_reset_dir(dd);
     b88:	0e 94 89 05 	call	0xb12	; 0xb12 <fat_reset_dir>
        return 0;
     b8c:	10 e0       	ldi	r17, 0x00	; 0
     b8e:	83 c0       	rjmp	.+262    	; 0xc96 <fat_read_dir+0x16a>

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    cluster_t cluster_num = dd->entry_cluster;
     b90:	fc 01       	movw	r30, r24
     b92:	65 a4       	ldd	r6, Z+45	; 0x2d
     b94:	76 a4       	ldd	r7, Z+46	; 0x2e
        fat_reset_dir(dd);
        return 0;
    }

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
     b96:	9e 01       	movw	r18, r28
     b98:	2f 5f       	subi	r18, 0xFF	; 255
     b9a:	3f 4f       	sbci	r19, 0xFF	; 255
     b9c:	86 e0       	ldi	r24, 0x06	; 6
     b9e:	f9 01       	movw	r30, r18
     ba0:	11 92       	st	Z+, r1
     ba2:	8a 95       	dec	r24
     ba4:	e9 f7       	brne	.-6      	; 0xba0 <fat_read_dir+0x74>
    memset(dir_entry, 0, sizeof(*dir_entry));
     ba6:	8b e2       	ldi	r24, 0x2B	; 43
     ba8:	fb 01       	movw	r30, r22
     baa:	11 92       	st	Z+, r1
     bac:	8a 95       	dec	r24
     bae:	e9 f7       	brne	.-6      	; 0xbaa <fat_read_dir+0x7e>
    arg.dir_entry = dir_entry;
     bb0:	7a 83       	std	Y+2, r23	; 0x02
     bb2:	69 83       	std	Y+1, r22	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
     bb4:	61 14       	cp	r6, r1
     bb6:	71 04       	cpc	r7, r1
     bb8:	09 f0       	breq	.+2      	; 0xbbc <fat_read_dir+0x90>
     bba:	5b c0       	rjmp	.+182    	; 0xc72 <fat_read_dir+0x146>
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
            cluster_num = header->root_dir_cluster;
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
     bbc:	d2 01       	movw	r26, r4
     bbe:	52 96       	adiw	r26, 0x12	; 18
     bc0:	8d 90       	ld	r8, X+
     bc2:	9c 90       	ld	r9, X
     bc4:	53 97       	sbiw	r26, 0x13	; 19
     bc6:	56 96       	adiw	r26, 0x16	; 22
     bc8:	8d 91       	ld	r24, X+
     bca:	9c 91       	ld	r25, X
     bcc:	57 97       	sbiw	r26, 0x17	; 23
     bce:	88 1a       	sub	r8, r24
     bd0:	99 0a       	sbc	r9, r25
     bd2:	4f c0       	rjmp	.+158    	; 0xc72 <fat_read_dir+0x146>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
     bd4:	84 01       	movw	r16, r8
     bd6:	0a 19       	sub	r16, r10
     bd8:	1b 09       	sbc	r17, r11
        offset_t pos = cluster_offset;
     bda:	65 01       	movw	r12, r10
     bdc:	e1 2c       	mov	r14, r1
     bde:	f1 2c       	mov	r15, r1
        if(cluster_num == 0)
     be0:	61 14       	cp	r6, r1
     be2:	71 04       	cpc	r7, r1
     be4:	61 f4       	brne	.+24     	; 0xbfe <fat_read_dir+0xd2>
            pos += header->root_dir_offset;
     be6:	f2 01       	movw	r30, r4
     be8:	86 89       	ldd	r24, Z+22	; 0x16
     bea:	97 89       	ldd	r25, Z+23	; 0x17
     bec:	a0 8d       	ldd	r26, Z+24	; 0x18
     bee:	b1 8d       	ldd	r27, Z+25	; 0x19
     bf0:	bc 01       	movw	r22, r24
     bf2:	cd 01       	movw	r24, r26
     bf4:	6c 0d       	add	r22, r12
     bf6:	7d 1d       	adc	r23, r13
     bf8:	8e 1d       	adc	r24, r14
     bfa:	9f 1d       	adc	r25, r15
     bfc:	08 c0       	rjmp	.+16     	; 0xc0e <fat_read_dir+0xe2>
        else
            pos += fat_cluster_offset(fs, cluster_num);
     bfe:	b3 01       	movw	r22, r6
     c00:	c2 01       	movw	r24, r4
     c02:	0e 94 d6 00 	call	0x1ac	; 0x1ac <fat_cluster_offset>
     c06:	6c 0d       	add	r22, r12
     c08:	7d 1d       	adc	r23, r13
     c0a:	8e 1d       	adc	r24, r14
     c0c:	9f 1d       	adc	r25, r15

        arg.bytes_read = 0;
     c0e:	1c 82       	std	Y+4, r1	; 0x04
     c10:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
     c12:	d2 01       	movw	r26, r4
     c14:	ed 91       	ld	r30, X+
     c16:	fc 91       	ld	r31, X
     c18:	02 80       	ldd	r0, Z+2	; 0x02
     c1a:	f3 81       	ldd	r31, Z+3	; 0x03
     c1c:	e0 2d       	mov	r30, r0
     c1e:	9e 01       	movw	r18, r28
     c20:	2f 5f       	subi	r18, 0xFF	; 255
     c22:	3f 4f       	sbci	r19, 0xFF	; 255
     c24:	69 01       	movw	r12, r18
     c26:	0f 2e       	mov	r0, r31
     c28:	f6 e0       	ldi	r31, 0x06	; 6
     c2a:	ef 2e       	mov	r14, r31
     c2c:	f1 e0       	ldi	r31, 0x01	; 1
     c2e:	ff 2e       	mov	r15, r31
     c30:	f0 2d       	mov	r31, r0
     c32:	20 e2       	ldi	r18, 0x20	; 32
     c34:	30 e0       	ldi	r19, 0x00	; 0
     c36:	ae 01       	movw	r20, r28
     c38:	49 5f       	subi	r20, 0xF9	; 249
     c3a:	5f 4f       	sbci	r21, 0xFF	; 255
     c3c:	09 95       	icall
     c3e:	18 2f       	mov	r17, r24
     c40:	88 23       	and	r24, r24
     c42:	49 f1       	breq	.+82     	; 0xc96 <fat_read_dir+0x16a>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
     c44:	8b 81       	ldd	r24, Y+3	; 0x03
     c46:	9c 81       	ldd	r25, Y+4	; 0x04
     c48:	a8 0e       	add	r10, r24
     c4a:	b9 1e       	adc	r11, r25

        if(cluster_offset >= cluster_size)
     c4c:	a8 14       	cp	r10, r8
     c4e:	b9 04       	cpc	r11, r9
     c50:	80 f0       	brcs	.+32     	; 0xc72 <fat_read_dir+0x146>
        {
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
     c52:	b3 01       	movw	r22, r6
     c54:	c2 01       	movw	r24, r4
     c56:	0e 94 91 00 	call	0x122	; 0x122 <fat_get_next_cluster>
     c5a:	3c 01       	movw	r6, r24
     c5c:	89 2b       	or	r24, r25
     c5e:	39 f4       	brne	.+14     	; 0xc6e <fat_read_dir+0x142>
                cluster_offset = 0;
                continue;
            }

            /* we are at the end of the cluster chain */
            if(!arg.finished)
     c60:	1e 81       	ldd	r17, Y+6	; 0x06
     c62:	11 11       	cpse	r17, r1
     c64:	0a c0       	rjmp	.+20     	; 0xc7a <fat_read_dir+0x14e>
            {
                /* directory entry not found, reset directory handle */
                fat_reset_dir(dd);
     c66:	c1 01       	movw	r24, r2
     c68:	0e 94 89 05 	call	0xb12	; 0xb12 <fat_reset_dir>
                return 0;
     c6c:	14 c0       	rjmp	.+40     	; 0xc96 <fat_read_dir+0x16a>
            /* we reached the cluster border and switch to the next cluster */

            /* get number of next cluster */
            if((cluster_num = fat_get_next_cluster(fs, cluster_num)) != 0)
            {
                cluster_offset = 0;
     c6e:	a1 2c       	mov	r10, r1
     c70:	b1 2c       	mov	r11, r1
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
     c72:	8e 81       	ldd	r24, Y+6	; 0x06
     c74:	88 23       	and	r24, r24
     c76:	09 f4       	brne	.+2      	; 0xc7a <fat_read_dir+0x14e>
     c78:	ad cf       	rjmp	.-166    	; 0xbd4 <fat_read_dir+0xa8>

            break;
        }
    }

    dd->entry_cluster = cluster_num;
     c7a:	d1 01       	movw	r26, r2
     c7c:	9e 96       	adiw	r26, 0x2e	; 46
     c7e:	7c 92       	st	X, r7
     c80:	6e 92       	st	-X, r6
     c82:	9d 97       	sbiw	r26, 0x2d	; 45
    dd->entry_offset = cluster_offset;
     c84:	d0 96       	adiw	r26, 0x30	; 48
     c86:	bc 92       	st	X, r11
     c88:	ae 92       	st	-X, r10
     c8a:	9f 97       	sbiw	r26, 0x2f	; 47

    return arg.finished;
     c8c:	1e 81       	ldd	r17, Y+6	; 0x06
     c8e:	03 c0       	rjmp	.+6      	; 0xc96 <fat_read_dir+0x16a>
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    if(!dd || !dir_entry)
        return 0;
     c90:	10 e0       	ldi	r17, 0x00	; 0
     c92:	01 c0       	rjmp	.+2      	; 0xc96 <fat_read_dir+0x16a>
     c94:	10 e0       	ldi	r17, 0x00	; 0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return arg.finished;
}
     c96:	81 2f       	mov	r24, r17
     c98:	a6 96       	adiw	r28, 0x26	; 38
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	f8 94       	cli
     c9e:	de bf       	out	0x3e, r29	; 62
     ca0:	0f be       	out	0x3f, r0	; 63
     ca2:	cd bf       	out	0x3d, r28	; 61
     ca4:	df 91       	pop	r29
     ca6:	cf 91       	pop	r28
     ca8:	1f 91       	pop	r17
     caa:	0f 91       	pop	r16
     cac:	ff 90       	pop	r15
     cae:	ef 90       	pop	r14
     cb0:	df 90       	pop	r13
     cb2:	cf 90       	pop	r12
     cb4:	bf 90       	pop	r11
     cb6:	af 90       	pop	r10
     cb8:	9f 90       	pop	r9
     cba:	8f 90       	pop	r8
     cbc:	7f 90       	pop	r7
     cbe:	6f 90       	pop	r6
     cc0:	5f 90       	pop	r5
     cc2:	4f 90       	pop	r4
     cc4:	3f 90       	pop	r3
     cc6:	2f 90       	pop	r2
     cc8:	08 95       	ret

00000cca <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
     cca:	4f 92       	push	r4
     ccc:	5f 92       	push	r5
     cce:	6f 92       	push	r6
     cd0:	7f 92       	push	r7
     cd2:	8f 92       	push	r8
     cd4:	9f 92       	push	r9
     cd6:	af 92       	push	r10
     cd8:	bf 92       	push	r11
     cda:	cf 92       	push	r12
     cdc:	df 92       	push	r13
     cde:	ef 92       	push	r14
     ce0:	ff 92       	push	r15
     ce2:	0f 93       	push	r16
     ce4:	1f 93       	push	r17
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	4c 01       	movw	r8, r24
     cec:	6b 01       	movw	r12, r22
     cee:	ea 01       	movw	r28, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
     cf0:	89 2b       	or	r24, r25
     cf2:	09 f4       	brne	.+2      	; 0xcf6 <fat_get_dir_entry_of_path+0x2c>
     cf4:	76 c0       	rjmp	.+236    	; 0xde2 <fat_get_dir_entry_of_path+0x118>
     cf6:	61 15       	cp	r22, r1
     cf8:	71 05       	cpc	r23, r1
     cfa:	09 f4       	brne	.+2      	; 0xcfe <fat_get_dir_entry_of_path+0x34>
     cfc:	74 c0       	rjmp	.+232    	; 0xde6 <fat_get_dir_entry_of_path+0x11c>
     cfe:	fb 01       	movw	r30, r22
     d00:	80 81       	ld	r24, Z
     d02:	88 23       	and	r24, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <fat_get_dir_entry_of_path+0x3e>
     d06:	71 c0       	rjmp	.+226    	; 0xdea <fat_get_dir_entry_of_path+0x120>
     d08:	20 97       	sbiw	r28, 0x00	; 0
     d0a:	09 f4       	brne	.+2      	; 0xd0e <fat_get_dir_entry_of_path+0x44>
     d0c:	70 c0       	rjmp	.+224    	; 0xdee <fat_get_dir_entry_of_path+0x124>
        return 0;

    if(path[0] == '/')
     d0e:	8f 32       	cpi	r24, 0x2F	; 47
     d10:	19 f4       	brne	.+6      	; 0xd18 <fat_get_dir_entry_of_path+0x4e>
        ++path;
     d12:	ff ef       	ldi	r31, 0xFF	; 255
     d14:	cf 1a       	sub	r12, r31
     d16:	df 0a       	sbc	r13, r31

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
     d18:	8b e2       	ldi	r24, 0x2B	; 43
     d1a:	fe 01       	movw	r30, r28
     d1c:	11 92       	st	Z+, r1
     d1e:	8a 95       	dec	r24
     d20:	e9 f7       	brne	.-6      	; 0xd1c <fat_get_dir_entry_of_path+0x52>
    dir_entry->attributes = FAT_ATTRIB_DIR;
     d22:	80 e1       	ldi	r24, 0x10	; 16
     d24:	88 a3       	std	Y+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
     d26:	f6 01       	movw	r30, r12
     d28:	80 81       	ld	r24, Z
     d2a:	88 23       	and	r24, r24
     d2c:	09 f4       	brne	.+2      	; 0xd30 <fat_get_dir_entry_of_path+0x66>
     d2e:	61 c0       	rjmp	.+194    	; 0xdf2 <fat_get_dir_entry_of_path+0x128>
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
     d30:	41 2c       	mov	r4, r1
     d32:	51 2c       	mov	r5, r1
    while(1)
    {
        if(path[0] == '\0')
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
     d34:	be 01       	movw	r22, r28
     d36:	c4 01       	movw	r24, r8
     d38:	0e 94 45 05 	call	0xa8a	; 0xa8a <fat_open_dir>
     d3c:	8c 01       	movw	r16, r24
        if(!dd)
     d3e:	89 2b       	or	r24, r25
     d40:	09 f4       	brne	.+2      	; 0xd44 <fat_get_dir_entry_of_path+0x7a>
     d42:	59 c0       	rjmp	.+178    	; 0xdf6 <fat_get_dir_entry_of_path+0x12c>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
     d44:	6f e2       	ldi	r22, 0x2F	; 47
     d46:	70 e0       	ldi	r23, 0x00	; 0
     d48:	c6 01       	movw	r24, r12
     d4a:	0e 94 a4 0b 	call	0x1748	; 0x1748 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
     d4e:	00 97       	sbiw	r24, 0x00	; 0
     d50:	41 f0       	breq	.+16     	; 0xd62 <fat_get_dir_entry_of_path+0x98>
        {
            length_to_sep = sub_path - path;
     d52:	e8 2e       	mov	r14, r24
     d54:	ec 18       	sub	r14, r12
            ++sub_path;
     d56:	5c 01       	movw	r10, r24
     d58:	ff ef       	ldi	r31, 0xFF	; 255
     d5a:	af 1a       	sub	r10, r31
     d5c:	bf 0a       	sbc	r11, r31
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
     d5e:	f1 2c       	mov	r15, r1
     d60:	2d c0       	rjmp	.+90     	; 0xdbc <fat_get_dir_entry_of_path+0xf2>
            length_to_sep = sub_path - path;
            ++sub_path;
        }
        else
        {
            length_to_sep = strlen(path);
     d62:	f6 01       	movw	r30, r12
     d64:	01 90       	ld	r0, Z+
     d66:	00 20       	and	r0, r0
     d68:	e9 f7       	brne	.-6      	; 0xd64 <fat_get_dir_entry_of_path+0x9a>
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	ec 19       	sub	r30, r12
     d6e:	fd 09       	sbc	r31, r13
     d70:	ee 2e       	mov	r14, r30
            sub_path = path + length_to_sep;
     d72:	56 01       	movw	r10, r12
     d74:	ae 0e       	add	r10, r30
     d76:	b1 1c       	adc	r11, r1
     d78:	f2 cf       	rjmp	.-28     	; 0xd5e <fat_get_dir_entry_of_path+0x94>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
     d7a:	fe 01       	movw	r30, r28
     d7c:	01 90       	ld	r0, Z+
     d7e:	00 20       	and	r0, r0
     d80:	e9 f7       	brne	.-6      	; 0xd7c <fat_get_dir_entry_of_path+0xb2>
     d82:	31 97       	sbiw	r30, 0x01	; 1
     d84:	3f 01       	movw	r6, r30
     d86:	6c 1a       	sub	r6, r28
     d88:	7d 0a       	sbc	r7, r29
     d8a:	6e 14       	cp	r6, r14
     d8c:	7f 04       	cpc	r7, r15
     d8e:	b1 f4       	brne	.+44     	; 0xdbc <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
     d90:	a3 01       	movw	r20, r6
     d92:	be 01       	movw	r22, r28
     d94:	c6 01       	movw	r24, r12
     d96:	0e 94 b8 0b 	call	0x1770	; 0x1770 <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
     d9a:	89 2b       	or	r24, r25
     d9c:	79 f4       	brne	.+30     	; 0xdbc <fat_get_dir_entry_of_path+0xf2>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
     d9e:	c8 01       	movw	r24, r16
     da0:	0e 94 83 05 	call	0xb06	; 0xb06 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
     da4:	f6 01       	movw	r30, r12
     da6:	e6 0d       	add	r30, r6
     da8:	f7 1d       	adc	r31, r7
     daa:	80 81       	ld	r24, Z
     dac:	88 23       	and	r24, r24
     dae:	29 f1       	breq	.+74     	; 0xdfa <fat_get_dir_entry_of_path+0x130>
     db0:	98 a1       	ldd	r25, Y+32	; 0x20
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
     db2:	89 2f       	mov	r24, r25
     db4:	80 71       	andi	r24, 0x10	; 16
     db6:	94 fd       	sbrc	r25, 4
     db8:	08 c0       	rjmp	.+16     	; 0xdca <fat_get_dir_entry_of_path+0x100>
     dba:	20 c0       	rjmp	.+64     	; 0xdfc <fat_get_dir_entry_of_path+0x132>
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
     dbc:	be 01       	movw	r22, r28
     dbe:	c8 01       	movw	r24, r16
     dc0:	0e 94 96 05 	call	0xb2c	; 0xb2c <fat_read_dir>
     dc4:	81 11       	cpse	r24, r1
     dc6:	d9 cf       	rjmp	.-78     	; 0xd7a <fat_get_dir_entry_of_path+0xb0>
     dc8:	03 c0       	rjmp	.+6      	; 0xdd0 <fat_get_dir_entry_of_path+0x106>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
     dca:	65 01       	movw	r12, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
     dcc:	04 2d       	mov	r16, r4
     dce:	15 2d       	mov	r17, r5

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
     dd0:	c8 01       	movw	r24, r16
     dd2:	0e 94 83 05 	call	0xb06	; 0xb06 <fat_close_dir>
    memset(dir_entry, 0, sizeof(*dir_entry));
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
     dd6:	f6 01       	movw	r30, r12
     dd8:	80 81       	ld	r24, Z
     dda:	81 11       	cpse	r24, r1
     ddc:	ab cf       	rjmp	.-170    	; 0xd34 <fat_get_dir_entry_of_path+0x6a>
            return 1;
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <fat_get_dir_entry_of_path+0x132>
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !path || path[0] == '\0' || !dir_entry)
        return 0;
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	0b c0       	rjmp	.+22     	; 0xdfc <fat_get_dir_entry_of_path+0x132>
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <fat_get_dir_entry_of_path+0x132>
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <fat_get_dir_entry_of_path+0x132>
     dee:	80 e0       	ldi	r24, 0x00	; 0
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <fat_get_dir_entry_of_path+0x132>
    dir_entry->attributes = FAT_ATTRIB_DIR;

    while(1)
    {
        if(path[0] == '\0')
            return 1;
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	03 c0       	rjmp	.+6      	; 0xdfc <fat_get_dir_entry_of_path+0x132>
        }

        fat_close_dir(dd);
    }
    
    return 0;
     df6:	80 e0       	ldi	r24, 0x00	; 0
     df8:	01 c0       	rjmp	.+2      	; 0xdfc <fat_get_dir_entry_of_path+0x132>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	df 90       	pop	r13
     e0a:	cf 90       	pop	r12
     e0c:	bf 90       	pop	r11
     e0e:	af 90       	pop	r10
     e10:	9f 90       	pop	r9
     e12:	8f 90       	pop	r8
     e14:	7f 90       	pop	r7
     e16:	6f 90       	pop	r6
     e18:	5f 90       	pop	r5
     e1a:	4f 90       	pop	r4
     e1c:	08 95       	ret

00000e1e <find_file_in_dir>:
#include "sd_raw.h"
#include "sd_raw_config.h"


uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
     e1e:	ef 92       	push	r14
     e20:	ff 92       	push	r15
     e22:	0f 93       	push	r16
     e24:	1f 93       	push	r17
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
     e2a:	8b 01       	movw	r16, r22
     e2c:	7a 01       	movw	r14, r20
     e2e:	e9 01       	movw	r28, r18
	while(fat_read_dir(dd, dir_entry))
     e30:	0b c0       	rjmp	.+22     	; 0xe48 <find_file_in_dir+0x2a>
	{
		if(strcmp(dir_entry->long_name, name) == 0)
     e32:	b7 01       	movw	r22, r14
     e34:	ce 01       	movw	r24, r28
     e36:	0e 94 af 0b 	call	0x175e	; 0x175e <strcmp>
     e3a:	89 2b       	or	r24, r25
     e3c:	29 f4       	brne	.+10     	; 0xe48 <find_file_in_dir+0x2a>
		{
			fat_reset_dir(dd);
     e3e:	c8 01       	movw	r24, r16
     e40:	0e 94 89 05 	call	0xb12	; 0xb12 <fat_reset_dir>
			return 1;
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	06 c0       	rjmp	.+12     	; 0xe54 <find_file_in_dir+0x36>
#include "sd_raw_config.h"


uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
	while(fat_read_dir(dd, dir_entry))
     e48:	be 01       	movw	r22, r28
     e4a:	c8 01       	movw	r24, r16
     e4c:	0e 94 96 05 	call	0xb2c	; 0xb2c <fat_read_dir>
     e50:	81 11       	cpse	r24, r1
     e52:	ef cf       	rjmp	.-34     	; 0xe32 <find_file_in_dir+0x14>
			return 1;
		}
	}

	return 0;
}
     e54:	df 91       	pop	r29
     e56:	cf 91       	pop	r28
     e58:	1f 91       	pop	r17
     e5a:	0f 91       	pop	r16
     e5c:	ff 90       	pop	r15
     e5e:	ef 90       	pop	r14
     e60:	08 95       	ret

00000e62 <open_file_in_dir>:

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
     e62:	0f 93       	push	r16
     e64:	1f 93       	push	r17
     e66:	cf 93       	push	r28
     e68:	df 93       	push	r29
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	ab 97       	sbiw	r28, 0x2b	; 43
     e70:	0f b6       	in	r0, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	de bf       	out	0x3e, r29	; 62
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	cd bf       	out	0x3d, r28	; 61
     e7a:	8c 01       	movw	r16, r24
	struct fat_dir_entry_struct file_entry;
	if(!find_file_in_dir(fs, dd, name, &file_entry))
     e7c:	9e 01       	movw	r18, r28
     e7e:	2f 5f       	subi	r18, 0xFF	; 255
     e80:	3f 4f       	sbci	r19, 0xFF	; 255
     e82:	0e 94 0f 07 	call	0xe1e	; 0xe1e <find_file_in_dir>
     e86:	88 23       	and	r24, r24
     e88:	39 f0       	breq	.+14     	; 0xe98 <open_file_in_dir+0x36>
	return 0;

	return fat_open_file(fs, &file_entry);
     e8a:	be 01       	movw	r22, r28
     e8c:	6f 5f       	subi	r22, 0xFF	; 255
     e8e:	7f 4f       	sbci	r23, 0xFF	; 255
     e90:	c8 01       	movw	r24, r16
     e92:	0e 94 e7 03 	call	0x7ce	; 0x7ce <fat_open_file>
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <open_file_in_dir+0x3a>

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
	struct fat_dir_entry_struct file_entry;
	if(!find_file_in_dir(fs, dd, name, &file_entry))
	return 0;
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	90 e0       	ldi	r25, 0x00	; 0

	return fat_open_file(fs, &file_entry);
}
     e9c:	ab 96       	adiw	r28, 0x2b	; 43
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	de bf       	out	0x3e, r29	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	cd bf       	out	0x3d, r28	; 61
     ea8:	df 91       	pop	r29
     eaa:	cf 91       	pop	r28
     eac:	1f 91       	pop	r17
     eae:	0f 91       	pop	r16
     eb0:	08 95       	ret

00000eb2 <main>:


int main() {
     eb2:	af 92       	push	r10
     eb4:	bf 92       	push	r11
     eb6:	cf 92       	push	r12
     eb8:	df 92       	push	r13
     eba:	ef 92       	push	r14
     ebc:	ff 92       	push	r15
     ebe:	0f 93       	push	r16
     ec0:	1f 93       	push	r17
     ec2:	cf 93       	push	r28
     ec4:	df 93       	push	r29
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	e3 97       	sbiw	r28, 0x33	; 51
     ecc:	0f b6       	in	r0, 0x3f	; 63
     ece:	f8 94       	cli
     ed0:	de bf       	out	0x3e, r29	; 62
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	cd bf       	out	0x3d, r28	; 61
  /* setup sd card slot */
  sd_raw_init();
     ed6:	0e 94 96 09 	call	0x132c	; 0x132c <sd_raw_init>

  /* open first partition */
  struct partition_struct* partition = partition_open(sd_raw_read, sd_raw_read_interval, 0, 0, 0);
     eda:	00 e0       	ldi	r16, 0x00	; 0
     edc:	20 e0       	ldi	r18, 0x00	; 0
     ede:	30 e0       	ldi	r19, 0x00	; 0
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	50 e0       	ldi	r21, 0x00	; 0
     ee4:	6b e2       	ldi	r22, 0x2B	; 43
     ee6:	7a e0       	ldi	r23, 0x0A	; 10
     ee8:	83 ee       	ldi	r24, 0xE3	; 227
     eea:	98 e0       	ldi	r25, 0x08	; 8
     eec:	0e 94 ca 07 	call	0xf94	; 0xf94 <partition_open>
     ef0:	6c 01       	movw	r12, r24

  if(!partition)
     ef2:	89 2b       	or	r24, r25
     ef4:	61 f4       	brne	.+24     	; 0xf0e <main+0x5c>
  {
	/* If the partition did not open, assume the storage device
		* is a "superfloppy", i.e. has no MBR.
		*/
    partition = partition_open(sd_raw_read, sd_raw_read_interval, 0, 0, -1);
     ef6:	0f ef       	ldi	r16, 0xFF	; 255
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	6b e2       	ldi	r22, 0x2B	; 43
     f02:	7a e0       	ldi	r23, 0x0A	; 10
     f04:	83 ee       	ldi	r24, 0xE3	; 227
     f06:	98 e0       	ldi	r25, 0x08	; 8
     f08:	0e 94 ca 07 	call	0xf94	; 0xf94 <partition_open>
     f0c:	6c 01       	movw	r12, r24
  }

  /* open file system */
  struct fat_fs_struct* fs = fat_open(partition);
     f0e:	c6 01       	movw	r24, r12
     f10:	0e 94 3d 02 	call	0x47a	; 0x47a <fat_open>
     f14:	7c 01       	movw	r14, r24

  /* open root directory */
  struct fat_dir_entry_struct directory;
  fat_get_dir_entry_of_path(fs, "/", &directory);
     f16:	ae 01       	movw	r20, r28
     f18:	4f 5f       	subi	r20, 0xFF	; 255
     f1a:	5f 4f       	sbci	r21, 0xFF	; 255
     f1c:	6d e0       	ldi	r22, 0x0D	; 13
     f1e:	71 e0       	ldi	r23, 0x01	; 1
     f20:	0e 94 65 06 	call	0xcca	; 0xcca <fat_get_dir_entry_of_path>

  struct fat_dir_struct* dd = fat_open_dir(fs, &directory);
     f24:	be 01       	movw	r22, r28
     f26:	6f 5f       	subi	r22, 0xFF	; 255
     f28:	7f 4f       	sbci	r23, 0xFF	; 255
     f2a:	c7 01       	movw	r24, r14
     f2c:	0e 94 45 05 	call	0xa8a	; 0xa8a <fat_open_dir>
     f30:	5c 01       	movw	r10, r24
  struct fat_file_struct* fd = open_file_in_dir(fs, dd, "forecast_d00.dat");
     f32:	4f e0       	ldi	r20, 0x0F	; 15
     f34:	51 e0       	ldi	r21, 0x01	; 1
     f36:	bc 01       	movw	r22, r24
     f38:	c7 01       	movw	r24, r14
     f3a:	0e 94 31 07 	call	0xe62	; 0xe62 <open_file_in_dir>
     f3e:	8c 01       	movw	r16, r24

  uint8_t buffer[8];
  uint32_t offset = 0;
  intptr_t count;
  while((count = fat_read_file(fd, buffer, sizeof(buffer))) > 0)
     f40:	48 e0       	ldi	r20, 0x08	; 8
     f42:	50 e0       	ldi	r21, 0x00	; 0
     f44:	be 01       	movw	r22, r28
     f46:	64 5d       	subi	r22, 0xD4	; 212
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	c8 01       	movw	r24, r16
     f4c:	0e 94 22 04 	call	0x844	; 0x844 <fat_read_file>
     f50:	18 16       	cp	r1, r24
     f52:	19 06       	cpc	r1, r25
     f54:	ac f3       	brlt	.-22     	; 0xf40 <main+0x8e>
  {
    /* do something with the data in buffer here */
	offset += sizeof(buffer);
  }

  fat_close_file(fd);
     f56:	c8 01       	movw	r24, r16
     f58:	0e 94 1c 04 	call	0x838	; 0x838 <fat_close_file>
  
  /* close directory */
  fat_close_dir(dd);
     f5c:	c5 01       	movw	r24, r10
     f5e:	0e 94 83 05 	call	0xb06	; 0xb06 <fat_close_dir>

  /* close file system */
  fat_close(fs);
     f62:	c7 01       	movw	r24, r14
     f64:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <fat_close>

  /* close partition */
  partition_close(partition);
     f68:	c6 01       	movw	r24, r12
     f6a:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <partition_close>
}
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	e3 96       	adiw	r28, 0x33	; 51
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	de bf       	out	0x3e, r29	; 62
     f7a:	0f be       	out	0x3f, r0	; 63
     f7c:	cd bf       	out	0x3d, r28	; 61
     f7e:	df 91       	pop	r29
     f80:	cf 91       	pop	r28
     f82:	1f 91       	pop	r17
     f84:	0f 91       	pop	r16
     f86:	ff 90       	pop	r15
     f88:	ef 90       	pop	r14
     f8a:	df 90       	pop	r13
     f8c:	cf 90       	pop	r12
     f8e:	bf 90       	pop	r11
     f90:	af 90       	pop	r10
     f92:	08 95       	ret

00000f94 <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
     f94:	8f 92       	push	r8
     f96:	9f 92       	push	r9
     f98:	af 92       	push	r10
     f9a:	bf 92       	push	r11
     f9c:	cf 92       	push	r12
     f9e:	df 92       	push	r13
     fa0:	ef 92       	push	r14
     fa2:	ff 92       	push	r15
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	cf 93       	push	r28
     faa:	df 93       	push	r29
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	60 97       	sbiw	r28, 0x10	; 16
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
     fbc:	00 97       	sbiw	r24, 0x00	; 0
     fbe:	29 f1       	breq	.+74     	; 0x100a <partition_open+0x76>
     fc0:	61 15       	cp	r22, r1
     fc2:	71 05       	cpc	r23, r1
     fc4:	29 f1       	breq	.+74     	; 0x1010 <partition_open+0x7c>
     fc6:	04 30       	cpi	r16, 0x04	; 4
     fc8:	34 f5       	brge	.+76     	; 0x1016 <partition_open+0x82>
        return 0;

    if(index >= 0)
     fca:	00 23       	and	r16, r16
     fcc:	0c f4       	brge	.+2      	; 0xfd0 <partition_open+0x3c>
     fce:	6b c0       	rjmp	.+214    	; 0x10a6 <partition_open+0x112>
     fd0:	49 01       	movw	r8, r18
     fd2:	5a 01       	movw	r10, r20
     fd4:	6b 01       	movw	r12, r22
     fd6:	7c 01       	movw	r14, r24
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
     fd8:	80 e1       	ldi	r24, 0x10	; 16
     fda:	08 02       	muls	r16, r24
     fdc:	b0 01       	movw	r22, r0
     fde:	11 24       	eor	r1, r1
     fe0:	62 54       	subi	r22, 0x42	; 66
     fe2:	7e 4f       	sbci	r23, 0xFE	; 254
     fe4:	07 2e       	mov	r0, r23
     fe6:	00 0c       	add	r0, r0
     fe8:	88 0b       	sbc	r24, r24
     fea:	99 0b       	sbc	r25, r25
     fec:	20 e1       	ldi	r18, 0x10	; 16
     fee:	30 e0       	ldi	r19, 0x00	; 0
     ff0:	ae 01       	movw	r20, r28
     ff2:	4f 5f       	subi	r20, 0xFF	; 255
     ff4:	5f 4f       	sbci	r21, 0xFF	; 255
     ff6:	f7 01       	movw	r30, r14
     ff8:	09 95       	icall
     ffa:	88 23       	and	r24, r24
     ffc:	79 f0       	breq	.+30     	; 0x101c <partition_open+0x88>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
     ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    1000:	81 11       	cpse	r24, r1
    1002:	37 c0       	rjmp	.+110    	; 0x1072 <partition_open+0xde>
            return 0;
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	54 c0       	rjmp	.+168    	; 0x10b2 <partition_open+0x11e>
{
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
        return 0;
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	51 c0       	rjmp	.+162    	; 0x10b2 <partition_open+0x11e>
    1010:	80 e0       	ldi	r24, 0x00	; 0
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	4e c0       	rjmp	.+156    	; 0x10b2 <partition_open+0x11e>
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	4b c0       	rjmp	.+150    	; 0x10b2 <partition_open+0x11e>

    if(index >= 0)
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
            return 0;
    101c:	80 e0       	ldi	r24, 0x00	; 0
    101e:	90 e0       	ldi	r25, 0x00	; 0
    1020:	48 c0       	rjmp	.+144    	; 0x10b2 <partition_open+0x11e>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    1022:	01 ed       	ldi	r16, 0xD1	; 209
    1024:	11 e0       	ldi	r17, 0x01	; 1
    1026:	81 e1       	ldi	r24, 0x11	; 17
    1028:	d8 01       	movw	r26, r16
    102a:	1d 92       	st	X+, r1
    102c:	8a 95       	dec	r24
    102e:	e9 f7       	brne	.-6      	; 0x102a <partition_open+0x96>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    1030:	f8 01       	movw	r30, r16
    1032:	f1 82       	std	Z+1, r15	; 0x01
    1034:	e0 82       	st	Z, r14
    new_partition->device_read_interval = device_read_interval;
    1036:	d3 82       	std	Z+3, r13	; 0x03
    1038:	c2 82       	std	Z+2, r12	; 0x02
    new_partition->device_write = device_write;
    103a:	b5 82       	std	Z+5, r11	; 0x05
    103c:	a4 82       	std	Z+4, r10	; 0x04
    new_partition->device_write_interval = device_write_interval;
    103e:	97 82       	std	Z+7, r9	; 0x07
    1040:	86 82       	std	Z+6, r8	; 0x06

    if(index >= 0)
    {
        new_partition->type = buffer[4];
    1042:	8d 81       	ldd	r24, Y+5	; 0x05
    1044:	80 87       	std	Z+8, r24	; 0x08
        new_partition->offset = read32(&buffer[8]);
    1046:	ce 01       	movw	r24, r28
    1048:	09 96       	adiw	r24, 0x09	; 9
    104a:	0e 94 7f 00 	call	0xfe	; 0xfe <read32>
    104e:	d8 01       	movw	r26, r16
    1050:	19 96       	adiw	r26, 0x09	; 9
    1052:	6d 93       	st	X+, r22
    1054:	7d 93       	st	X+, r23
    1056:	8d 93       	st	X+, r24
    1058:	9c 93       	st	X, r25
    105a:	1c 97       	sbiw	r26, 0x0c	; 12
        new_partition->length = read32(&buffer[12]);
    105c:	ce 01       	movw	r24, r28
    105e:	0d 96       	adiw	r24, 0x0d	; 13
    1060:	0e 94 7f 00 	call	0xfe	; 0xfe <read32>
    1064:	f8 01       	movw	r30, r16
    1066:	65 87       	std	Z+13, r22	; 0x0d
    1068:	76 87       	std	Z+14, r23	; 0x0e
    106a:	87 87       	std	Z+15, r24	; 0x0f
    106c:	90 8b       	std	Z+16, r25	; 0x10
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    106e:	c8 01       	movw	r24, r16
    1070:	20 c0       	rjmp	.+64     	; 0x10b2 <partition_open+0x11e>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    1072:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <partition_handles+0x8>
    1076:	88 23       	and	r24, r24
    1078:	a1 f2       	breq	.-88     	; 0x1022 <partition_open+0x8e>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	19 c0       	rjmp	.+50     	; 0x10b2 <partition_open+0x11e>
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    1080:	e1 ed       	ldi	r30, 0xD1	; 209
    1082:	f1 e0       	ldi	r31, 0x01	; 1
    1084:	11 e1       	ldi	r17, 0x11	; 17
    1086:	df 01       	movw	r26, r30
    1088:	1d 92       	st	X+, r1
    108a:	1a 95       	dec	r17
    108c:	e9 f7       	brne	.-6      	; 0x1088 <partition_open+0xf4>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
    new_partition->device_read_interval = device_read_interval;
    1092:	73 83       	std	Z+3, r23	; 0x03
    1094:	62 83       	std	Z+2, r22	; 0x02
    new_partition->device_write = device_write;
    1096:	55 83       	std	Z+5, r21	; 0x05
    1098:	44 83       	std	Z+4, r20	; 0x04
    new_partition->device_write_interval = device_write_interval;
    109a:	37 83       	std	Z+7, r19	; 0x07
    109c:	26 83       	std	Z+6, r18	; 0x06
        new_partition->offset = read32(&buffer[8]);
        new_partition->length = read32(&buffer[12]);
    }
    else
    {
        new_partition->type = 0xff;
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	80 87       	std	Z+8, r24	; 0x08
#if USE_DYNAMIC_MEMORY
    new_partition = malloc(sizeof(*new_partition));
    if(!new_partition)
        return 0;
#else
    new_partition = partition_handles;
    10a2:	cf 01       	movw	r24, r30
    10a4:	06 c0       	rjmp	.+12     	; 0x10b2 <partition_open+0x11e>
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    10a6:	e0 91 d9 01 	lds	r30, 0x01D9	; 0x8001d9 <partition_handles+0x8>
    10aa:	ee 23       	and	r30, r30
    10ac:	49 f3       	breq	.-46     	; 0x1080 <partition_open+0xec>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    10b2:	60 96       	adiw	r28, 0x10	; 16
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	9f 90       	pop	r9
    10d4:	8f 90       	pop	r8
    10d6:	08 95       	ret

000010d8 <partition_close>:
 * \returns 0 on failure, 1 on success.
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	21 f0       	breq	.+8      	; 0x10e4 <partition_close+0xc>

    /* destroy partition descriptor */
#if USE_DYNAMIC_MEMORY
    free(partition);
#else
    partition->type = PARTITION_TYPE_FREE;
    10dc:	fc 01       	movw	r30, r24
    10de:	10 86       	std	Z+8, r1	; 0x08
#endif

    return 1;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
    10e2:	08 95       	ret
 * \see partition_open
 */
uint8_t partition_close(struct partition_struct* partition)
{
    if(!partition)
        return 0;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
#else
    partition->type = PARTITION_TYPE_FREE;
#endif

    return 1;
}
    10e6:	08 95       	ret

000010e8 <sd_raw_send_byte>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    10e8:	8e bd       	out	0x2e, r24	; 46
    10ea:	0d b4       	in	r0, 0x2d	; 45
    10ec:	07 fe       	sbrs	r0, 7
    10ee:	fd cf       	rjmp	.-6      	; 0x10ea <sd_raw_send_byte+0x2>
    10f0:	8d b5       	in	r24, 0x2d	; 45
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	8d bd       	out	0x2d, r24	; 45
    10f6:	08 95       	ret

000010f8 <sd_raw_rec_byte>:
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	8e bd       	out	0x2e, r24	; 46
    10fc:	0d b4       	in	r0, 0x2d	; 45
    10fe:	07 fe       	sbrs	r0, 7
    1100:	fd cf       	rjmp	.-6      	; 0x10fc <sd_raw_rec_byte+0x4>
    1102:	8d b5       	in	r24, 0x2d	; 45
    1104:	8f 77       	andi	r24, 0x7F	; 127
    1106:	8d bd       	out	0x2d, r24	; 45
    1108:	8e b5       	in	r24, 0x2e	; 46
    110a:	08 95       	ret

0000110c <sd_raw_send_command>:
    110c:	ff 92       	push	r15
    110e:	0f 93       	push	r16
    1110:	1f 93       	push	r17
    1112:	cf 93       	push	r28
    1114:	df 93       	push	r29
    1116:	c8 2f       	mov	r28, r24
    1118:	d4 2f       	mov	r29, r20
    111a:	15 2f       	mov	r17, r21
    111c:	06 2f       	mov	r16, r22
    111e:	f7 2e       	mov	r15, r23
    1120:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    1124:	8c 2f       	mov	r24, r28
    1126:	80 64       	ori	r24, 0x40	; 64
    1128:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    112c:	8f 2d       	mov	r24, r15
    112e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    1132:	80 2f       	mov	r24, r16
    1134:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    1138:	81 2f       	mov	r24, r17
    113a:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    113e:	8d 2f       	mov	r24, r29
    1140:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    1144:	cc 23       	and	r28, r28
    1146:	19 f0       	breq	.+6      	; 0x114e <sd_raw_send_command+0x42>
    1148:	c8 30       	cpi	r28, 0x08	; 8
    114a:	29 f0       	breq	.+10     	; 0x1156 <sd_raw_send_command+0x4a>
    114c:	08 c0       	rjmp	.+16     	; 0x115e <sd_raw_send_command+0x52>
    114e:	85 e9       	ldi	r24, 0x95	; 149
    1150:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    1154:	0f c0       	rjmp	.+30     	; 0x1174 <sd_raw_send_command+0x68>
    1156:	87 e8       	ldi	r24, 0x87	; 135
    1158:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    115c:	0b c0       	rjmp	.+22     	; 0x1174 <sd_raw_send_command+0x68>
    115e:	8f ef       	ldi	r24, 0xFF	; 255
    1160:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    1164:	07 c0       	rjmp	.+14     	; 0x1174 <sd_raw_send_command+0x68>
    1166:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    116a:	8f 3f       	cpi	r24, 0xFF	; 255
    116c:	29 f4       	brne	.+10     	; 0x1178 <sd_raw_send_command+0x6c>
    116e:	c1 50       	subi	r28, 0x01	; 1
    1170:	d1 f7       	brne	.-12     	; 0x1166 <sd_raw_send_command+0x5a>
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <sd_raw_send_command+0x6c>
    1174:	ca e0       	ldi	r28, 0x0A	; 10
    1176:	f7 cf       	rjmp	.-18     	; 0x1166 <sd_raw_send_command+0x5a>
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	08 95       	ret

00001184 <sd_raw_available>:
    1184:	86 b1       	in	r24, 0x06	; 6
    1186:	86 fb       	bst	r24, 6
    1188:	88 27       	eor	r24, r24
    118a:	80 f9       	bld	r24, 0
    118c:	91 e0       	ldi	r25, 0x01	; 1
    118e:	89 27       	eor	r24, r25
    1190:	08 95       	ret

00001192 <sd_raw_sync>:
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    1192:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <raw_block_written>
    1196:	81 11       	cpse	r24, r1
    1198:	14 c0       	rjmp	.+40     	; 0x11c2 <sd_raw_sync+0x30>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    119a:	60 91 e4 01 	lds	r22, 0x01E4	; 0x8001e4 <raw_block_address>
    119e:	70 91 e5 01 	lds	r23, 0x01E5	; 0x8001e5 <raw_block_address+0x1>
    11a2:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <raw_block_address+0x2>
    11a6:	90 91 e7 01 	lds	r25, 0x01E7	; 0x8001e7 <raw_block_address+0x3>
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	32 e0       	ldi	r19, 0x02	; 2
    11ae:	48 ee       	ldi	r20, 0xE8	; 232
    11b0:	51 e0       	ldi	r21, 0x01	; 1
    11b2:	0e 94 85 0a 	call	0x150a	; 0x150a <sd_raw_write>
    11b6:	88 23       	and	r24, r24
    11b8:	29 f0       	breq	.+10     	; 0x11c4 <sd_raw_sync+0x32>
        return 0;
    raw_block_written = 1;
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <raw_block_written>
#endif
    return 1;
    11c0:	08 95       	ret
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    raw_block_written = 1;
#endif
    return 1;
}
    11c4:	08 95       	ret

000011c6 <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    11c6:	2f 92       	push	r2
    11c8:	3f 92       	push	r3
    11ca:	4f 92       	push	r4
    11cc:	5f 92       	push	r5
    11ce:	6f 92       	push	r6
    11d0:	7f 92       	push	r7
    11d2:	8f 92       	push	r8
    11d4:	9f 92       	push	r9
    11d6:	af 92       	push	r10
    11d8:	bf 92       	push	r11
    11da:	cf 92       	push	r12
    11dc:	df 92       	push	r13
    11de:	ef 92       	push	r14
    11e0:	ff 92       	push	r15
    11e2:	0f 93       	push	r16
    11e4:	1f 93       	push	r17
    11e6:	cf 93       	push	r28
    11e8:	df 93       	push	r29
    11ea:	00 d0       	rcall	.+0      	; 0x11ec <sd_raw_read+0x26>
    11ec:	00 d0       	rcall	.+0      	; 0x11ee <sd_raw_read+0x28>
    11ee:	cd b7       	in	r28, 0x3d	; 61
    11f0:	de b7       	in	r29, 0x3e	; 62
    11f2:	4b 01       	movw	r8, r22
    11f4:	5c 01       	movw	r10, r24
    11f6:	5a 83       	std	Y+2, r21	; 0x02
    11f8:	49 83       	std	Y+1, r20	; 0x01
    11fa:	79 01       	movw	r14, r18
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    11fc:	23 2b       	or	r18, r19
    11fe:	09 f4       	brne	.+2      	; 0x1202 <sd_raw_read+0x3c>
    1200:	7d c0       	rjmp	.+250    	; 0x12fc <sd_raw_read+0x136>
    1202:	08 ee       	ldi	r16, 0xE8	; 232
    1204:	13 e0       	ldi	r17, 0x03	; 3
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    1206:	14 01       	movw	r2, r8
    1208:	81 e0       	ldi	r24, 0x01	; 1
    120a:	38 22       	and	r3, r24
        block_address = offset - block_offset;
    120c:	24 01       	movw	r4, r8
    120e:	35 01       	movw	r6, r10
    1210:	42 18       	sub	r4, r2
    1212:	53 08       	sbc	r5, r3
    1214:	61 08       	sbc	r6, r1
    1216:	71 08       	sbc	r7, r1
    1218:	c1 2c       	mov	r12, r1
    121a:	68 94       	set
    121c:	dd 24       	eor	r13, r13
    121e:	d1 f8       	bld	r13, 1
    1220:	c2 18       	sub	r12, r2
    1222:	d3 08       	sbc	r13, r3
    1224:	ec 14       	cp	r14, r12
    1226:	fd 04       	cpc	r15, r13
    1228:	08 f4       	brcc	.+2      	; 0x122c <sd_raw_read+0x66>
    122a:	67 01       	movw	r12, r14
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    122c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <raw_block_address>
    1230:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <raw_block_address+0x1>
    1234:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <raw_block_address+0x2>
    1238:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <raw_block_address+0x3>
    123c:	48 16       	cp	r4, r24
    123e:	59 06       	cpc	r5, r25
    1240:	6a 06       	cpc	r6, r26
    1242:	7b 06       	cpc	r7, r27
    1244:	09 f4       	brne	.+2      	; 0x1248 <sd_raw_read+0x82>
    1246:	40 c0       	rjmp	.+128    	; 0x12c8 <sd_raw_read+0x102>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1248:	0e 94 c9 08 	call	0x1192	; 0x1192 <sd_raw_sync>
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <sd_raw_read+0x8c>
    1250:	56 c0       	rjmp	.+172    	; 0x12fe <sd_raw_read+0x138>
                return 0;
#endif

            /* address card */
            select_card();
    1252:	28 98       	cbi	0x05, 0	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
    1254:	b3 01       	movw	r22, r6
    1256:	a2 01       	movw	r20, r4
    1258:	81 e1       	ldi	r24, 0x11	; 17
    125a:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
    125e:	88 23       	and	r24, r24
    1260:	19 f0       	breq	.+6      	; 0x1268 <sd_raw_read+0xa2>
#endif
            {
                unselect_card();
    1262:	28 9a       	sbi	0x05, 0	; 5
                return 0;
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	4b c0       	rjmp	.+150    	; 0x12fe <sd_raw_read+0x138>
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    1268:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    126c:	8e 3f       	cpi	r24, 0xFE	; 254
    126e:	e1 f7       	brne	.-8      	; 0x1268 <sd_raw_read+0xa2>
    1270:	e8 ee       	ldi	r30, 0xE8	; 232
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	fc 83       	std	Y+4, r31	; 0x04
    1276:	eb 83       	std	Y+3, r30	; 0x03
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    1278:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    127c:	eb 81       	ldd	r30, Y+3	; 0x03
    127e:	fc 81       	ldd	r31, Y+4	; 0x04
    1280:	81 93       	st	Z+, r24
    1282:	fc 83       	std	Y+4, r31	; 0x04
    1284:	eb 83       	std	Y+3, r30	; 0x03
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    1286:	0e 17       	cp	r16, r30
    1288:	1f 07       	cpc	r17, r31
    128a:	b1 f7       	brne	.-20     	; 0x1278 <sd_raw_read+0xb2>
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    128c:	40 92 e4 01 	sts	0x01E4, r4	; 0x8001e4 <raw_block_address>
    1290:	50 92 e5 01 	sts	0x01E5, r5	; 0x8001e5 <raw_block_address+0x1>
    1294:	60 92 e6 01 	sts	0x01E6, r6	; 0x8001e6 <raw_block_address+0x2>
    1298:	70 92 e7 01 	sts	0x01E7, r7	; 0x8001e7 <raw_block_address+0x3>

            memcpy(buffer, raw_block + block_offset, read_length);
    129c:	b1 01       	movw	r22, r2
    129e:	68 51       	subi	r22, 0x18	; 24
    12a0:	7e 4f       	sbci	r23, 0xFE	; 254
    12a2:	a6 01       	movw	r20, r12
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	9a 81       	ldd	r25, Y+2	; 0x02
    12a8:	0e 94 9b 0b 	call	0x1736	; 0x1736 <memcpy>
            buffer += read_length;
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	9a 81       	ldd	r25, Y+2	; 0x02
    12b0:	8c 0d       	add	r24, r12
    12b2:	9d 1d       	adc	r25, r13
    12b4:	9a 83       	std	Y+2, r25	; 0x02
    12b6:	89 83       	std	Y+1, r24	; 0x01
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    12b8:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
            sd_raw_rec_byte();
    12bc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    12c0:	28 9a       	sbi	0x05, 0	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    12c2:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    12c6:	0e c0       	rjmp	.+28     	; 0x12e4 <sd_raw_read+0x11e>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    12c8:	b1 01       	movw	r22, r2
    12ca:	68 51       	subi	r22, 0x18	; 24
    12cc:	7e 4f       	sbci	r23, 0xFE	; 254
    12ce:	a6 01       	movw	r20, r12
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	0e 94 9b 0b 	call	0x1736	; 0x1736 <memcpy>
            buffer += read_length;
    12d8:	e9 81       	ldd	r30, Y+1	; 0x01
    12da:	fa 81       	ldd	r31, Y+2	; 0x02
    12dc:	ec 0d       	add	r30, r12
    12de:	fd 1d       	adc	r31, r13
    12e0:	fa 83       	std	Y+2, r31	; 0x02
    12e2:	e9 83       	std	Y+1, r30	; 0x01
        }
#endif

        length -= read_length;
    12e4:	ec 18       	sub	r14, r12
    12e6:	fd 08       	sbc	r15, r13
        offset += read_length;
    12e8:	8c 0c       	add	r8, r12
    12ea:	9d 1c       	adc	r9, r13
    12ec:	a1 1c       	adc	r10, r1
    12ee:	b1 1c       	adc	r11, r1
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    12f0:	e1 14       	cp	r14, r1
    12f2:	f1 04       	cpc	r15, r1
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <sd_raw_read+0x132>
    12f6:	87 cf       	rjmp	.-242    	; 0x1206 <sd_raw_read+0x40>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	01 c0       	rjmp	.+2      	; 0x12fe <sd_raw_read+0x138>
    12fc:	81 e0       	ldi	r24, 0x01	; 1
}
    12fe:	0f 90       	pop	r0
    1300:	0f 90       	pop	r0
    1302:	0f 90       	pop	r0
    1304:	0f 90       	pop	r0
    1306:	df 91       	pop	r29
    1308:	cf 91       	pop	r28
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	9f 90       	pop	r9
    131c:	8f 90       	pop	r8
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	3f 90       	pop	r3
    1328:	2f 90       	pop	r2
    132a:	08 95       	ret

0000132c <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    132c:	0f 93       	push	r16
    132e:	1f 93       	push	r17
    1330:	cf 93       	push	r28
    1332:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    1334:	3e 98       	cbi	0x07, 6	; 7
    configure_pin_locked();
    1336:	3f 98       	cbi	0x07, 7	; 7

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    1338:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
    133a:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
    133c:	20 9a       	sbi	0x04, 0	; 4
    configure_pin_miso();
    133e:	23 98       	cbi	0x04, 3	; 4

    unselect_card();
    1340:	28 9a       	sbi	0x05, 0	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    1342:	83 e5       	ldi	r24, 0x53	; 83
    1344:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    1346:	8d b5       	in	r24, 0x2d	; 45
    1348:	8e 7f       	andi	r24, 0xFE	; 254
    134a:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    134c:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <sd_raw_card_type>
    
    if(!sd_raw_available())
    1350:	0e 94 c2 08 	call	0x1184	; 0x1184 <sd_raw_available>
    1354:	08 2f       	mov	r16, r24
    1356:	88 23       	and	r24, r24
    1358:	09 f4       	brne	.+2      	; 0x135c <sd_raw_init+0x30>
    135a:	77 c0       	rjmp	.+238    	; 0x144a <sd_raw_init+0x11e>
    135c:	1a e0       	ldi	r17, 0x0A	; 10

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    135e:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    1362:	11 50       	subi	r17, 0x01	; 1
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    1364:	e1 f7       	brne	.-8      	; 0x135e <sd_raw_init+0x32>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    1366:	28 98       	cbi	0x05, 0	; 5
    1368:	c0 e0       	ldi	r28, 0x00	; 0
    136a:	d2 e0       	ldi	r29, 0x02	; 2

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    136c:	40 e0       	ldi	r20, 0x00	; 0
    136e:	50 e0       	ldi	r21, 0x00	; 0
    1370:	ba 01       	movw	r22, r20
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
        if(response == (1 << R1_IDLE_STATE))
    1378:	81 30       	cpi	r24, 0x01	; 1
    137a:	29 f0       	breq	.+10     	; 0x1386 <sd_raw_init+0x5a>
    137c:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x1ff)
    137e:	b1 f7       	brne	.-20     	; 0x136c <sd_raw_init+0x40>
        {
            unselect_card();
    1380:	28 9a       	sbi	0x05, 0	; 5
            return 0;
    1382:	01 2f       	mov	r16, r17
    1384:	62 c0       	rjmp	.+196    	; 0x144a <sd_raw_init+0x11e>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    1386:	40 e0       	ldi	r20, 0x00	; 0
    1388:	50 e0       	ldi	r21, 0x00	; 0
    138a:	ba 01       	movw	r22, r20
    138c:	87 e3       	ldi	r24, 0x37	; 55
    138e:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	ba 01       	movw	r22, r20
    1398:	89 e2       	ldi	r24, 0x29	; 41
    139a:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    139e:	82 fd       	sbrc	r24, 2
    13a0:	05 c0       	rjmp	.+10     	; 0x13ac <sd_raw_init+0x80>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    13a2:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sd_raw_card_type>
    13a6:	81 60       	ori	r24, 0x01	; 1
    13a8:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <sd_raw_card_type>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    13ac:	c0 e0       	ldi	r28, 0x00	; 0
    13ae:	d0 e8       	ldi	r29, 0x80	; 128
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    13b0:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sd_raw_card_type>
    13b4:	83 70       	andi	r24, 0x03	; 3
    13b6:	69 f0       	breq	.+26     	; 0x13d2 <sd_raw_init+0xa6>
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
#endif
            sd_raw_send_command(CMD_APP, 0);
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	50 e0       	ldi	r21, 0x00	; 0
    13bc:	ba 01       	movw	r22, r20
    13be:	87 e3       	ldi	r24, 0x37	; 55
    13c0:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    13c4:	40 e0       	ldi	r20, 0x00	; 0
    13c6:	50 e0       	ldi	r21, 0x00	; 0
    13c8:	ba 01       	movw	r22, r20
    13ca:	89 e2       	ldi	r24, 0x29	; 41
    13cc:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
    13d0:	06 c0       	rjmp	.+12     	; 0x13de <sd_raw_init+0xb2>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	ba 01       	movw	r22, r20
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    13de:	08 2f       	mov	r16, r24
    13e0:	01 70       	andi	r16, 0x01	; 1
    13e2:	80 ff       	sbrs	r24, 0
    13e4:	05 c0       	rjmp	.+10     	; 0x13f0 <sd_raw_init+0xc4>
    13e6:	21 97       	sbiw	r28, 0x01	; 1
            break;

        if(i == 0x7fff)
    13e8:	19 f7       	brne	.-58     	; 0x13b0 <sd_raw_init+0x84>
        {
            unselect_card();
    13ea:	28 9a       	sbi	0x05, 0	; 5
            return 0;
    13ec:	01 2f       	mov	r16, r17
    13ee:	2d c0       	rjmp	.+90     	; 0x144a <sd_raw_init+0x11e>
        sd_raw_rec_byte();
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    13f0:	40 e0       	ldi	r20, 0x00	; 0
    13f2:	52 e0       	ldi	r21, 0x02	; 2
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	70 e0       	ldi	r23, 0x00	; 0
    13f8:	80 e1       	ldi	r24, 0x10	; 16
    13fa:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
    13fe:	88 23       	and	r24, r24
    1400:	11 f0       	breq	.+4      	; 0x1406 <sd_raw_init+0xda>
    {
        unselect_card();
    1402:	28 9a       	sbi	0x05, 0	; 5
        return 0;
    1404:	22 c0       	rjmp	.+68     	; 0x144a <sd_raw_init+0x11e>
    }

    /* deaddress card */
    unselect_card();
    1406:	28 9a       	sbi	0x05, 0	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    1408:	8c b5       	in	r24, 0x2c	; 44
    140a:	8c 7f       	andi	r24, 0xFC	; 252
    140c:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    140e:	8d b5       	in	r24, 0x2d	; 45
    1410:	81 60       	ori	r24, 0x01	; 1
    1412:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    1414:	8f ef       	ldi	r24, 0xFF	; 255
    1416:	9f ef       	ldi	r25, 0xFF	; 255
    1418:	dc 01       	movw	r26, r24
    141a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <raw_block_address>
    141e:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <raw_block_address+0x1>
    1422:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <raw_block_address+0x2>
    1426:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <raw_block_address+0x3>
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <raw_block_written>
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	32 e0       	ldi	r19, 0x02	; 2
    1434:	48 ee       	ldi	r20, 0xE8	; 232
    1436:	51 e0       	ldi	r21, 0x01	; 1
    1438:	60 e0       	ldi	r22, 0x00	; 0
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	cb 01       	movw	r24, r22
    143e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <sd_raw_read>

    /* initialization procedure */
    sd_raw_card_type = 0;
    
    if(!sd_raw_available())
        return 0;
    1442:	01 e0       	ldi	r16, 0x01	; 1
    1444:	81 11       	cpse	r24, r1
    1446:	01 c0       	rjmp	.+2      	; 0x144a <sd_raw_init+0x11e>
    1448:	00 e0       	ldi	r16, 0x00	; 0
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    144a:	80 2f       	mov	r24, r16
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    1456:	2f 92       	push	r2
    1458:	3f 92       	push	r3
    145a:	4f 92       	push	r4
    145c:	5f 92       	push	r5
    145e:	6f 92       	push	r6
    1460:	7f 92       	push	r7
    1462:	8f 92       	push	r8
    1464:	9f 92       	push	r9
    1466:	af 92       	push	r10
    1468:	bf 92       	push	r11
    146a:	cf 92       	push	r12
    146c:	df 92       	push	r13
    146e:	ef 92       	push	r14
    1470:	ff 92       	push	r15
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	4b 01       	movw	r8, r22
    147c:	5c 01       	movw	r10, r24
    147e:	1a 01       	movw	r2, r20
    1480:	e9 01       	movw	r28, r18
    if(!buffer || interval == 0 || length < interval || !callback)
    1482:	45 2b       	or	r20, r21
    1484:	31 f1       	breq	.+76     	; 0x14d2 <sd_raw_read_interval+0x7c>
    1486:	20 97       	sbiw	r28, 0x00	; 0
    1488:	31 f1       	breq	.+76     	; 0x14d6 <sd_raw_read_interval+0x80>
    148a:	02 17       	cp	r16, r18
    148c:	13 07       	cpc	r17, r19
    148e:	28 f1       	brcs	.+74     	; 0x14da <sd_raw_read_interval+0x84>
    1490:	e1 14       	cp	r14, r1
    1492:	f1 04       	cpc	r15, r1
    1494:	21 f1       	breq	.+72     	; 0x14de <sd_raw_read_interval+0x88>
    1496:	29 01       	movw	r4, r18
    1498:	61 2c       	mov	r6, r1
    149a:	71 2c       	mov	r7, r1
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    149c:	9e 01       	movw	r18, r28
    149e:	a1 01       	movw	r20, r2
    14a0:	c5 01       	movw	r24, r10
    14a2:	b4 01       	movw	r22, r8
    14a4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <sd_raw_read>
    14a8:	88 23       	and	r24, r24
    14aa:	e1 f0       	breq	.+56     	; 0x14e4 <sd_raw_read_interval+0x8e>
            return 0;
        if(!callback(buffer, offset, p))
    14ac:	96 01       	movw	r18, r12
    14ae:	b5 01       	movw	r22, r10
    14b0:	a4 01       	movw	r20, r8
    14b2:	c1 01       	movw	r24, r2
    14b4:	f7 01       	movw	r30, r14
    14b6:	09 95       	icall
    14b8:	88 23       	and	r24, r24
    14ba:	99 f0       	breq	.+38     	; 0x14e2 <sd_raw_read_interval+0x8c>
    14bc:	84 0c       	add	r8, r4
    14be:	95 1c       	adc	r9, r5
    14c0:	a6 1c       	adc	r10, r6
    14c2:	b7 1c       	adc	r11, r7
            break;
        offset += interval;
        length -= interval;
    14c4:	0c 1b       	sub	r16, r28
    14c6:	1d 0b       	sbc	r17, r29
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    14c8:	0c 17       	cp	r16, r28
    14ca:	1d 07       	cpc	r17, r29
    14cc:	38 f7       	brcc	.-50     	; 0x149c <sd_raw_read_interval+0x46>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	09 c0       	rjmp	.+18     	; 0x14e4 <sd_raw_read_interval+0x8e>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	07 c0       	rjmp	.+14     	; 0x14e4 <sd_raw_read_interval+0x8e>
    14d6:	80 e0       	ldi	r24, 0x00	; 0
    14d8:	05 c0       	rjmp	.+10     	; 0x14e4 <sd_raw_read_interval+0x8e>
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <sd_raw_read_interval+0x8e>
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	01 c0       	rjmp	.+2      	; 0x14e4 <sd_raw_read_interval+0x8e>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	ff 90       	pop	r15
    14ee:	ef 90       	pop	r14
    14f0:	df 90       	pop	r13
    14f2:	cf 90       	pop	r12
    14f4:	bf 90       	pop	r11
    14f6:	af 90       	pop	r10
    14f8:	9f 90       	pop	r9
    14fa:	8f 90       	pop	r8
    14fc:	7f 90       	pop	r7
    14fe:	6f 90       	pop	r6
    1500:	5f 90       	pop	r5
    1502:	4f 90       	pop	r4
    1504:	3f 90       	pop	r3
    1506:	2f 90       	pop	r2
    1508:	08 95       	ret

0000150a <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    150a:	2f 92       	push	r2
    150c:	3f 92       	push	r3
    150e:	4f 92       	push	r4
    1510:	5f 92       	push	r5
    1512:	6f 92       	push	r6
    1514:	7f 92       	push	r7
    1516:	8f 92       	push	r8
    1518:	9f 92       	push	r9
    151a:	af 92       	push	r10
    151c:	bf 92       	push	r11
    151e:	cf 92       	push	r12
    1520:	df 92       	push	r13
    1522:	ef 92       	push	r14
    1524:	ff 92       	push	r15
    1526:	0f 93       	push	r16
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	4b 01       	movw	r8, r22
    1530:	5c 01       	movw	r10, r24
    1532:	1a 01       	movw	r2, r20
    1534:	69 01       	movw	r12, r18
    if(sd_raw_locked())
    1536:	37 9b       	sbis	0x06, 7	; 6
    1538:	86 c0       	rjmp	.+268    	; 0x1646 <sd_raw_write+0x13c>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    153a:	23 2b       	or	r18, r19
    153c:	09 f4       	brne	.+2      	; 0x1540 <sd_raw_write+0x36>
    153e:	85 c0       	rjmp	.+266    	; 0x164a <sd_raw_write+0x140>
    1540:	08 ee       	ldi	r16, 0xE8	; 232
    1542:	13 e0       	ldi	r17, 0x03	; 3
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    1544:	e4 01       	movw	r28, r8
    1546:	d1 70       	andi	r29, 0x01	; 1
        block_address = offset - block_offset;
    1548:	24 01       	movw	r4, r8
    154a:	35 01       	movw	r6, r10
    154c:	4c 1a       	sub	r4, r28
    154e:	5d 0a       	sbc	r5, r29
    1550:	61 08       	sbc	r6, r1
    1552:	71 08       	sbc	r7, r1
    1554:	e1 2c       	mov	r14, r1
    1556:	68 94       	set
    1558:	ff 24       	eor	r15, r15
    155a:	f1 f8       	bld	r15, 1
    155c:	ec 1a       	sub	r14, r28
    155e:	fd 0a       	sbc	r15, r29
    1560:	ce 14       	cp	r12, r14
    1562:	df 04       	cpc	r13, r15
    1564:	08 f4       	brcc	.+2      	; 0x1568 <sd_raw_write+0x5e>
    1566:	76 01       	movw	r14, r12
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    1568:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <raw_block_address>
    156c:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <raw_block_address+0x1>
    1570:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <raw_block_address+0x2>
    1574:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <raw_block_address+0x3>
    1578:	48 16       	cp	r4, r24
    157a:	59 06       	cpc	r5, r25
    157c:	6a 06       	cpc	r6, r26
    157e:	7b 06       	cpc	r7, r27
    1580:	f1 f0       	breq	.+60     	; 0x15be <sd_raw_write+0xb4>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1582:	0e 94 c9 08 	call	0x1192	; 0x1192 <sd_raw_sync>
    1586:	88 23       	and	r24, r24
    1588:	09 f4       	brne	.+2      	; 0x158c <sd_raw_write+0x82>
    158a:	62 c0       	rjmp	.+196    	; 0x1650 <sd_raw_write+0x146>
                return 0;
#endif

            if(block_offset || write_length < 512)
    158c:	20 97       	sbiw	r28, 0x00	; 0
    158e:	21 f4       	brne	.+8      	; 0x1598 <sd_raw_write+0x8e>
    1590:	e1 14       	cp	r14, r1
    1592:	82 e0       	ldi	r24, 0x02	; 2
    1594:	f8 06       	cpc	r15, r24
    1596:	58 f4       	brcc	.+22     	; 0x15ae <sd_raw_write+0xa4>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	32 e0       	ldi	r19, 0x02	; 2
    159c:	48 ee       	ldi	r20, 0xE8	; 232
    159e:	51 e0       	ldi	r21, 0x01	; 1
    15a0:	c3 01       	movw	r24, r6
    15a2:	b2 01       	movw	r22, r4
    15a4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <sd_raw_read>
    15a8:	88 23       	and	r24, r24
    15aa:	09 f4       	brne	.+2      	; 0x15ae <sd_raw_write+0xa4>
    15ac:	51 c0       	rjmp	.+162    	; 0x1650 <sd_raw_write+0x146>
                    return 0;
            }
            raw_block_address = block_address;
    15ae:	40 92 e4 01 	sts	0x01E4, r4	; 0x8001e4 <raw_block_address>
    15b2:	50 92 e5 01 	sts	0x01E5, r5	; 0x8001e5 <raw_block_address+0x1>
    15b6:	60 92 e6 01 	sts	0x01E6, r6	; 0x8001e6 <raw_block_address+0x2>
    15ba:	70 92 e7 01 	sts	0x01E7, r7	; 0x8001e7 <raw_block_address+0x3>
        }

        if(buffer != raw_block)
    15be:	88 ee       	ldi	r24, 0xE8	; 232
    15c0:	28 16       	cp	r2, r24
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	38 06       	cpc	r3, r24
    15c6:	61 f0       	breq	.+24     	; 0x15e0 <sd_raw_write+0xd6>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    15c8:	a7 01       	movw	r20, r14
    15ca:	b1 01       	movw	r22, r2
    15cc:	ce 01       	movw	r24, r28
    15ce:	88 51       	subi	r24, 0x18	; 24
    15d0:	9e 4f       	sbci	r25, 0xFE	; 254
    15d2:	0e 94 9b 0b 	call	0x1736	; 0x1736 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    15d6:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <raw_block_written>

            if(length == write_length)
    15da:	ec 14       	cp	r14, r12
    15dc:	fd 04       	cpc	r15, r13
    15de:	b9 f1       	breq	.+110    	; 0x164e <sd_raw_write+0x144>
                return 1;
#endif
        }

        /* address card */
        select_card();
    15e0:	28 98       	cbi	0x05, 0	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
    15e2:	b3 01       	movw	r22, r6
    15e4:	a2 01       	movw	r20, r4
    15e6:	88 e1       	ldi	r24, 0x18	; 24
    15e8:	0e 94 86 08 	call	0x110c	; 0x110c <sd_raw_send_command>
    15ec:	88 23       	and	r24, r24
    15ee:	19 f0       	breq	.+6      	; 0x15f6 <sd_raw_write+0xec>
#endif
        {
            unselect_card();
    15f0:	28 9a       	sbi	0x05, 0	; 5
            return 0;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	2d c0       	rjmp	.+90     	; 0x1650 <sd_raw_write+0x146>
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    15f6:	8e ef       	ldi	r24, 0xFE	; 254
    15f8:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
    15fc:	c8 ee       	ldi	r28, 0xE8	; 232
    15fe:	d1 e0       	ldi	r29, 0x01	; 1

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    1600:	89 91       	ld	r24, Y+
    1602:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    1606:	c0 17       	cp	r28, r16
    1608:	d1 07       	cpc	r29, r17
    160a:	d1 f7       	brne	.-12     	; 0x1600 <sd_raw_write+0xf6>
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    160c:	8f ef       	ldi	r24, 0xFF	; 255
    160e:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	0e 94 74 08 	call	0x10e8	; 0x10e8 <sd_raw_send_byte>

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    1618:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>
    161c:	8f 3f       	cpi	r24, 0xFF	; 255
    161e:	e1 f7       	brne	.-8      	; 0x1618 <sd_raw_write+0x10e>
        sd_raw_rec_byte();
    1620:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    1624:	28 9a       	sbi	0x05, 0	; 5

        buffer += write_length;
    1626:	2e 0c       	add	r2, r14
    1628:	3f 1c       	adc	r3, r15
        offset += write_length;
    162a:	8e 0c       	add	r8, r14
    162c:	9f 1c       	adc	r9, r15
    162e:	a1 1c       	adc	r10, r1
    1630:	b1 1c       	adc	r11, r1
        length -= write_length;
    1632:	ce 18       	sub	r12, r14
    1634:	df 08       	sbc	r13, r15

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <raw_block_written>
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    163c:	c1 14       	cp	r12, r1
    163e:	d1 04       	cpc	r13, r1
    1640:	09 f0       	breq	.+2      	; 0x1644 <sd_raw_write+0x13a>
    1642:	80 cf       	rjmp	.-256    	; 0x1544 <sd_raw_write+0x3a>
    1644:	05 c0       	rjmp	.+10     	; 0x1650 <sd_raw_write+0x146>
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    if(sd_raw_locked())
        return 0;
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <sd_raw_write+0x146>
#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
#endif
    }

    return 1;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	01 c0       	rjmp	.+2      	; 0x1650 <sd_raw_write+0x146>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    1650:	df 91       	pop	r29
    1652:	cf 91       	pop	r28
    1654:	1f 91       	pop	r17
    1656:	0f 91       	pop	r16
    1658:	ff 90       	pop	r15
    165a:	ef 90       	pop	r14
    165c:	df 90       	pop	r13
    165e:	cf 90       	pop	r12
    1660:	bf 90       	pop	r11
    1662:	af 90       	pop	r10
    1664:	9f 90       	pop	r9
    1666:	8f 90       	pop	r8
    1668:	7f 90       	pop	r7
    166a:	6f 90       	pop	r6
    166c:	5f 90       	pop	r5
    166e:	4f 90       	pop	r4
    1670:	3f 90       	pop	r3
    1672:	2f 90       	pop	r2
    1674:	08 95       	ret

00001676 <__mulsi3>:
    1676:	db 01       	movw	r26, r22
    1678:	8f 93       	push	r24
    167a:	9f 93       	push	r25
    167c:	0e 94 90 0b 	call	0x1720	; 0x1720 <__muluhisi3>
    1680:	bf 91       	pop	r27
    1682:	af 91       	pop	r26
    1684:	a2 9f       	mul	r26, r18
    1686:	80 0d       	add	r24, r0
    1688:	91 1d       	adc	r25, r1
    168a:	a3 9f       	mul	r26, r19
    168c:	90 0d       	add	r25, r0
    168e:	b2 9f       	mul	r27, r18
    1690:	90 0d       	add	r25, r0
    1692:	11 24       	eor	r1, r1
    1694:	08 95       	ret

00001696 <__udivmodhi4>:
    1696:	aa 1b       	sub	r26, r26
    1698:	bb 1b       	sub	r27, r27
    169a:	51 e1       	ldi	r21, 0x11	; 17
    169c:	07 c0       	rjmp	.+14     	; 0x16ac <__udivmodhi4_ep>

0000169e <__udivmodhi4_loop>:
    169e:	aa 1f       	adc	r26, r26
    16a0:	bb 1f       	adc	r27, r27
    16a2:	a6 17       	cp	r26, r22
    16a4:	b7 07       	cpc	r27, r23
    16a6:	10 f0       	brcs	.+4      	; 0x16ac <__udivmodhi4_ep>
    16a8:	a6 1b       	sub	r26, r22
    16aa:	b7 0b       	sbc	r27, r23

000016ac <__udivmodhi4_ep>:
    16ac:	88 1f       	adc	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	5a 95       	dec	r21
    16b2:	a9 f7       	brne	.-22     	; 0x169e <__udivmodhi4_loop>
    16b4:	80 95       	com	r24
    16b6:	90 95       	com	r25
    16b8:	bc 01       	movw	r22, r24
    16ba:	cd 01       	movw	r24, r26
    16bc:	08 95       	ret

000016be <__udivmodsi4>:
    16be:	a1 e2       	ldi	r26, 0x21	; 33
    16c0:	1a 2e       	mov	r1, r26
    16c2:	aa 1b       	sub	r26, r26
    16c4:	bb 1b       	sub	r27, r27
    16c6:	fd 01       	movw	r30, r26
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <__udivmodsi4_ep>

000016ca <__udivmodsi4_loop>:
    16ca:	aa 1f       	adc	r26, r26
    16cc:	bb 1f       	adc	r27, r27
    16ce:	ee 1f       	adc	r30, r30
    16d0:	ff 1f       	adc	r31, r31
    16d2:	a2 17       	cp	r26, r18
    16d4:	b3 07       	cpc	r27, r19
    16d6:	e4 07       	cpc	r30, r20
    16d8:	f5 07       	cpc	r31, r21
    16da:	20 f0       	brcs	.+8      	; 0x16e4 <__udivmodsi4_ep>
    16dc:	a2 1b       	sub	r26, r18
    16de:	b3 0b       	sbc	r27, r19
    16e0:	e4 0b       	sbc	r30, r20
    16e2:	f5 0b       	sbc	r31, r21

000016e4 <__udivmodsi4_ep>:
    16e4:	66 1f       	adc	r22, r22
    16e6:	77 1f       	adc	r23, r23
    16e8:	88 1f       	adc	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	1a 94       	dec	r1
    16ee:	69 f7       	brne	.-38     	; 0x16ca <__udivmodsi4_loop>
    16f0:	60 95       	com	r22
    16f2:	70 95       	com	r23
    16f4:	80 95       	com	r24
    16f6:	90 95       	com	r25
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	bd 01       	movw	r22, r26
    16fe:	cf 01       	movw	r24, r30
    1700:	08 95       	ret

00001702 <__umulhisi3>:
    1702:	a2 9f       	mul	r26, r18
    1704:	b0 01       	movw	r22, r0
    1706:	b3 9f       	mul	r27, r19
    1708:	c0 01       	movw	r24, r0
    170a:	a3 9f       	mul	r26, r19
    170c:	70 0d       	add	r23, r0
    170e:	81 1d       	adc	r24, r1
    1710:	11 24       	eor	r1, r1
    1712:	91 1d       	adc	r25, r1
    1714:	b2 9f       	mul	r27, r18
    1716:	70 0d       	add	r23, r0
    1718:	81 1d       	adc	r24, r1
    171a:	11 24       	eor	r1, r1
    171c:	91 1d       	adc	r25, r1
    171e:	08 95       	ret

00001720 <__muluhisi3>:
    1720:	0e 94 81 0b 	call	0x1702	; 0x1702 <__umulhisi3>
    1724:	a5 9f       	mul	r26, r21
    1726:	90 0d       	add	r25, r0
    1728:	b4 9f       	mul	r27, r20
    172a:	90 0d       	add	r25, r0
    172c:	a4 9f       	mul	r26, r20
    172e:	80 0d       	add	r24, r0
    1730:	91 1d       	adc	r25, r1
    1732:	11 24       	eor	r1, r1
    1734:	08 95       	ret

00001736 <memcpy>:
    1736:	fb 01       	movw	r30, r22
    1738:	dc 01       	movw	r26, r24
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <memcpy+0xa>
    173c:	01 90       	ld	r0, Z+
    173e:	0d 92       	st	X+, r0
    1740:	41 50       	subi	r20, 0x01	; 1
    1742:	50 40       	sbci	r21, 0x00	; 0
    1744:	d8 f7       	brcc	.-10     	; 0x173c <memcpy+0x6>
    1746:	08 95       	ret

00001748 <strchr>:
    1748:	fc 01       	movw	r30, r24
    174a:	81 91       	ld	r24, Z+
    174c:	86 17       	cp	r24, r22
    174e:	21 f0       	breq	.+8      	; 0x1758 <strchr+0x10>
    1750:	88 23       	and	r24, r24
    1752:	d9 f7       	brne	.-10     	; 0x174a <strchr+0x2>
    1754:	99 27       	eor	r25, r25
    1756:	08 95       	ret
    1758:	31 97       	sbiw	r30, 0x01	; 1
    175a:	cf 01       	movw	r24, r30
    175c:	08 95       	ret

0000175e <strcmp>:
    175e:	fb 01       	movw	r30, r22
    1760:	dc 01       	movw	r26, r24
    1762:	8d 91       	ld	r24, X+
    1764:	01 90       	ld	r0, Z+
    1766:	80 19       	sub	r24, r0
    1768:	01 10       	cpse	r0, r1
    176a:	d9 f3       	breq	.-10     	; 0x1762 <strcmp+0x4>
    176c:	99 0b       	sbc	r25, r25
    176e:	08 95       	ret

00001770 <strncmp>:
    1770:	fb 01       	movw	r30, r22
    1772:	dc 01       	movw	r26, r24
    1774:	41 50       	subi	r20, 0x01	; 1
    1776:	50 40       	sbci	r21, 0x00	; 0
    1778:	30 f0       	brcs	.+12     	; 0x1786 <strncmp+0x16>
    177a:	8d 91       	ld	r24, X+
    177c:	01 90       	ld	r0, Z+
    177e:	80 19       	sub	r24, r0
    1780:	19 f4       	brne	.+6      	; 0x1788 <strncmp+0x18>
    1782:	00 20       	and	r0, r0
    1784:	b9 f7       	brne	.-18     	; 0x1774 <strncmp+0x4>
    1786:	88 1b       	sub	r24, r24
    1788:	99 0b       	sbc	r25, r25
    178a:	08 95       	ret

0000178c <_exit>:
    178c:	f8 94       	cli

0000178e <__stop_program>:
    178e:	ff cf       	rjmp	.-2      	; 0x178e <__stop_program>
