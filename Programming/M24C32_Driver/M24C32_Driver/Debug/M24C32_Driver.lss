
M24C32_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000003e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000013e3  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000dc0  00000000  00000000  00001887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000742  00000000  00000000  00002647  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00002d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007dd  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000475  00000000  00000000  000036e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00003b56  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
   c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  24:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  34:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  40:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  48:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  4c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  54:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  68:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  6c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  70:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  74:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  78:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  7c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  80:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  84:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  88:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  8c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  90:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  94:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  98:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  9c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
  a8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	0e 94 e5 00 	call	0x1ca	; 0x1ca <main>
  bc:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

000000c0 <__bad_interrupt>:
  c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <_ZN6M24C3214set_write_ctrlEb>:
	i2c_write(val);                           // write value to EEPROM
	i2c_stop();                               // set stop condition = release bus
}


void M24C32::write_page(uint16_t address, uint8_t *vals, uint8_t vals_size){
  c4:	fc 01       	movw	r30, r24
  c6:	66 23       	and	r22, r22
  c8:	79 f0       	breq	.+30     	; 0xe8 <_ZN6M24C3214set_write_ctrlEb+0x24>
  ca:	a3 81       	ldd	r26, Z+3	; 0x03
  cc:	b4 81       	ldd	r27, Z+4	; 0x04
  ce:	2c 91       	ld	r18, X
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	02 80       	ldd	r0, Z+2	; 0x02
  d6:	02 c0       	rjmp	.+4      	; 0xdc <_ZN6M24C3214set_write_ctrlEb+0x18>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	0a 94       	dec	r0
  de:	e2 f7       	brpl	.-8      	; 0xd8 <_ZN6M24C3214set_write_ctrlEb+0x14>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8c 93       	st	X, r24
  e6:	08 95       	ret
  e8:	a3 81       	ldd	r26, Z+3	; 0x03
  ea:	b4 81       	ldd	r27, Z+4	; 0x04
  ec:	4c 91       	ld	r20, X
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	c9 01       	movw	r24, r18
  f4:	02 80       	ldd	r0, Z+2	; 0x02
  f6:	02 c0       	rjmp	.+4      	; 0xfc <_ZN6M24C3214set_write_ctrlEb+0x38>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	0a 94       	dec	r0
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <_ZN6M24C3214set_write_ctrlEb+0x34>
 100:	84 2b       	or	r24, r20
 102:	8c 93       	st	X, r24
 104:	08 95       	ret

00000106 <_ZN6M24C325setupEv>:
 106:	dc 01       	movw	r26, r24
 108:	15 96       	adiw	r26, 0x05	; 5
 10a:	ed 91       	ld	r30, X+
 10c:	fc 91       	ld	r31, X
 10e:	16 97       	sbiw	r26, 0x06	; 6
 110:	40 81       	ld	r20, Z
 112:	21 e0       	ldi	r18, 0x01	; 1
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	12 96       	adiw	r26, 0x02	; 2
 118:	0c 90       	ld	r0, X
 11a:	02 c0       	rjmp	.+4      	; 0x120 <_ZN6M24C325setupEv+0x1a>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <_ZN6M24C325setupEv+0x16>
 124:	24 2b       	or	r18, r20
 126:	20 83       	st	Z, r18
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	0e 94 62 00 	call	0xc4	; 0xc4 <_ZN6M24C3214set_write_ctrlEb>
 12e:	0e 94 10 01 	call	0x220	; 0x220 <i2c_init>
 132:	08 95       	ret

00000134 <_ZN6M24C32C1EhhPVhS1_>:
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	fc 01       	movw	r30, r24
 13a:	42 83       	std	Z+2, r20	; 0x02
 13c:	34 83       	std	Z+4, r19	; 0x04
 13e:	23 83       	std	Z+3, r18	; 0x03
 140:	16 83       	std	Z+6, r17	; 0x06
 142:	05 83       	std	Z+5, r16	; 0x05
 144:	80 ea       	ldi	r24, 0xA0	; 160
 146:	86 0f       	add	r24, r22
 148:	80 83       	st	Z, r24
 14a:	60 55       	subi	r22, 0x50	; 80
 14c:	61 83       	std	Z+1, r22	; 0x01
 14e:	cf 01       	movw	r24, r30
 150:	0e 94 83 00 	call	0x106	; 0x106 <_ZN6M24C325setupEv>
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <_ZN6M24C3210write_byteEjh>:
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	16 2f       	mov	r17, r22
 162:	d7 2f       	mov	r29, r23
 164:	c4 2f       	mov	r28, r20
 166:	fc 01       	movw	r30, r24
 168:	80 81       	ld	r24, Z
 16a:	0e 94 3d 01 	call	0x27a	; 0x27a <i2c_start_wait>
 16e:	81 2f       	mov	r24, r17
 170:	0e 94 71 01 	call	0x2e2	; 0x2e2 <i2c_write>
 174:	8d 2f       	mov	r24, r29
 176:	0e 94 71 01 	call	0x2e2	; 0x2e2 <i2c_write>
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <i2c_write>
 180:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_stop>
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	08 95       	ret

0000018c <_ZN6M24C329read_byteEj>:
	
}

uint8_t M24C32::read_byte(uint16_t address){
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
 196:	06 2f       	mov	r16, r22
 198:	17 2f       	mov	r17, r23
	uint8_t ret;
	i2c_start_wait(M24C32_MEM+I2C_WRITE);     // set device address and write mode
 19a:	88 81       	ld	r24, Y
 19c:	0e 94 3d 01 	call	0x27a	; 0x27a <i2c_start_wait>
	i2c_write(address&0xFF);                  // write address most significant 0
 1a0:	80 2f       	mov	r24, r16
 1a2:	0e 94 71 01 	call	0x2e2	; 0x2e2 <i2c_write>
	i2c_write((address>>8)&0xFF);             // write address least significant 0
 1a6:	81 2f       	mov	r24, r17
 1a8:	0e 94 71 01 	call	0x2e2	; 0x2e2 <i2c_write>
	i2c_rep_start(M24C32_MEM+I2C_READ);       // set device address and read mode
 1ac:	88 81       	ld	r24, Y
 1ae:	8f 5f       	subi	r24, 0xFF	; 255
 1b0:	0e 94 65 01 	call	0x2ca	; 0x2ca <i2c_rep_start>
	ret = i2c_readNak();                      // read one byte from EEPROM (not used)
 1b4:	0e 94 83 01 	call	0x306	; 0x306 <i2c_readNak>
 1b8:	c8 2f       	mov	r28, r24
	i2c_stop();
 1ba:	0e 94 68 01 	call	0x2d0	; 0x2d0 <i2c_stop>

	return ret;
}
 1be:	8c 2f       	mov	r24, r28
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <main>:

#define M24C32_MEM   0xA0
//#define M24C32_ADDR  0xB0
//#define M24C32_WC    PD5
int main (void)
{					  
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	27 97       	sbiw	r28, 0x07	; 7
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	f8 94       	cli
 1d8:	de bf       	out	0x3e, r29	; 62
 1da:	0f be       	out	0x3f, r0	; 63
 1dc:	cd bf       	out	0x3d, r28	; 61

	M24C32 eeprom = M24C32(0x00, PD5, &PORTD, &DDRD);
 1de:	0a e2       	ldi	r16, 0x2A	; 42
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	2b e2       	ldi	r18, 0x2B	; 43
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	45 e0       	ldi	r20, 0x05	; 5
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	ce 01       	movw	r24, r28
 1ec:	01 96       	adiw	r24, 0x01	; 1
 1ee:	0e 94 9a 00 	call	0x134	; 0x134 <_ZN6M24C32C1EhhPVhS1_>

	/* Insert application code here, after the board has been initialized. */

	while (1)
	{
		eeprom.write_byte(22, 42);
 1f2:	4a e2       	ldi	r20, 0x2A	; 42
 1f4:	66 e1       	ldi	r22, 0x16	; 22
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	ce 01       	movw	r24, r28
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	0e 94 ad 00 	call	0x15a	; 0x15a <_ZN6M24C3210write_byteEjh>
		eeprom.read_byte(22);
 200:	66 e1       	ldi	r22, 0x16	; 22
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	ce 01       	movw	r24, r28
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	0e 94 c6 00 	call	0x18c	; 0x18c <_ZN6M24C329read_byteEj>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 20c:	2f e9       	ldi	r18, 0x9F	; 159
 20e:	86 e8       	ldi	r24, 0x86	; 134
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	21 50       	subi	r18, 0x01	; 1
 214:	80 40       	sbci	r24, 0x00	; 0
 216:	90 40       	sbci	r25, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <main+0x48>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x52>
 21c:	00 00       	nop
 21e:	e9 cf       	rjmp	.-46     	; 0x1f2 <main+0x28>

00000220 <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	while(!(TWCR & (1<<TWINT)));    

    return TWDR;

}/* i2c_readAck */
 220:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 224:	8c e0       	ldi	r24, 0x0C	; 12
 226:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 22a:	08 95       	ret

0000022c <i2c_start>:
 22c:	94 ea       	ldi	r25, 0xA4	; 164
 22e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 232:	ec eb       	ldi	r30, 0xBC	; 188
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	90 81       	ld	r25, Z
 238:	99 23       	and	r25, r25
 23a:	ec f7       	brge	.-6      	; 0x236 <i2c_start+0xa>
 23c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 240:	98 7f       	andi	r25, 0xF8	; 248
 242:	98 30       	cpi	r25, 0x08	; 8
 244:	11 f0       	breq	.+4      	; 0x24a <i2c_start+0x1e>
 246:	90 31       	cpi	r25, 0x10	; 16
 248:	a1 f4       	brne	.+40     	; 0x272 <i2c_start+0x46>
 24a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 24e:	84 e8       	ldi	r24, 0x84	; 132
 250:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 254:	ec eb       	ldi	r30, 0xBC	; 188
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	88 23       	and	r24, r24
 25c:	ec f7       	brge	.-6      	; 0x258 <i2c_start+0x2c>
 25e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 262:	98 7f       	andi	r25, 0xF8	; 248
 264:	98 31       	cpi	r25, 0x18	; 24
 266:	39 f0       	breq	.+14     	; 0x276 <i2c_start+0x4a>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 34       	cpi	r25, 0x40	; 64
 26c:	29 f4       	brne	.+10     	; 0x278 <i2c_start+0x4c>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	08 95       	ret
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	08 95       	ret
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret

0000027a <i2c_start_wait>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec eb       	ldi	r30, 0xBC	; 188
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	24 ea       	ldi	r18, 0xA4	; 164
 284:	a9 eb       	ldi	r26, 0xB9	; 185
 286:	b0 e0       	ldi	r27, 0x00	; 0
 288:	cb eb       	ldi	r28, 0xBB	; 187
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	34 e8       	ldi	r19, 0x84	; 132
 28e:	44 e9       	ldi	r20, 0x94	; 148
 290:	20 83       	st	Z, r18
 292:	90 81       	ld	r25, Z
 294:	99 23       	and	r25, r25
 296:	ec f7       	brge	.-6      	; 0x292 <i2c_start_wait+0x18>
 298:	9c 91       	ld	r25, X
 29a:	98 7f       	andi	r25, 0xF8	; 248
 29c:	98 30       	cpi	r25, 0x08	; 8
 29e:	11 f0       	breq	.+4      	; 0x2a4 <i2c_start_wait+0x2a>
 2a0:	90 31       	cpi	r25, 0x10	; 16
 2a2:	b1 f7       	brne	.-20     	; 0x290 <i2c_start_wait+0x16>
 2a4:	88 83       	st	Y, r24
 2a6:	30 83       	st	Z, r19
 2a8:	90 81       	ld	r25, Z
 2aa:	99 23       	and	r25, r25
 2ac:	ec f7       	brge	.-6      	; 0x2a8 <i2c_start_wait+0x2e>
 2ae:	9c 91       	ld	r25, X
 2b0:	98 7f       	andi	r25, 0xF8	; 248
 2b2:	90 32       	cpi	r25, 0x20	; 32
 2b4:	11 f0       	breq	.+4      	; 0x2ba <i2c_start_wait+0x40>
 2b6:	98 35       	cpi	r25, 0x58	; 88
 2b8:	29 f4       	brne	.+10     	; 0x2c4 <i2c_start_wait+0x4a>
 2ba:	40 83       	st	Z, r20
 2bc:	90 81       	ld	r25, Z
 2be:	94 fd       	sbrc	r25, 4
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <i2c_start_wait+0x42>
 2c2:	e6 cf       	rjmp	.-52     	; 0x290 <i2c_start_wait+0x16>
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <i2c_rep_start>:
 2ca:	0e 94 16 01 	call	0x22c	; 0x22c <i2c_start>
 2ce:	08 95       	ret

000002d0 <i2c_stop>:
 2d0:	84 e9       	ldi	r24, 0x94	; 148
 2d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2d6:	ec eb       	ldi	r30, 0xBC	; 188
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	84 fd       	sbrc	r24, 4
 2de:	fd cf       	rjmp	.-6      	; 0x2da <i2c_stop+0xa>
 2e0:	08 95       	ret

000002e2 <i2c_write>:
 2e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 2e6:	84 e8       	ldi	r24, 0x84	; 132
 2e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 2ec:	ec eb       	ldi	r30, 0xBC	; 188
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	80 81       	ld	r24, Z
 2f2:	88 23       	and	r24, r24
 2f4:	ec f7       	brge	.-6      	; 0x2f0 <i2c_write+0xe>
 2f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2fa:	98 7f       	andi	r25, 0xF8	; 248
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	98 32       	cpi	r25, 0x28	; 40
 300:	09 f4       	brne	.+2      	; 0x304 <i2c_write+0x22>
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	08 95       	ret

00000306 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 306:	84 e8       	ldi	r24, 0x84	; 132
 308:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 30c:	ec eb       	ldi	r30, 0xBC	; 188
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	80 81       	ld	r24, Z
 312:	88 23       	and	r24, r24
 314:	ec f7       	brge	.-6      	; 0x310 <i2c_readNak+0xa>
	
    return TWDR;
 316:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readNak */
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
